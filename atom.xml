<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kangjn.github.io/</id>
    <title>MyBlog</title>
    <updated>2021-04-26T00:28:38.557Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kangjn.github.io/"/>
    <link rel="self" href="https://kangjn.github.io/atom.xml"/>
    <subtitle>我的博客</subtitle>
    <logo>https://kangjn.github.io/images/avatar.png</logo>
    <icon>https://kangjn.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, MyBlog</rights>
    <entry>
        <title type="html"><![CDATA[Java 技术书籍大全]]></title>
        <id>https://kangjn.github.io/post/java-ji-zhu-shu-ji-da-quan/</id>
        <link href="https://kangjn.github.io/post/java-ji-zhu-shu-ji-da-quan/">
        </link>
        <updated>2021-04-25T07:42:10.000Z</updated>
        <content type="html"><![CDATA[<p>涵盖领域：Java入门书籍，Java基础及进阶书籍，框架与中间件，架构设计，设计模式，数学与算法，JVM周边语言，项目管理&amp;领导力&amp;流程，职业素养与个人成长，格局与视野，面试参考书等。<br>
https://github.com/sorenduan/awesome-java-books</p>
<h3 id="目录">目录：</h3>
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%85%A5%E9%97%A8%E4%B9%A6%E7%B1%8D">入门书籍</a></li>
<li>基础书籍
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%B9%B6%E5%8F%91">多线程与并发</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B">网络编程</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80">语言基础</a></li>
</ul>
</li>
<li>进阶
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96">性能优化</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B">响应式编程</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#jvm%E8%99%9A%E6%8B%9F%E6%9C%BA">JVM虚拟机</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%E4%BC%98%E5%8C%96">代码&amp;设计优化</a></li>
</ul>
</li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">设计模式</a></li>
<li>框架与中间件
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E7%BC%93%E5%AD%98%E4%B8%8Enosql">缓存与NoSQL</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息队列</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#orm%E6%A1%86%E6%9E%B6">ORM框架</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#spring%E5%AE%B6%E6%97%8F">Spring家族</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E9%AB%98%E5%B9%B6%E5%8F%91">高并发</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F">分布式</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%A4%A7%E6%95%B0%E6%8D%AE">大数据</a></li>
</ul>
</li>
<li>架构
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84">分布式架构</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84">微服务架构</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%9E%B6%E6%9E%84%E6%96%B9%E6%B3%95%E8%AE%BA">架构方法论</a></li>
</ul>
</li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#jvm%E5%91%A8%E8%BE%B9%E8%AF%AD%E8%A8%80">JVM周边语言</a></li>
<li>项目管理&amp;领导力&amp;流程
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86">项目管理</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86">团队管理</a></li>
</ul>
</li>
<li>数学与算法
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%95%B0%E5%AD%A6">数学</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E7%AE%97%E6%B3%95">算法</a></li>
</ul>
</li>
<li>职业素养与个人成长
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E8%81%8C%E4%B8%9A%E7%B4%A0%E5%85%BB%E6%8F%90%E5%8D%87">职业素养提升</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E4%B8%AA%E4%BA%BA%E8%BD%AF%E6%8A%80%E8%83%BD">个人软技能</a></li>
</ul>
</li>
<li>大厂出品
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E6%8A%80%E6%9C%AF%E4%B8%9B%E4%B9%A6">阿里巴巴技术丛书</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E4%BA%AC%E4%B8%9C%E6%8A%80%E6%9C%AF%E4%B8%9B%E4%B9%A6">京东技术丛书</a></li>
</ul>
</li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%B7%A5%E5%85%B7%E4%B9%A6">工具书</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E9%9D%A2%E8%AF%95%E6%B1%82%E8%81%8C">面试求职</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%A0%BC%E5%B1%80%E4%B8%8E%E8%A7%86%E9%87%8E">格局与视野</a></li>
<li>Java之外
<ul>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86">网络知识</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%AE%89%E5%85%A8%E7%9F%A5%E8%AF%86">安全知识</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E5%B7%A5%E5%85%B7">工具</a></li>
<li><a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E8%BF%90%E7%BB%B4devops">运维&amp;DevOps</a></li>
</ul>
</li>
</ul>
<p>TOC generated by <a href="https://github.com/xingshaocheng/simple-php-github-toc">simple-php-github-toc</a></p>
<h2 id="入门书籍">入门书籍</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/TA6z3m">《明解Java》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7urNtH">《Java从入门到精通（第4版 附光盘）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/2dDnsY">《入门很简单丛书：Java Web开发入门很简单》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7zm17P">《程序员炼成记 从小白到工程师》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ZCbVjQ">《Java从小白到大牛》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/mnkAJR">《JavaWeb项目开发实战入门（全彩版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/9TGA0S">《Java精彩编程200例（全彩版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/zMDeI7">《Java轻松学》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/td3bUo">《大话Java：程序设计从入门到精通（含DVD光盘1张）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/HOFu01">《Java语言袖珍指南（第二版）》</a></li>
</ul>
<h2 id=""></h2>
<h2 id="基础书籍">基础书籍</h2>
<ul>
<li>[《Java编程思想（第4版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ajylTp">thinking in java]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/tp87o1">《Java核心技术 卷I：基础知识（原书第10版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/fYGMsC">《Java核心技术卷II：高级特性（原书第10版）》</a></li>
</ul>
<h3 id="多线程与并发">多线程与并发</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ERgtGV">《华章专业开发者丛书·Java并发编程实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/XRUB8H">《Java多线程编程实战指南（设计模式篇）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/LDOFjh">《图解Java多线程设计模式》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/WXhQuO">《实战Java高并发程序设计》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/e5tZdf">《Java高并发编程详解：多线程与架构设计》</a></li>
<li>[《Java核心技术系列：Java多线程编程核心技术 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5p2KoJ">Java Multi-thread Programming]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/RQu2W6">《Java并发编程：核心方法与框架》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/fkn9NP">《Java多线程与Socket：实战微服务框架》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ZwyPCp">《NIO与Socket编程技术指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/vB6BA2">《Java并发编程之美》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/fthTzf">《实战Java高并发程序设计（第2版）》</a></li>
</ul>
<h3 id="网络编程">网络编程</h3>
<ul>
<li>[《Java网络编程（第四版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/osowEq">Java network programming, forth edition]》</a></li>
</ul>
<h3 id="数据结构">数据结构</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/wdrJls">《数据结构与算法分析：Java语言描述（原书第3版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/9GKS26">《图解数据结构：使用Java》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/DCJzy6">《数据结构与算法Java语言描述》</a></li>
</ul>
<h3 id="-2"></h3>
<h3 id="语言基础">语言基础</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/MNwLHg">《Java 8实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/M6XqLp">《Java函数式编程》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/YApFXv">《Java编程的逻辑》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/UZgI0F">《O'Reilly：Head First Java（中文版 第2版 涵盖Java5.0）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ZCMWOr">《写给大忙人看的Java核心技术》</a></li>
<li>[《精通lambda表达式：Java多核编程 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ajoGad">Mastering Lambdas: Java Programming in a Multicore]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5HXsKg">《Java 9模块化开发：核心原则与实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/l7fy1C">《Java JDK 9学习笔记》</a></li>
<li>[《Java 9编程参考官方大全（第10版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/CqmtBM">Java：Thte Complete Reference，Tenth Edition]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/JMdy64">《写给大忙人的Java SE 9核心技术》</a></li>
</ul>
<h2 id="-3"></h2>
<h2 id="进阶">进阶</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/MBhyO7">《深入分析Java Web技术内幕（修订版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GEdlD0">《Java RESTful Web Service实战（第2版）》</a></li>
</ul>
<h3 id="性能优化">性能优化</h3>
<ul>
<li>[《Java性能优化权威指南 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qTFNCP">Java performance]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/6CYRQi">《Java程序性能优化：让你的Java程序更快、更稳定》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/KmJo2x">《Java性能权威指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GKe55M">《51CTO学院系列丛书·实战Java虚拟机：JVM故障诊断与性能优化》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/sQPN8w">《Java性能调优指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Uqaj5n">《大话Java性能优化》</a></li>
</ul>
<h3 id="响应式编程">响应式编程</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/nvsfLb">《响应式架构：消息模式Actor实现与Scala、Akka应用集成》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/HeIp16">《RxJava响应式编程》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/iIZc0A">《RxJava 2.x 实战》</a></li>
</ul>
<h3 id="jvm虚拟机">JVM虚拟机</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/DgTnN2">《深入理解Java虚拟机：JVM高级特性与最佳实践（第2版）》</a></li>
<li>[《Java核心技术系列：Java虚拟机规范（Java SE 8版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/73DIJB">The Java Virtual Machine Specification Jave SE 8 Edition]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ct4KRw">《揭秘Java虚拟机：JVM设计原理与实现》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xJZjRH">《HotSpot实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/0ZMjqZ">《Java从入门到动手写虚拟机1（套装共2册）》</a></li>
</ul>
<h3 id="代码设计优化">代码&amp;设计优化</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/QSoCEv">《重构 改善既有代码的设计 Java语言版》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/wxQc3i">《代码大全（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/syzAFD">《Effective Java中文版（原书第3版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Rt31CM">《代码整洁之道 程序员的职业素养》</a></li>
<li>[《代码整洁之道 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/XBQxz8">Clean Code A Handbook of Agile Software Craftsmanship]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ld8p0r">《Spring实战（第4版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/0hnAnw">《代码不朽：编写可维护软件的10大要则（Java版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/tyYWro">《Java代码与架构之完美优化 实战经典》</a></li>
</ul>
<h2 id="设计模式">设计模式</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/SJWtpV">《反应式设计模式》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/IGKmVq">《O'Reilly：Head First设计模式（中文版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/D59mge">《设计模式：可复用面向对象软件的基础》</a></li>
<li>[《实现领域驱动设计 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/lFwQdc">Implementing Domain-Driven Design]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/yxTBEJ">《原创精品系列：设计模式之禅（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/H9tRFl">《图解设计模式》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qfAaGS">《大话设计模式》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/PllZtF">《领域驱动设计 软件核心复杂性应对之道 修订版》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xRo8Ur">《Java测试驱动开发》</a></li>
</ul>
<h2 id="框架与中间件">框架与中间件</h2>
<h3 id="数据库">数据库</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/i4KCQO">《高性能MySQL（第3版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Th90ra">《MySQL技术内幕：InnoDB存储引擎（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/YivOvQ">《大型网站系统与Java中间件实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/HjaHc2">《深入浅出MySQL 数据库开发 优化与管理维护 第2版》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/oYHlHw">《PostgreSQL修炼之道：从小工到专家》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/hKsMRX">《PostgreSQL技术内幕：查询优化深度探索》</a></li>
</ul>
<h3 id="缓存与nosql">缓存与NoSQL</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/uZirI6">《Redis 深度历险：核心原理与应用实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/VMo7w2">《Redis实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GmFr7B">《Redis入门指南（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/TKeCR2">《深入分布式缓存：从原理到实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/8DuE9W">《人人都是架构师：分布式系统架构落地与瓶颈突破》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qd9tLA">《MongoDB应用设计模式》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Mlefug">《MongoDB实战 架构、开发与管理》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/1QhhB6">《NoSQL数据库入门与实践（基于MongoDB、Redis）》</a></li>
</ul>
<h3 id="消息队列">消息队列</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/4SyxGo">《RabbitMQ实战指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qIwmGY">《Kafka权威指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/hqBGgy">《Kafka入门与实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/vyU3eK">《RocketMQ实战与原理解析》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GZh0yK">《Kafka技术内幕 图文详解Kafka源码设计与实现》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/sTtFQn">《深入理解Kafka：核心设计与实践原理》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GzBNOZ">《分布式消息中间件实践》</a></li>
</ul>
<h3 id="orm框架">ORM框架</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/0GXsRh">《MyBatis从入门到精通》</a></li>
</ul>
<h3 id="spring家族">Spring家族</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ohN8uh">《Spring微服务实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/z1QvAP">《Spring Cloud微服务实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/FfCbxt">《深入理解Spring Cloud与微服务构建》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/wAPeEw">《MyBatis技术内幕》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/BcQznU">《Spring Boot实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/k0xgoA">《深入浅出Spring Boot 2.x》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/4Rtvg3">《JavaEE开发的颠覆者：Spring Boot实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/2rz8BY">《Spring技术内幕：深入解析Spring架构与设计原理（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xrNcv1">《Spring Boot 2精髓：从构建小系统到架构分布式大系统》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/dtDOqc">《Spring 5开发大全》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/oFsaYt">《Spring Cloud微服务架构进阶》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/SdhhtK">《Spring源码深度解析 第2版》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ghc04R">《Spring MVC实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/fCZpVU">《Spring Boot编程思想（核心篇）（限量版亲笔签名书签 随机发售）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/HO244A">《互联网轻量级SSM框架解密：Spring、Spring MVC、MyBatis源码深度剖析》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/O9L5Nb">《Spring学习指南 第3版》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/k4WSg3">《精通Spring MVC 4》</a></li>
</ul>
<h3 id="高并发">高并发</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/htIJgi">《Netty实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/81Pbod">《七周七并发模型》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7tGXx5">《Netty权威指南（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/VBYLE0">《Netty进阶之路：跟着案例学Netty》</a></li>
</ul>
<h3 id="分布式">分布式</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/3rp1Hv">《从Paxos到Zookeeper分布式一致性原理与实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/LAyupw">《ZooKeeper：分布式过程协同技术详解》</a></li>
</ul>
<h3 id="搜索引擎">搜索引擎</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/IdftoH">《从Lucene到Elasticsearch：全文检索实战》</a></li>
</ul>
<h3 id="大数据">大数据</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/BlEDc7">《Hadoop权威指南：大数据的存储与分析(第4版)》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/dW1kpa">《Hadoop构建数据仓库实践》</a></li>
<li>[《HBase权威指南 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/wqb9z0">HBase： The Definitive Guide]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/azPD8S">《图解Spark：核心技术与案例实战》</a></li>
<li>[《Hive编程指南 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/bd1YCS">Programming Hive]》</a> -</li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/kFRuj2">《HBase应用架构》</a></li>
</ul>
<h2 id="架构">架构</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/pTZ8xk">《Web性能权威指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7tOuAz">《从零开始学架构：照着做，你也能成为架构师》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Qs9SXn">《Java应用架构设计：模块化模式与OSGi》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GVYZr9">《大型网站技术架构演进与性能优化》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7y5NpR">《高可用架构（第1卷）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/kPGIoj">《Java架构师指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Bc2TLN">《大话代码架构（项目实战版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/mzqn7f">《小团队构建大网站：中小研发团队架构实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/zDMNQs">《未来架构 从服务化到云原生(限量签名 随机发放)》</a></li>
</ul>
<h3 id="分布式架构">分布式架构</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/zpE3MI">《可伸缩架构：面向增长应用的高可用》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/HQHcMY">《分布式服务架构：原理、设计与实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/9JXTi8">《亿级流量网站架构核心技术 跟开涛学搭建高可用高并发系统》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/zzctjK">《大型分布式网站架构设计与实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/l4UA35">《可伸缩服务架构：框架与中间件》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/1YUJxK">《架构探险：从零开始写分布式服务框架》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/4trb76">《Cloud Native分布式架构原理与实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/QWumiy">《分布式系统常用技术及案例分析（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/53hDaR">《云原生Java：Spring Boot、Spring Cloud与Cloud Foundry弹性系统设计》</a></li>
</ul>
<h3 id="微服务架构">微服务架构</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5KB81a">《微服务设计》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/LF3vzd">《生产微服务》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xoCkW1">《架构解密：从分布式到微服务》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/jk1V1F">《Java微服务》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/QvfyPI">《Spring Cloud 微服务架构开发实战（全新升级版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/DyZQbc">《微服务实践》</a></li>
</ul>
<h3 id="架构方法论">架构方法论</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/k8yxj0">《架构整洁之道》</a> - 豆瓣评分 8.8</li>
<li>[《企业应用架构模式 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/pQOd7z">Patterns of Enterprise Application Architecture]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ipHhzt">《企业IT架构转型之道 阿里巴巴中台战略思想与架构实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/jRMw2b">《聊聊“架构”》</a> - 豆瓣评分 7.6</li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/1gr9nd">《架构真经：互联网技术架构的设计原则（原书第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/4Y77J0">《软件架构设计：程序员向架构师转型必备（第2版）》</a></li>
<li>[《恰如其分的软件架构 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/XOr8py">Just Enough Software Architecture]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/lSUYn8">《软件架构设计：大型网站技术架构与业务架构融合之道》</a></li>
</ul>
<h2 id="-4"></h2>
<h2 id="jvm周边语言">JVM周边语言</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/R0JT1a">《Scala编程（第3版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/AMZkGX">《Groovy程序设计》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/h6Gnct">《快学Scala（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/loJfwO">《Kotlin极简教程》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/WvMNgs">《Scala集合技术手册》</a></li>
</ul>
<h2 id="项目管理领导力流程">项目管理&amp;领导力&amp;流程</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5OmcTI">《构建之法 现代软件工程（第三版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/gcHfSY">《精益思想（白金版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/uZ2nZV">《给产品经理讲技术》</a></li>
</ul>
<h3 id="项目管理">项目管理</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/TzKtiz">《持续交付：发布可靠软件的系统方法》</a></li>
<li>[《名家经典系列：人件（原书第3版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qEOLhm">Peopleware: Productive Projects and Teams]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/gc719a">《硝烟中的Scrum和XP：我们如何实施Scrum》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ZHeyFS">《敏捷软件开发实践 估算与计划》</a></li>
<li>[《人月神话（40周年中文纪念版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/mUkwcD">The Mythical Man-Month：Essays on Software Engineering Anniversary Edition]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/T9HSMS">《Scrum敏捷软件开发》</a></li>
<li>[《用户故事与敏捷方法 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/D8oZoG">User Stories Applied:For Agile Software Development]》</a></li>
<li>[《用户故事地图 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/P6RDR3">User Story Mapping]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/1zgjNd">《知行合一 实现价值驱动的敏捷和精益开发》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Dtrvqn">《互联网项目管理实践精粹》</a></li>
</ul>
<h3 id="团队管理">团队管理</h3>
<ul>
<li>[《卓有成效的管理者（珍藏版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/f2kMe8">The Effective Executive]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xLBU9J">《跃迁：从技术到管理的硅谷路径》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/w4p97S">《告别失控 软件开发团队管理必读》</a></li>
<li>[《赋能：打造应对不确定性的敏捷团队 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/K5DiJn">Team of Teams]》</a></li>
<li>[《OKR工作法：谷歌、领英等顶级公司的高绩效秘籍 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/8Gsrin">Radical Focus]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/PchUJJ">《CTO说》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/wGQe5I">《轻流程 IT团队的积分式绩效管理》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/spqdp1">《技术领导力：程序员如何才能带团队》</a></li>
<li>[《敏捷文化：如何打造优秀的高效能团队 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/pSHHhA">The Agile Culture: Leading through Trust and Owner]》</a></li>
</ul>
<h2 id="数学与算法">数学与算法</h2>
<h3 id="数学">数学</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/lcuOQq">《数学之美（第二版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Yte3WW">《程序员的数学2 概率统计》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/WiKN9k">《程序员的数学3 线性代数》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/iwv4Zd">《程序员的数学》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/qhD5IJ">《程序员的数学思维修炼（趣味解读）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/vBLDyU">《统计之美：人工智能时代的科学思维》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/iCEv9a">《统计思维：程序员数学之概率统计（第2版）》</a></li>
</ul>
<h3 id="算法">算法</h3>
<ul>
<li>[《算法导论（原书第3版）/计算机科学丛书 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/AmwANr">Introduction to Algorithms, third edition]》</a> -</li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/J7HWa6">《算法图解》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Jt8KBI">《漫画算法：小灰的算法之旅（全彩）》</a></li>
</ul>
<h2 id="职业素养与个人成长">职业素养与个人成长</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/DGNxfn">《我编程，我快乐：程序员职业规划之道》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/THQJSq">《程序员的自我修养》</a></li>
</ul>
<h3 id="职业素养提升">职业素养提升</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/J7iABA">《码农翻身：用故事给技术加点料》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/TL272C">《程序员修炼之道：从小工到专家》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/mAbLoA">《极客与团队：软件工程师的团队生存秘笈》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/8l5o8l">《程序员思维修炼(修订版)》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/s1OiZc">《高效能程序员的修炼》</a></li>
<li>[《O'Reilly：卓有成效的程序员 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/XxVx3J">Productive programmer]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ODjq2h">《Java工程师修炼之道》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/DKrbwc">《程序员的成长课》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/y36OqE">《高效程序员的45个习惯：敏捷开发修炼之道(修订版)》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/JKgll1">《温伯格技术思想三部曲：颠覆完美软件 软件测试必须知道的几件事》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/0K8XDo">《温伯格技术思想三部曲：程序开发心理学（银年纪念版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/AlxMcW">《软件开发本质论：追求简约、体现价值、逐步构建》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/W0uA76">《内外兼修：程序员的成长之路》</a></li>
</ul>
<h3 id="个人软技能">个人软技能</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/I3D7Z0">《把时间当作朋友（第3版 全彩）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/GZgwi5">《暗时间》</a></li>
<li>[《关键对话：如何高效能沟通（原书第2版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/jpIkyt">Crucial Conversations: Tools for Talking When Stak]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/N6YwQD">《温伯格技术思想三部曲：成为技术领导者 掌握全面解决问题的方法》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/KkL3kA">《软技能 代码之外的生存指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/8YQH5T">《程序员健康指南》</a></li>
<li>[《如何把事情做到最好：改变全球9800万人的人生指导书 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/NS6cLf">Mastery]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Gt5VDT">《程序员的英语》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/oG641c">《高效能人士的七个习惯（30周年纪念版）》</a></li>
</ul>
<h2 id="大厂出品">大厂出品</h2>
<h3 id="阿里巴巴技术丛书">阿里巴巴技术丛书</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/mIi1ic">《码出高效：Java开发手册》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/4888rh">《大数据之路 阿里巴巴大数据实践》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/xHqHfG">《技术之瞳 阿里巴巴技术笔试心得》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/uZYvrV">《淘宝技术这十年》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/VA9xEV">《尽在双11 阿里巴巴技术演进与超越》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5NdzxY">《逆流而上：阿里巴巴技术成长之路》</a></li>
</ul>
<h3 id="京东技术丛书">京东技术丛书</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ET1NkI">《京东基础架构建设之路（全彩）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/0OOBCc">《京东系统质量保障技术实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/V6tLFs">《京东技术解密》</a></li>
</ul>
<h2 id="工具书">工具书</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/5U9zkK">《Linux命令行与shell脚本编程大全（第3版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/28U5lx">《阿里巴巴Java开发手册》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/d5ADPR">《SQL即查即用 （全彩版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/VgrIgv">《Linux命令速查手册（第三版）》</a></li>
</ul>
<h2 id="面试求职">面试求职</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/IgfC55">《剑指Offer：名企面试官精讲典型编程题（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/E4WimD">《编程之美：微软技术面试心得》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/UqcYlU">《Java程序员面试笔试宝典》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/tm79JE">《Java程序员面试宝典（第4版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/7ujWIz">《编程之法：面试和算法心得》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/eE9uWg">《Java程序员面试算法宝典》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Jc9Xlt">《Java程序员面试笔试真题库》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/VqoEj5">《Java程序员面试笔试真题与解析》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/pfIsU6">《Java核心技术及面试指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/j0XMdh">《解忧程序员：高薪编程、求职面试与成长转型宝典》</a></li>
</ul>
<h2 id="格局与视野">格局与视野</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/bgG9yE">《全球科技通史》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/koCTxD">《浪潮之巅 第三版 套装上下册》</a></li>
<li>[《黑客与画家：硅谷创业之父Paul Graham文集 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/KbwmLQ">Hackers and Painters Big Ldeas From the Computer Age]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/EcKZym">《软件随想录 卷1》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/px8Sgu">《软件随想录 卷2》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/6jRwgY">《编程人生：15位软件先驱访谈录》</a></li>
<li>[《大教堂与集市（最新版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/6Y4Mcd">The Cathedral &amp; the Bazaar]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/3yyV1D">《硅谷之谜：浪潮之巅 续集》</a></li>
<li>[《原则 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/M7OrgY">Principles]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/PxHueV">《精益创业》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/rdipjJ">《态度：吴军博士新书》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/cP4xDs">《见识》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/oGJFTx">《极限创新 35岁之前改变世界的全球科技精英》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/FBINiB">《大学的终结：泛在大学与高等教育革命》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/ZfHw4B">《未来版图 全球聪明公司的科技创新趋势和商业化路径》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/cNCbEF">《你好哇，程序员——漫话程序员面试求职、升职加薪、创业与生活》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/S1ZQhz">《图灵和ACM图灵奖（1966-2015 第五版） 纪念计算机诞生70周年》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/M3PkIU">《文明之光（全彩印刷套装1-4册）入选2014中国好书/第六届中华优秀出版物获奖图书》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/JHxmei">《大师访谈录：成就非凡的软件人生》</a></li>
</ul>
<h2 id="java之外">Java之外</h2>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/RCgC9H">《计算机科学丛书：计算机程序的构造和解释（原书第2版）》</a></li>
<li>[《计算机科学丛书：编译原理（第2版） <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/URRIW5">Compilers:Principle,Techniques and Tools]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/fbemS8">《一个APP的诞生——从零开始设计你的手机应用》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/F4SUYQ">《大型网站性能优化实战：从前端、网络、CDN到后端、大促的全链路性能优化详解》</a></li>
</ul>
<h3 id="网络知识">网络知识</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/q3lNRK">《图解HTTP》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Ip1U7X">《图解TCP/IP 第5版》</a></li>
</ul>
<h3 id="安全知识">安全知识</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/6oCOp8">《白帽子讲Web安全（纪念版）》</a> 4</li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/gecmeS">《Web安全攻防：渗透测试实战指南》</a></li>
</ul>
<h3 id="工具">工具</h3>
<ul>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Fv9ksZ">《Maven实战》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/JvxLfz">《大象：Thinking in UML（第2版）》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/x06AA6">《Git学习指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/W50GoO">《UML基础、案例与应用（第3版 修订版）》</a></li>
</ul>
<h3 id="运维devops">运维&amp;DevOps</h3>
<ul>
<li>[《编码：隐匿在计算机软硬件背后的语言 <a href="https://www.coderxing.com/r.php?r=https://u.jd.com/3ejMcd">Code:The Hidden Language of Computer Hardware and Software]》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/pVBguN">《DevOps实践指南》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/RXZBkB">《性能之巅：洞悉系统、企业与云计算》</a></li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/kzDG88">《鸟哥的Linux私房菜 基础学习篇 第四版》</a> -</li>
<li><a href="https://www.coderxing.com/r.php?r=https://u.jd.com/Slnb59">《DevOps开发运维训练营》</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[后端架构师技术图谱]]></title>
        <id>https://kangjn.github.io/post/github-hou-duan-jia-gou-shi-ji-zhu-tu-pu/</id>
        <link href="https://kangjn.github.io/post/github-hou-duan-jia-gou-shi-ji-zhu-tu-pu/">
        </link>
        <updated>2021-04-25T06:55:13.000Z</updated>
        <content type="html"><![CDATA[<p>成为一名架构师所需要的知识储备，比如：数据结构、常用算法、并发、操作系统、设计模式、运维、统计、技术支持、中间件、网络、数据库、搜索引擎、性能、大数据、安全、常用开源框架、分布式设计、设计思想、开发模式；针对不同职业规划和成长方向所涉及到的项目管理、通用业务术语、技术趋势、政策和法规、架构师素质、团队管理等。<br>
https://github.com/xingshaocheng/architect-awesome</p>
<ul>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%8F%89%E6%A0%91">二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91">完全二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91">平衡二叉树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91bst">二叉查找树（BST）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%A2%E9%BB%91%E6%A0%91">红黑树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#b-bb%E6%A0%91">B，B+，B*树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lsm-%E6%A0%91">LSM 树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%98%9F%E5%88%97">队列</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9B%86%E5%90%88">集合</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%93%BE%E8%A1%A8%E6%95%B0%E7%BB%84">链表、数组</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AD%97%E5%85%B8%E5%85%B3%E8%81%94%E6%95%B0%E7%BB%84">字典、关联数组</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A0%88">栈</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A0%91">树</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#bitset">BitSet</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95">常用算法</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kmp-%E7%AE%97%E6%B3%95">KMP 算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F">选择排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F">冒泡排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">插入排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F">快速排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F">归并排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F">希尔排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A0%86%E6%8E%92%E5%BA%8F">堆排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F">计数排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A1%B6%E6%8E%92%E5%BA%8F">桶排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F">基数排序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE">二分查找</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F%E5%B7%A5%E5%85%B7">Java 中的排序工具</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8E%92%E5%BA%8F%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95">排序、查找算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8">布隆过滤器</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83">字符串比较</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88">深度优先、广度优先</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95">贪心算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95">回溯算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%89%AA%E6%9E%9D%E7%AE%97%E6%B3%95">剪枝算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92">动态规划</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF">朴素贝叶斯</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8E%A8%E8%8D%90%E7%AE%97%E6%B3%95">推荐算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91%E7%AE%97%E6%B3%95">最小生成树算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E7%AE%97%E6%B3%95">最短路径算法</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%B6%E5%8F%91">并发</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java%E4%B8%AD%E7%9A%84%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E7%B1%BB">Java中的锁和同步类</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%AC%E5%B9%B3%E9%94%81--%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81">公平锁 &amp; 非公平锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%82%B2%E8%A7%82%E9%94%81">悲观锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B9%90%E8%A7%82%E9%94%81--cas">乐观锁 &amp; CAS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aba-%E9%97%AE%E9%A2%98">ABA 问题</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#copyonwrite%E5%AE%B9%E5%99%A8">CopyOnWrite容器</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ringbuffer">RingBuffer</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81--%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%85%A5%E9%94%81">可重入锁 &amp; 不可重入锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%92%E6%96%A5%E9%94%81--%E5%85%B1%E4%BA%AB%E9%94%81">互斥锁 &amp; 共享锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%AD%BB%E9%94%81">死锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8B%E5%8A%A1-acid-%E7%89%B9%E6%80%A7">事务 ACID 特性</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%8B%E5%8A%A1%E7%9A%84%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">事务的隔离级别</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvcc">MVCC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-%E5%B9%B6%E5%8F%91">Java 并发</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%80%E8%87%B4%E6%80%A7%E4%BA%8B%E5%8A%A1">一致性、事务</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%94%81">锁</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98">多级缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86">计算机原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cpu">CPU</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9B%E7%A8%8B">进程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%BF%E7%A8%8B">线程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%8F%E7%A8%8B">协程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#linux">Linux</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">设计模式</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%B7%E5%A8%81%E5%AE%9A%E5%BE%8B">康威定律</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99">设计模式的六大原则</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#23%E7%A7%8D%E5%B8%B8%E8%A7%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F">23种常见设计模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">应用场景</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">单例模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F">责任链模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mvc">MVC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ioc">IOC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#aop">AOP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#uml">UML</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%80%9D%E6%83%B3">微服务思想</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%90%E7%BB%B4--%E7%BB%9F%E8%AE%A1--%E6%8A%80%E6%9C%AF%E6%94%AF%E6%8C%81">运维 &amp; 统计 &amp; 技术支持</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openstack">OpenStack</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#docker">Docker</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kvm">KVM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xen">Xen</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openvz">OpenVZ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tdd-%E7%90%86%E8%AE%BA">TDD 理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">单元测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95">压力测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%A8%E9%93%BE%E8%B7%AF%E5%8E%8B%E6%B5%8B">全链路压测</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ab-%E7%81%B0%E5%BA%A6%E8%93%9D%E7%BB%BF%E6%B5%8B%E8%AF%95">A/B 、灰度、蓝绿测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ansible">Ansible</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#puppet">puppet</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#chef">chef</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jenkins">Jenkins</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%8E%AF%E5%A2%83%E5%88%86%E7%A6%BB">环境分离</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E8%A7%84%E7%9B%91%E6%8E%A7">常规监控</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apm">APM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%9F%E8%AE%A1%E5%88%86%E6%9E%90">统计分析</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90cicd">持续集成(CI/CD)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4">自动化运维</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B5%8B%E8%AF%95">测试</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%99%9A%E6%8B%9F%E5%8C%96">虚拟化</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF">容器技术</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BA%91%E6%8A%80%E6%9C%AF">云技术</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#devops">DevOps</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86">文档管理</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%AD%E9%97%B4%E4%BB%B6">中间件</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%97%A5%E5%BF%97%E6%90%9C%E9%9B%86">日志搜集</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sharding-jdbc">Sharding Jdbc</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dubbo">Dubbo</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#thrift">Thrift</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#grpc">gRPC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E6%9C%BA%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6">单机定时调度</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6">分布式定时调度</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B6%88%E6%81%AF%E6%80%BB%E7%BA%BF">消息总线</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B6%88%E6%81%AF%E7%9A%84%E9%A1%BA%E5%BA%8F">消息的顺序</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rabbitmq">RabbitMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rocketmq">RocketMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#activemq">ActiveMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka">Kafka</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#redis-%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81">Redis 消息推送</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zeromq">ZeroMQ</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web%E7%BC%93%E5%AD%98">Web缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#memcached">Memcached</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#redis">Redis</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tair">Tair</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84">架构</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5">回收策略</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98">本地缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#nginx">Nginx</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#openresty">OpenResty</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#Tengine">Tengine</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#apache-httpd">Apache Httpd</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tomcat">Tomcat</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#jetty">Jetty</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86">架构原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B0%83%E4%BC%98%E6%96%B9%E6%A1%88">调优方案</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-server">Web Server</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BC%93%E5%AD%98">缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98">客户端缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%93%E5%AD%98">服务端缓存</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">消息队列</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%9A%E6%97%B6%E8%B0%83%E5%BA%A6">定时调度</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rpc">RPC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6">数据库中间件</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F">日志系统</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83">配置中心</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#api-%E7%BD%91%E5%85%B3">API 网关</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BD%91%E7%BB%9C">网络</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hessian">Hessian</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#protobuf">Protobuf</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#epoll">Epoll</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#java-nio">Java NIO</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kqueue">kqueue</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#osi-%E4%B8%83%E5%B1%82%E5%8D%8F%E8%AE%AE">OSI 七层协议</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcpip">TCP/IP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http">HTTP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#http20">HTTP2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#https">HTTPS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%8F%E8%AE%AE">协议</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B">网络模型</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9E%E6%8E%A5%E5%92%8C%E7%9F%AD%E8%BF%9E%E6%8E%A5">连接和短连接</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%A1%86%E6%9E%B6">框架</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9B%B6%E6%8B%B7%E8%B4%9Dzero-copy">零拷贝（Zero-copy）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%8F%E5%88%97%E5%8C%96%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8D%8F%E8%AE%AE">序列化(二进制协议)</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93">数据库</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mongodb">MongoDB</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hbase">Hbase</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8E%9F%E7%90%86">原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#innodb">InnoDB</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BC%98%E5%8C%96">优化</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%B4%A2%E5%BC%95">索引</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#explain">explain</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95-%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95">聚集索引, 非聚集索引</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%8D%E5%90%88%E7%B4%A2%E5%BC%95">复合索引</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95ahi">自适应哈希索引(AHI)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F">数据库设计的三大范式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA">基础理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mysql">MySQL</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#nosql">NoSQL</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E5%8E%9F%E7%90%86">搜索引擎原理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#lucene">Lucene</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#elasticsearch">Elasticsearch</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#solr">Solr</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sphinx">sphinx</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%80%A7%E8%83%BD">性能</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%E8%AE%BA">性能优化方法论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%B9%E9%87%8F%E8%AF%84%E4%BC%B0">容量评估</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cdn-%E7%BD%91%E7%BB%9C">CDN 网络</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BF%9E%E6%8E%A5%E6%B1%A0">连接池</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98">性能调优</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%A7%E6%95%B0%E6%8D%AE">大数据</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hdfs">HDFS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#mapreduce">MapReduce</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#yarn">Yarn</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#storm">Storm</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#flink">Flink</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#kafka-stream">Kafka Stream</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF-1">应用场景</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B5%81%E5%BC%8F%E8%AE%A1%E7%AE%97">流式计算</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hadoop">Hadoop</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spark">Spark</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%89%E5%85%A8">安全</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rbac">RBAC</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#oauth20">OAuth2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8F%8C%E5%9B%A0%E7%B4%A0%E8%AE%A4%E8%AF%812fa">双因素认证（2FA）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95sso">单点登录(SSO)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%86%85%E5%A4%96%E7%BD%91%E5%88%86%E7%A6%BB">内外网分离</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%99%BB%E5%BD%95%E8%B7%B3%E6%9D%BF%E6%9C%BA">登录跳板机</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD">数据备份</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">对称加密</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95">哈希算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86">非对称加密</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#xss">XSS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#csrf">CSRF</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#sql-%E6%B3%A8%E5%85%A5">SQL 注入</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#hash-dos">Hash Dos</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%84%9A%E6%9C%AC%E6%B3%A8%E5%85%A5">脚本注入</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7">漏洞扫描工具</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%AA%8C%E8%AF%81%E7%A0%81">验证码</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-%E5%AE%89%E5%85%A8">web 安全</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ddos-%E9%98%B2%E8%8C%83">DDoS 防范</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%94%A8%E6%88%B7%E9%9A%90%E7%A7%81%E4%BF%A1%E6%81%AF%E4%BF%9D%E6%8A%A4">用户隐私信息保护</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">序列化漏洞</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86">加密解密</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8">服务器安全</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8">数据安全</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BD%91%E7%BB%9C%E9%9A%94%E7%A6%BB">网络隔离</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8E%88%E6%9D%83%E8%AE%A4%E8%AF%81">授权、认证</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6">常用开源框架</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#spring-%E5%AE%B6%E6%97%8F">Spring 家族</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#log4jlog4j2">Log4j、Log4j2</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#logback">Logback</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE">开源协议</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6">日志框架</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#orm">ORM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6">网络框架</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#web-%E6%A1%86%E6%9E%B6">Web 框架</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7%E6%A1%86%E6%9E%B6">工具框架</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1">分布式设计</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80id">全局唯一ID</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#cap-%E4%B8%8E-base-%E7%90%86%E8%AE%BA">CAP 与 BASE 理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">分布式锁</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%AE%97%E6%B3%95">分布式一致性算法</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%82%E7%AD%89">幂等</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%96%B9%E6%A1%88">分布式一致方案</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F-leader-%E8%8A%82%E7%82%B9%E9%80%89%E4%B8%BE">分布式 Leader 节点选举</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#tcctryconfirmcancel-%E6%9F%94%E6%80%A7%E4%BA%8B%E5%8A%A1">TCC(Try/Confirm/Cancel) 柔性事务</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#paxos">PAXOS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#zab">Zab</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#raft">Raft</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#gossip">Gossip</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4">两阶段提交、多阶段提交</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0">服务注册与发现</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E8%B7%AF%E7%94%B1%E6%8E%A7%E5%88%B6">服务路由控制</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E6%A8%A1%E5%BC%8F">读写分离模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E7%89%87%E6%A8%A1%E5%BC%8F">分片模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%A1%AC%E4%BB%B6%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">硬件负载均衡</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%BD%AF%E4%BB%B6%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1">软件负载均衡</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%99%90%E6%B5%81">限流</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BA%94%E7%94%A8%E5%B1%82%E5%AE%B9%E7%81%BE">应用层容灾</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B7%A8%E6%9C%BA%E6%88%BF%E5%AE%B9%E7%81%BE">跨机房容灾</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%AE%B9%E7%81%BE%E6%BC%94%E7%BB%83%E6%B5%81%E7%A8%8B">容灾演练流程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B9%B3%E6%BB%91%E5%90%AF%E5%8A%A8">平滑启动</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%A9%E5%B1%95%E6%80%A7%E8%AE%BE%E8%AE%A1">扩展性设计</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%A8%B3%E5%AE%9A%E6%80%A7--%E9%AB%98%E5%8F%AF%E7%94%A8">稳定性 &amp; 高可用</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%89%A9%E5%B1%95">数据库扩展</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86">服务治理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4">分布式一致</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F">分布式文件系统</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%94%AF%E4%B8%80id-%E7%94%9F%E6%88%90">唯一ID 生成</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%80%E8%87%B4%E6%80%A7hash%E7%AE%97%E6%B3%95">一致性Hash算法</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3--%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F">设计思想 &amp; 开发模式</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#reactor">Reactor</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rxjava">RxJava</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vertx">Vert.x</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E8%81%8C%E8%B4%A3%E5%88%86%E7%A6%BBcqrs">命令查询职责分离(CQRS)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B4%AB%E8%A1%80%E5%85%85%E8%A1%80%E6%A8%A1%E5%9E%8B">贫血，充血模型</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#ddddomain-driven-design---%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1">DDD(Domain-driven Design - 领域驱动设计)</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#actor-%E6%A8%A1%E5%BC%8F">Actor 模式</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B">响应式编程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#dodaf20">DODAF2.0</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#serverless">Serverless</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#service-mesh">Service Mesh</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86">项目管理</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E8%AF%84%E5%AE%A1">架构评审</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%87%8D%E6%9E%84">重构</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83">代码规范</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81-review">代码 Review</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#rup">RUP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%9C%8B%E6%9D%BF%E7%AE%A1%E7%90%86">看板管理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#scrum">SCRUM</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91">敏捷开发</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%81%E9%99%90%E7%BC%96%E7%A8%8Bxp">极限编程（XP）</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B">结对编程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#pdca-%E5%BE%AA%E7%8E%AF%E8%B4%A8%E9%87%8F%E7%AE%A1%E7%90%86">PDCA 循环质量管理</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#fmea%E7%AE%A1%E7%90%86%E6%A8%A1%E5%BC%8F">FMEA管理模式</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%80%9A%E7%94%A8%E4%B8%9A%E5%8A%A1%E6%9C%AF%E8%AF%AD">通用业务术语</a></p>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF">技术趋势</a></p>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%94%BF%E7%AD%96%E6%B3%95%E8%A7%84">政策、法规</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%A5%E6%A0%BC%E9%81%B5%E5%AE%88%E5%88%91%E6%B3%95253%E6%B3%95%E6%9D%A1">严格遵守刑法253法条</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%B3%95%E5%BE%8B">法律</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E5%B8%88%E7%B4%A0%E8%B4%A8">架构师素质</a></p>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%A2%E9%98%9F%E7%AE%A1%E7%90%86">团队管理</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8B%9B%E8%81%98">招聘</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%B5%84%E8%AE%AF">资讯</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9C%A8%E7%BA%BF%E7%94%B5%E5%AD%90%E4%B9%A6">在线电子书</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BA%B8%E8%B4%A8%E4%B9%A6">纸质书</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E5%8F%91%E6%96%B9%E9%9D%A2">开发方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%9E%B6%E6%9E%84%E6%96%B9%E9%9D%A2">架构方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E6%96%B9%E9%9D%A2">技术管理方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9F%BA%E7%A1%80%E7%90%86%E8%AE%BA-1">基础理论</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7%E6%96%B9%E9%9D%A2">工具方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%96%B9%E9%9D%A2">大数据方面</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9B%A2%E9%98%9F%E5%8D%9A%E5%AE%A2">团队博客</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2">个人博客</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%A1%8C%E4%B8%9A%E8%B5%84%E8%AE%AF">行业资讯</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%AC%E4%BC%97%E5%8F%B7%E5%88%97%E8%A1%A8">公众号列表</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%8D%9A%E5%AE%A2">博客</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%BC%E5%90%88%E9%97%A8%E6%88%B7%E7%A4%BE%E5%8C%BA">综合门户、社区</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E9%97%AE%E7%AD%94%E8%AE%A8%E8%AE%BA%E7%B1%BB%E7%A4%BE%E5%8C%BA">问答、讨论类社区</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E8%A1%8C%E4%B8%9A%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90">行业数据分析</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%B8%93%E9%A1%B9%E7%BD%91%E7%AB%99">专项网站</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%85%B6%E4%BB%96%E7%B1%BB">其他类</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8E%A8%E8%8D%90%E5%8F%82%E8%80%83%E4%B9%A6">推荐参考书</a></li>
</ul>
</li>
<li>
<p><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%8A%80%E6%9C%AF%E8%B5%84%E6%BA%90">技术资源</a></p>
</li>
<li>
<ul>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#vps">VPS</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%BC%80%E6%BA%90%E8%B5%84%E6%BA%90">开源资源</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%8B%E5%86%8C%E6%96%87%E6%A1%A3%E6%95%99%E7%A8%8B">手册、文档、教程</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%9C%A8%E7%BA%BF%E8%AF%BE%E5%A0%82">在线课堂</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BC%9A%E8%AE%AE%E6%B4%BB%E5%8A%A8">会议、活动</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B8%B8%E7%94%A8app">常用APP</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%89%BE%E5%B7%A5%E4%BD%9C">找工作</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E5%B7%A5%E5%85%B7">工具</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1">代码托管</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1">文件服务</a></li>
<li><a href="https://github.com/xingshaocheng/architect-awesome/blob/master/README.md#%E7%BB%BC%E5%90%88%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%95%86">综合云服务商</a></li>
</ul>
</li>
</ul>
<p>（Toc generated by <a href="https://github.com/xingshaocheng/simple-php-github-toc">simple-php-github-toc</a> ）</p>
<h1 id=""></h1>
<h1 id="数据结构">数据结构</h1>
<h2 id="-2"></h2>
<h2 id="队列">队列</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/lemon-flm/p/7877898.html">《java队列——queue详细分析》</a></p>
</li>
<li>
<ul>
<li>非阻塞队列：ConcurrentLinkedQueue(无界线程安全)，采用CAS机制（compareAndSwapObject原子操作）。</li>
<li>阻塞队列：ArrayBlockingQueue(有界)、LinkedBlockingQueue（无界）、DelayQueue、PriorityBlockingQueue，采用锁机制；使用 ReentrantLock 锁。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/mantu/p/5802393.html">《LinkedList、ConcurrentLinkedQueue、LinkedBlockingQueue对比分析》</a></p>
</li>
</ul>
<h2 id="-3"></h2>
<h2 id="集合">集合</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_33642117/article/details/52040345">《Java Set集合的详解》</a></li>
</ul>
<h2 id="-4"></h2>
<h2 id="链表-数组">链表、数组</h2>
<ul>
<li><a href="https://blog.csdn.net/wz249863091/article/details/52853360">《Java集合详解--什么是List》</a></li>
</ul>
<h2 id="-5"></h2>
<h2 id="字典-关联数组">字典、关联数组</h2>
<ul>
<li><a href="https://baike.xsoftlab.net/view/250.html">《Java map 详解 - 用法、遍历、排序、常用API等》</a></li>
</ul>
<h2 id="-6"></h2>
<h2 id="栈">栈</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/javazejian/article/details/53362993">《java数据结构与算法之栈（Stack）设计与实现》</a></p>
</li>
<li>
<p><a href="http://www.runoob.com/java/java-stack-class.html">《Java Stack 类》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/f2006116/article/details/51375225">《java stack的详细实现分析》</a></p>
</li>
<li>
<ul>
<li>Stack 是线程安全的。</li>
<li>内部使用数组保存数据，不够时翻倍。</li>
</ul>
</li>
</ul>
<h2 id="-7"></h2>
<h2 id="树">树</h2>
<h3 id="二叉树">二叉树</h3>
<p>每个节点最多有两个叶子节点。</p>
<ul>
<li><a href="https://blog.csdn.net/cai2016/article/details/52589952">《二叉树》</a></li>
</ul>
<h3 id="完全二叉树">完全二叉树</h3>
<ul>
<li>
<p><a href="https://baike.baidu.com/item/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91/7773232?fr=aladdin">《完全二叉树》</a></p>
</li>
<li>
<ul>
<li>叶节点只能出现在最下层和次下层，并且最下面一层的结点都集中在该层最左边的若干位置的二叉树。</li>
</ul>
</li>
</ul>
<h3 id="平衡二叉树">平衡二叉树</h3>
<p>左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<ul>
<li><a href="http://www.cnblogs.com/polly333/p/4798944.html">《浅谈数据结构-平衡二叉树》</a></li>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-2-3-Search-Tree.html">《浅谈算法和数据结构: 八 平衡查找树之2-3树》</a></li>
</ul>
<h3 id="二叉查找树bst">二叉查找树（BST）</h3>
<p>二叉查找树（Binary Search Tree），也称有序二叉树（ordered binary tree）,排序二叉树（sorted binary tree）。</p>
<ul>
<li><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Binary-Search-Tree.html">《浅谈算法和数据结构: 七 二叉查找树》</a></li>
</ul>
<h3 id="红黑树">红黑树</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/sun_tttt/article/details/65445754">《最容易懂得红黑树》</a></p>
</li>
<li>
<ul>
<li>添加阶段后，左旋或者右旋从而再次达到平衡。</li>
</ul>
</li>
<li>
<p><a href="http://www.cnblogs.com/yangecnu/p/Introduce-Red-Black-Tree.html">《浅谈算法和数据结构: 九 平衡查找树之红黑树》</a></p>
</li>
</ul>
<h3 id="bbb树">B，B+，B*树</h3>
<p>MySQL是基于B+树聚集索引组织表</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/aqzwss/article/details/53074186">《B-树，B+树，B*树详解》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/bigtree_3721/article/details/73632405">《B-树，B+树与B*树的优缺点比较》</a></p>
</li>
<li>
<ul>
<li>B+树的叶子节点链表结构相比于 B-树便于扫库，和范围检索。</li>
</ul>
</li>
</ul>
<h3 id="lsm-树">LSM 树</h3>
<p>LSM（Log-Structured Merge-Trees）和 B+ 树相比，是牺牲了部分读的性能来换取写的性能(通过批量写入)，实现读写之间的平衡。  Hbase、LevelDB、Tair（Long DB）、nessDB 采用 LSM 树的结构。LSM可以快速建立索引。</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/dbanote/article/details/8897599">《LSM树 VS B+树》</a></p>
</li>
<li>
<ul>
<li>B+ 树读性能好，但由于需要有序结构，当key比较分散时，磁盘寻道频繁，造成写性能较差。</li>
<li>LSM  是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/u014774781/article/details/52105708">《LSM树（Log-Structured Merge Tree）存储引擎》</a></p>
</li>
<li>
<ul>
<li>极端的说，基于LSM树实现的HBase的写性能比MySQL高了一个数量级，读性能低了一个数量级。</li>
<li>优化方式：Bloom filter 替代二分查找；compact 小数位大树，提高查询性能。</li>
<li>Hbase 中，内存中达到一定阈值后，整体flush到磁盘上、形成一个文件（B+数），HDFS不支持update操作，所以Hbase做整体flush而不是merge update。flush到磁盘上的小树，定期会合并成一个大树。</li>
</ul>
</li>
</ul>
<h2 id="bitset">BitSet</h2>
<p>经常用于大规模数据的排重检查。</p>
<ul>
<li><a href="http://www.runoob.com/java/java-bitset-class.html">《Java Bitset类》</a></li>
<li><a href="https://blog.csdn.net/caiandyong/article/details/51581160">《Java BitSet（位集）》</a></li>
</ul>
<h1 id="常用算法">常用算法</h1>
<ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h2 id="排序-查找算法">排序、查找算法</h2>
<ul>
<li><a href="https://blog.csdn.net/gane_cheng/article/details/52652705">《常见排序算法及对应的时间复杂度和空间复杂度》</a></li>
</ul>
<h3 id="选择排序">选择排序</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/shen-hua/p/5424059.html">《Java中的经典算法之选择排序（SelectionSort）》</a></p>
</li>
<li>
<ul>
<li>每一趟从待排序的记录中选出最小的元素，顺序放在已排好序的序列最后，直到全部记录排序完毕。</li>
</ul>
</li>
</ul>
<h3 id="冒泡排序">冒泡排序</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/shuaizai88/article/details/73250615">《冒泡排序的2种写法》</a></p>
</li>
<li>
<ul>
<li>相邻元素前后交换、把最大的排到最后。</li>
<li>时间复杂度 O(n²)</li>
</ul>
</li>
</ul>
<h3 id="插入排序">插入排序</h3>
<ul>
<li><a href="https://www.cnblogs.com/hapjin/p/5517667.html">《排序算法总结之插入排序》</a></li>
</ul>
<h3 id="快速排序">快速排序</h3>
<ul>
<li>
<p><a href="http://developer.51cto.com/art/201403/430986.htm">《坐在马桶上看算法：快速排序》</a></p>
</li>
<li>
<ul>
<li>一侧比另外一侧都大或小。</li>
</ul>
</li>
</ul>
<h3 id="归并排序">归并排序</h3>
<ul>
<li>
<p><a href="http://www.cnblogs.com/chengxiao/p/6194356.html">《图解排序算法(四)之归并排序》</a></p>
</li>
<li>
<ul>
<li>分而治之，分成小份排序，在合并(重建一个新空间进行复制)。</li>
</ul>
</li>
</ul>
<h3 id="希尔排序">希尔排序</h3>
<h3 id="堆排序">堆排序</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/chengxiao/p/6129630.html">《图解排序算法(三)之堆排序》</a></p>
</li>
<li>
<ul>
<li>排序过程就是构建最大堆的过程，最大堆：每个结点的值都大于或等于其左右孩子结点的值，堆顶元素是最大值。</li>
</ul>
</li>
</ul>
<h3 id="计数排序">计数排序</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/suvllian/p/5495780.html">《计数排序和桶排序》</a></p>
</li>
<li>
<ul>
<li>和桶排序过程比较像，差别在于桶的数量。</li>
</ul>
</li>
</ul>
<h3 id="桶排序">桶排序</h3>
<ul>
<li>
<p><a href="http://blog.51cto.com/ahalei/1362789">《【啊哈！算法】最快最简单的排序——桶排序》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/sunjinshengli/article/details/70738527">《排序算法（三）：计数排序与桶排序》</a></p>
</li>
<li>
<ul>
<li>桶排序将[0,1)区间划分为n个相同的大小的子区间，这些子区间被称为桶。</li>
<li>每个桶单独进行排序，然后再遍历每个桶。</li>
</ul>
</li>
</ul>
<h3 id="基数排序">基数排序</h3>
<p>按照个位、十位、百位、...依次来排。</p>
<ul>
<li><a href="https://blog.csdn.net/lemon_tree12138/article/details/51695211">《排序算法系列：基数排序》</a></li>
<li><a href="https://www.cnblogs.com/skywang12345/p/3603669.html">《基数排序》</a></li>
</ul>
<h3 id="二分查找">二分查找</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/coderising/p/5708632.html">《二分查找(java实现)》</a></p>
</li>
<li>
<ul>
<li>要求待查找的序列有序。</li>
<li>时间复杂度 O(logN)。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/maoyuanming0806/article/details/78176957">《java实现二分查找-两种方式》</a></p>
</li>
<li>
<ul>
<li>while + 递归。</li>
</ul>
</li>
</ul>
<h3 id="java-中的排序工具">Java 中的排序工具</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/u011410529/article/details/56668545?locationnum=6&amp;fps=1">《Arrays.sort和Collections.sort实现原理解析》</a></p>
</li>
<li>
<ul>
<li>Collections.sort算法调用的是合并排序。</li>
<li>Arrays.sort() 采用了2种排序算法 -- 基本类型数据使用快速排序法，对象数组使用归并排序。</li>
</ul>
</li>
</ul>
<h2 id="布隆过滤器">布隆过滤器</h2>
<p>常用于大数据的排重，比如email，url 等。  核心原理：将每条数据通过计算产生一个指纹（一个字节或多个字节，但一定比原始数据要少很多），其中每一位都是通过随机计算获得，在将指纹映射到一个大的按位存储的空间中。注意：会有一定的错误率。 优点：空间和时间效率都很高。 缺点：随着存入的元素数量增加，误算率随之增加。</p>
<ul>
<li>
<p><a href="https://segmentfault.com/a/1190000002729689">《布隆过滤器 -- 空间效率很高的数据结构》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/zdxiq000/article/details/57626464">《大量数据去重：Bitmap和布隆过滤器(Bloom Filter)》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_30242609/article/details/71024458">《基于Redis的布隆过滤器的实现》</a></p>
</li>
<li>
<ul>
<li>基于 Redis 的 Bitmap 数据结构。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/lemon_tree12138/article/details/47973715">《网络爬虫：URL去重策略之布隆过滤器(BloomFilter)的使用》</a></p>
</li>
<li>
<ul>
<li>使用Java中的 BitSet 类 和 加权和hash算法。</li>
</ul>
</li>
</ul>
<h2 id="字符串比较">字符串比较</h2>
<h3 id="kmp-算法">KMP 算法</h3>
<p>KMP：Knuth-Morris-Pratt算法（简称KMP） 核心原理是利用一个“部分匹配表”，跳过已经匹配过的元素。</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html">《字符串匹配的KMP算法》</a></li>
</ul>
<h2 id="深度优先-广度优先">深度优先、广度优先</h2>
<ul>
<li><a href="https://www.cnblogs.com/0kk470/p/7555033.html">《广度优先搜索BFS和深度优先搜索DFS》</a></li>
</ul>
<h2 id="贪心算法">贪心算法</h2>
<ul>
<li><a href="https://www.cnblogs.com/MrSaver/p/8641971.html">《算法：贪婪算法基础》</a></li>
<li><a href="https://blog.csdn.net/a345017062/article/details/52443781">《常见算法及问题场景——贪心算法》</a></li>
</ul>
<h2 id="回溯算法">回溯算法</h2>
<ul>
<li><a href="https://blog.csdn.net/qfikh/article/details/51960331">《 五大常用算法之四：回溯法》</a></li>
</ul>
<h2 id="剪枝算法">剪枝算法</h2>
<ul>
<li><a href="https://blog.csdn.net/luningcsdn/article/details/50930276">《α-β剪枝算法》</a></li>
</ul>
<h2 id="动态规划">动态规划</h2>
<ul>
<li><a href="https://www.cnblogs.com/little-YTMM/p/5372680.html">《详解动态规划——邹博讲动态规划》</a></li>
<li><a href="https://blog.csdn.net/yao_zi_jie/article/details/54580283">《动态规划算法的个人理解》</a></li>
</ul>
<h2 id="朴素贝叶斯">朴素贝叶斯</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/amds123/article/details/70173402">《带你搞懂朴素贝叶斯分类算法》</a></p>
</li>
<li>
<ul>
<li>P(B|A)=P(A|B)P(B)/P(A)</li>
</ul>
</li>
<li>
<p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_one.html">《贝叶斯推断及其互联网应用1》</a></p>
</li>
<li>
<p><a href="http://www.ruanyifeng.com/blog/2011/08/bayesian_inference_part_two.html">《贝叶斯推断及其互联网应用2》</a></p>
</li>
</ul>
<h2 id="推荐算法">推荐算法</h2>
<ul>
<li><a href="http://www.infoq.com/cn/articles/recommendation-algorithm-overview-part01">《推荐算法综述》</a></li>
<li><a href="https://www.oschina.net/news/51297/top-10-open-source-recommendation-systems">《TOP 10 开源的推荐系统简介》</a></li>
</ul>
<h2 id="最小生成树算法">最小生成树算法</h2>
<ul>
<li><a href="https://blog.csdn.net/luoshixian099/article/details/51908175">《算法导论--最小生成树（Kruskal和Prim算法）》</a></li>
</ul>
<h2 id="最短路径算法">最短路径算法</h2>
<ul>
<li><a href="https://blog.csdn.net/qq_35644234/article/details/60870719">《Dijkstra算法详解》</a></li>
</ul>
<h1 id="并发">并发</h1>
<h2 id="java-并发">Java 并发</h2>
<ul>
<li><a href="https://github.com/CL0610/Java-concurrency">Java 并发知识合集</a></li>
<li><a href="https://github.com/CL0610/Java-concurrency/blob/master/Java%E5%B9%B6%E5%8F%91%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.png">JAVA并发知识图谱</a></li>
</ul>
<h2 id="多线程">多线程</h2>
<ul>
<li><a href="http://www.importnew.com/18459.html">《40个Java多线程问题总结》</a></li>
</ul>
<h2 id="线程安全">线程安全</h2>
<ul>
<li><a href="https://www.cnblogs.com/zhanht/p/5450325.html">《Java并发编程——线程安全及解决机制简介》</a></li>
</ul>
<h2 id="一致性-事务">一致性、事务</h2>
<h3 id="事务-acid-特性">事务 ACID 特性</h3>
<ul>
<li><a href="https://blog.csdn.net/u012440687/article/details/52116108">《数据库事务ACID特性》</a></li>
</ul>
<h3 id="事务的隔离级别">事务的隔离级别</h3>
<ul>
<li>
<p>未提交读：一个事务可以读取另一个未提交的数据，容易出现脏读的情况。</p>
</li>
<li>
<p>读提交：一个事务等另外一个事务提交之后才可以读取数据，但会出现不可重复读的情况（多次读取的数据不一致），读取过程中出现UPDATE操作，会多。（大多数数据库默认级别是RC，比如SQL Server，Oracle），读取的时候不可以修改。</p>
</li>
<li>
<p>可重复读： 同一个事务里确保每次读取的时候，获得的是同样的数据，但不保障原始数据被其他事务更新（幻读），Mysql InnoDB 就是这个级别。</p>
</li>
<li>
<p>序列化：所有事物串行处理（牺牲了效率）</p>
</li>
<li>
<p><a href="https://blog.csdn.net/qq_33290787/article/details/51924963">《理解事务的4种隔离级别》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/z-sm/p/7245981.html">数据库事务的四大特性及事务隔离级别</a></p>
</li>
<li>
<p><a href="http://blog.sina.com.cn/s/blog_499740cb0100ugs7.html">《MySQL的InnoDB的幻读问题 》</a></p>
</li>
<li>
<ul>
<li>幻读的例子非常清楚。</li>
<li>通过 SELECT ... FOR UPDATE 解决。</li>
</ul>
</li>
<li>
<p><a href="https://draveness.me/mysql-innodb">《一篇文章带你读懂MySQL和InnoDB》</a></p>
</li>
<li>
<ul>
<li>图解脏读、不可重复读、幻读问题。</li>
</ul>
</li>
</ul>
<h3 id="mvcc">MVCC</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html">《【mysql】关于innodb中MVCC的一些理解》</a></p>
</li>
<li>
<ul>
<li>innodb 中 MVCC 用在 Repeatable-Read 隔离级别。</li>
<li>MVCC 会产生幻读问题（更新时异常。）</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/whoamiyang/article/details/51901888">《轻松理解MYSQL MVCC 实现机制》</a></p>
</li>
<li>
<ul>
<li>通过隐藏版本列来实现 MVCC 控制，一列记录创建时间、一列记录删除时间，这里的时间</li>
<li>每次只操作比当前版本小（或等于）的 行。</li>
</ul>
</li>
</ul>
<h2 id="锁">锁</h2>
<h3 id="java中的锁和同步类">Java中的锁和同步类</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/qifengshi/p/6831055.html">《Java中的锁分类》</a></p>
</li>
<li>
<ul>
<li>主要包括 synchronized、ReentrantLock、和 ReadWriteLock。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/waterystone/p/4920797.html">《Java并发之AQS详解》</a></p>
</li>
<li>
<p><a href="http://cuisuqiang.iteye.com/blog/2020146">《Java中信号量 Semaphore》</a></p>
</li>
<li>
<ul>
<li>有数量控制</li>
<li>申请用 acquire，申请不要则阻塞；释放用 release。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/davidwang456/p/6094947.html">《java开发中的Mutex vs Semaphore》</a></p>
</li>
<li>
<ul>
<li>简单的说 就是Mutex是排它的，只有一个可以获取到资源， Semaphore也具有排它性，但可以定义多个可以获取的资源的对象。</li>
</ul>
</li>
</ul>
<h3 id="公平锁-非公平锁">公平锁 &amp; 非公平锁</h3>
<p>公平锁的作用就是严格按照线程启动的顺序来执行的，不允许其他线程插队执行的；而非公平锁是允许插队的。</p>
<ul>
<li>
<p><a href="https://blog.csdn.net/EthanWhite/article/details/55508357">《公平锁与非公平锁》</a></p>
</li>
<li>
<ul>
<li>默认情况下 ReentrantLock 和 synchronized 都是非公平锁。ReentrantLock 可以设置成公平锁。</li>
</ul>
</li>
</ul>
<h3 id="悲观锁">悲观锁</h3>
<p>悲观锁如果使用不当（锁的条数过多），会引起服务大面积等待。推荐优先使用乐观锁+重试。</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/zhiqian-ali/p/6200874.html">《【MySQL】悲观锁&amp;乐观锁》</a></p>
</li>
<li>
<ul>
<li>乐观锁的方式：版本号+重试方式</li>
<li>悲观锁：通过 select ... for update 进行行锁(不可读、不可写，share 锁可读不可写)。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/Lawson/p/5008741.html">《Mysql查询语句使用select.. for update导致的数据库死锁分析》</a></p>
</li>
<li>
<ul>
<li>mysql的innodb存储引擎实务锁虽然是锁行，但它内部是锁索引的。</li>
<li>锁相同数据的不同索引条件可能会引起死锁。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/zejin2008/p/5262751.html">《Mysql并发时经典常见的死锁原因及解决方法》</a></p>
</li>
</ul>
<h3 id="乐观锁-cas">乐观锁 &amp; CAS</h3>
<ul>
<li>
<p><a href="http://www.importnew.com/20472.html">《乐观锁的一种实现方式——CAS》</a></p>
</li>
<li>
<ul>
<li>和MySQL乐观锁方式相似，只不过是通过和原值进行比较。</li>
</ul>
</li>
</ul>
<h3 id="aba-问题">ABA 问题</h3>
<p>由于高并发，在CAS下，更新后可能此A非彼A。通过版本号可以解决，类似于上文Mysql 中提到的的乐观锁。</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/549294286/p/3766717.html">《Java CAS 和ABA问题》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/li954644351/article/details/50511879">《Java 中 ABA问题及避免》</a></p>
</li>
<li>
<ul>
<li>AtomicStampedReference 和 AtomicStampedReference。</li>
</ul>
</li>
</ul>
<h3 id="copyonwrite容器">CopyOnWrite容器</h3>
<p>可以对CopyOnWrite容器进行并发的读，而不需要加锁。CopyOnWrite并发容器用于读多写少的并发场景。比如白名单，黑名单，商品类目的访问和更新场景，不适合需要数据强一致性的场景。</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/hapjin/p/4840107.html">《JAVA中写时复制(Copy-On-Write)Map实现》</a></p>
</li>
<li>
<ul>
<li>实现读写分离，读取发生在原始数据上，写入发生在副本上。</li>
<li>不用加锁，通过最终一致实现一致性。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/a494303877/article/details/53404623">《聊聊并发-Java中的Copy-On-Write容器》</a></p>
</li>
</ul>
<h3 id="ringbuffer">RingBuffer</h3>
<ul>
<li><a href="http://www.cnblogs.com/l00l/p/4115001.html">《线程安全的无锁RingBuffer的实现【一个读线程，一个写线程】》</a></li>
</ul>
<h3 id="可重入锁-不可重入锁">可重入锁 &amp; 不可重入锁</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/dj3839/p/6580765.html">《可重入锁和不可重入锁》</a></p>
</li>
<li>
<ul>
<li>通过简单代码举例说明可重入锁和不可重入锁。</li>
<li>可重入锁指同一个线程可以再次获得之前已经获得的锁。</li>
<li>可重入锁可以用户避免死锁。</li>
<li>Java中的可重入锁：synchronized 和 java.util.concurrent.locks.ReentrantLock</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/baizhanshi/p/7211802.html">《ReenTrantLock可重入锁（和synchronized的区别）总结》</a></p>
</li>
<li>
<ul>
<li>synchronized 使用方便，编译器来加锁，是非公平锁。</li>
<li>ReenTrantLock 使用灵活，锁的公平性可以定制。</li>
<li>相同加锁场景下，推荐使用 synchronized。</li>
</ul>
</li>
</ul>
<h3 id="互斥锁-共享锁">互斥锁 &amp; 共享锁</h3>
<p>互斥锁：同时只能有一个线程获得锁。比如，ReentrantLock 是互斥锁，ReadWriteLock 中的写锁是互斥锁。  共享锁：可以有多个线程同时或的锁。比如，Semaphore、CountDownLatch 是共享锁，ReadWriteLock  中的读锁是共享锁。</p>
<ul>
<li><a href="https://www.cnblogs.com/liang1101/p/6475555.html">《ReadWriteLock场景应用》</a></li>
</ul>
<h3 id="死锁">死锁</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/yunfenglw/article/details/45950305">《“死锁”四个必要条件的合理解释》</a></p>
</li>
<li>
<ul>
<li>互斥、持有、不可剥夺、环形等待。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/u014039577/article/details/52351626">Java如何查看死锁？</a></p>
</li>
<li>
<ul>
<li>JConsole 可以识别死锁。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/bohu83/article/details/51135061">java多线程系列：死锁及检测</a></p>
</li>
<li>
<ul>
<li>jstack 可以显示死锁。</li>
</ul>
</li>
</ul>
<h1 id="操作系统">操作系统</h1>
<h2 id="计算机原理">计算机原理</h2>
<ul>
<li><a href="https://segmentfault.com/a/1190000003692840">《操作系统基础知识——操作系统的原理，类型和结构》</a></li>
</ul>
<h2 id="cpu">CPU</h2>
<h3 id="多级缓存">多级缓存</h3>
<p>典型的 CPU 有三级缓存，距离核心越近，速度越快，空间越小。L1 一般 32k，L2 一般 256k，L3 一般12M。内存速度需要200个 CPU 周期，CPU 缓存需要1个CPU周期。</p>
<ul>
<li><a href="https://blog.csdn.net/zero__007/article/details/54089730">《从Java视角理解CPU缓存和伪共享》</a></li>
</ul>
<h2 id="进程">进程</h2>
<h2 id="线程">线程</h2>
<ul>
<li><a href="https://blog.csdn.net/asdf_1024/article/details/78978437">《线程的生命周期及状态转换详解》</a></li>
</ul>
<h2 id="协程">协程</h2>
<ul>
<li>
<p><a href="https://www.thinksaas.cn/group/topic/839375/">《终结python协程----从yield到actor模型的实现》</a></p>
</li>
<li>
<ul>
<li>线程的调度是由操作系统负责，协程调度是程序自行负责</li>
<li>与线程相比，协程减少了无谓的操作系统切换.</li>
<li>实际上当遇到IO操作时做切换才更有意义，（因为IO操作不用占用CPU），如果没遇到IO操作，按照时间片切换.</li>
</ul>
</li>
</ul>
<h2 id="linux">Linux</h2>
<ul>
<li><a href="http://www.runoob.com/linux/linux-command-manual.html">《Linux 命令大全》</a></li>
</ul>
<h1 id="设计模式">设计模式</h1>
<h2 id="设计模式的六大原则">设计模式的六大原则</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/q291611265/article/details/48465113">《设计模式的六大原则》</a></p>
</li>
<li>
<ul>
<li>开闭原则：对扩展开放,对修改关闭，多使用抽象类和接口。</li>
<li>里氏替换原则：基类可以被子类替换，使用抽象类继承,不使用具体类继承。</li>
<li>依赖倒转原则：要依赖于抽象,不要依赖于具体，针对接口编程,不针对实现编程。</li>
<li>接口隔离原则：使用多个隔离的接口,比使用单个接口好，建立最小的接口。</li>
<li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用，通过中间类建立联系。</li>
<li>合成复用原则：尽量使用合成/聚合,而不是使用继承。</li>
</ul>
</li>
</ul>
<h2 id="23种常见设计模式">23种常见设计模式</h2>
<ul>
<li><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html">《设计模式》</a></li>
<li><a href="https://www.cnblogs.com/susanws/p/5510229.html">《23种设计模式全解析》</a></li>
<li><a href="https://github.com/ToryZhou/design-pattern">《设计模式类图与示例》</a></li>
</ul>
<h2 id="应用场景">应用场景</h2>
<ul>
<li>
<p><a href="http://blog.jobbole.com/62314/">《细数JDK里的设计模式》</a></p>
</li>
<li>
<ul>
<li>责任链模式：通过把请求从一个对象传递到链条中下一个对象的方式，直到请求被处理完毕，以实现对象间的解耦。如 javax.servlet.Filter#doFilter()。</li>
<li>命令模式：将操作封装到对象内，以便存储，传递和返回，如：java.lang.Runnable。</li>
<li>解释器模式：定义了一个语言的语法，然后解析相应语法的语句，如，java.text.Format，java.text.Normalizer。</li>
<li>迭代器模式：提供一个一致的方法来顺序访问集合中的对象，如 java.util.Iterator。</li>
<li>中介者模式：通过使用一个中间对象来进行消息分发以及减少类之间的直接依赖，java.lang.reflect.Method#invoke()。</li>
<li>空对象模式：如 java.util.Collections#emptyList()。</li>
<li>观察者模式：它使得一个对象可以灵活的将消息发送给感兴趣的对象，如 java.util.EventListener。</li>
<li>模板方法模式：让子类可以重写方法的一部分，而不是整个重写，如 java.util.Collections#sort()。</li>
<li>抽象工厂模式：抽象工厂模式提供了一个协议来生成一系列的相关或者独立的对象，而不用指定具体对象的类型，如 java.util.Calendar#getInstance()。</li>
<li>建造模式(Builder)：定义了一个新的类来构建另一个类的实例，以简化复杂对象的创建，如：java.lang.StringBuilder#append()。</li>
<li>工厂方法：就是 一个返* 回具体对象的方法，而不是多个，如 java.lang.Object#toString()、java.lang.Class#newInstance()。</li>
<li>原型模式：使得类的实例能够生成自身的拷贝、如：java.lang.Object#clone()。</li>
<li>单例模式：全局只有一个实例，如 java.lang.Runtime#getRuntime()。</li>
<li>适配器：用来把一个接口转化成另一个接口，如 java.util.Arrays#asList()。</li>
<li>桥接模式：这个模式将抽象和抽象操作的实现进行了解耦，这样使得抽象和实现可以独立地变化，如JDBC；</li>
<li>组合模式：使得客户端看来单个对象和对象的组合是同等的。换句话说，某个类型的方法同时也接受自身类型作为参数，如 Map.putAll，List.addAll、Set.addAll。</li>
<li>装饰者模式：动态的给一个对象附加额外的功能，这也是子类的一种替代方式，如 java.util.Collections#checkedList|Map|Set|SortedSet|SortedMap。</li>
<li>享元模式：使用缓存来加速大量小对象的访问时间，如 valueOf(int)。</li>
<li>代理模式：代理模式是用一个简单的对象来代替一个复杂的或者创建耗时的对象，如 java.lang.reflect.Proxy</li>
<li>结构型模式：</li>
<li>创建模式:</li>
<li>行为模式：</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/hwaggLee/p/4510687.html">《Spring-涉及到的设计模式汇总》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012387062/article/details/54719114">《Mybatis使用的设计模式》</a></p>
</li>
</ul>
<h2 id="单例模式">单例模式</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/YECrazy/article/details/79481964">《单例模式的三种实现 以及各自的优缺点》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/ttylinux/p/6498822.html">《单例模式－－反射－－防止序列化破坏单例模式》</a></p>
</li>
<li>
<ul>
<li>使用枚举类型。</li>
</ul>
</li>
</ul>
<h2 id="责任链模式">责任链模式</h2>
<h2 id="mvc">MVC</h2>
<ul>
<li>
<p><a href="http://www.runoob.com/design-pattern/mvc-pattern.html">《MVC 模式》</a></p>
</li>
<li>
<ul>
<li>模型(model)－视图(view)－控制器(controller)</li>
</ul>
</li>
</ul>
<h2 id="ioc">IOC</h2>
<ul>
<li>
<p><a href="https://www.zhihu.com/question/23277575">《理解 IOC》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/NancyStartOnce/p/6813162.html">《IOC 的理解与解释》</a></p>
</li>
<li>
<ul>
<li>正向控制：传统通过new的方式。反向控制，通过容器注入对象。</li>
<li>作用：用于模块解耦。</li>
<li>DI：Dependency Injection，即依赖注入，只关心资源使用，不关心资源来源。</li>
</ul>
</li>
</ul>
<h2 id="aop">AOP</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/yanquan345/article/details/19760027">《轻松理解AOP(面向切面编程)》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/hongwz/p/5764917.html">《Spring AOP详解》</a></p>
</li>
<li>
<p><a href="http://www.importnew.com/24305.html">《Spring AOP的实现原理》</a></p>
</li>
<li>
<ul>
<li>Spring AOP使用的动态代理，主要有两种方式：JDK动态代理和CGLIB动态代理。</li>
</ul>
</li>
<li>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-springaopcglib/">《Spring AOP 实现原理与 CGLIB 应用》</a></p>
</li>
<li>
<ul>
<li>Spring AOP 框架对 AOP 代理类的处理原则是：如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP  代理类；如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类</li>
</ul>
</li>
</ul>
<h2 id="uml">UML</h2>
<ul>
<li><a href="https://www.w3cschool.cn/uml_tutorial/">《UML教程》</a></li>
</ul>
<h2 id="微服务思想">微服务思想</h2>
<ul>
<li><a href="https://www.cnblogs.com/wintersun/p/6219259.html">《微服务架构设计》</a></li>
<li><a href="http://www.infoq.com/cn/articles/micro-service-technology-stack">《微服务架构技术栈选型手册》</a></li>
</ul>
<h3 id="康威定律">康威定律</h3>
<ul>
<li>
<p><a href="https://yq.aliyun.com/articles/8611">《微服务架构的理论基础 - 康威定律》</a></p>
</li>
<li>
<ul>
<li>定律一：组织沟通方式会通过系统设计表达出来，就是说架构的布局和组织结构会有相似。</li>
<li>定律二：时间再多一件事情也不可能做的完美，但总有时间做完一件事情。一口气吃不成胖子，先搞定能搞定的。</li>
<li>定律三：线型系统和线型组织架构间有潜在的异质同态特性。种瓜得瓜，做独立自治的子系统减少沟通成本。</li>
<li>定律四：大的系统组织总是比小系统更倾向于分解。合久必分，分而治之。</li>
</ul>
</li>
<li>
<p><a href="https://static.geekbang.org/PDF-%E4%BF%AE%E6%94%B9%E7%89%88-%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4-%E5%9B%BE%E7%89%87-%E6%9D%A8%E6%B3%A2-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84.pdf">《微服务架构核⼼20讲》</a></p>
</li>
</ul>
<h1 id="运维-统计-技术支持">运维 &amp; 统计 &amp; 技术支持</h1>
<h2 id="常规监控">常规监控</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/enweitech/article/details/77849205">《腾讯业务系统监控的修炼之路》</a></p>
</li>
<li>
<ul>
<li>监控的方式：主动、被动、旁路(比如舆情监控)</li>
<li>监控类型： 基础监控、服务端监控、客户端监控、 监控、用户端监控</li>
<li>监控的目标：全、块、准</li>
<li>核心指标：请求量、成功率、耗时</li>
</ul>
</li>
<li>
<p><a href="https://www.oschina.net/news/67525/monitoring-tools">《开源还是商用？十大云运维监控工具横评》</a></p>
</li>
<li>
<ul>
<li>Zabbix、Nagios、Ganglia、Zenoss、Open-falcon、监控宝、 360网站服务监控、阿里云监控、百度云观测、小蜜蜂网站监测等。</li>
</ul>
</li>
<li>
<p><a href="http://developer.51cto.com/art/201612/525373.htm">《监控报警系统搭建及二次开发经验》</a></p>
</li>
</ul>
<p>命令行监控工具</p>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/44-an-quan-yu-yun-wei/445-fu-wu-qi-zhuang-tai-jian-ce/4451-ming-ling-xing-gong-ju.html">《常用命令行监控工具》</a></p>
</li>
<li>
<ul>
<li>top、sar、tsar、nload</li>
</ul>
</li>
<li>
<p><a href="http://blog.jobbole.com/96846/">《20个命令行工具监控 Linux 系统性能》</a></p>
</li>
<li>
<p><a href="https://my.oschina.net/feichexia/blog/196575">《JVM性能调优监控工具jps、jstack、jmap、jhat、jstat、hprof使用详解》</a></p>
</li>
</ul>
<h2 id="apm">APM</h2>
<p>APM — Application Performance Management</p>
<ul>
<li>
<p><a href="http://bigbully.github.io/Dapper-translation/">《Dapper，大规模分布式系统的跟踪系统》</a></p>
</li>
<li>
<p><a href="http://opentracing.io/">CNCF OpenTracing</a>，<a href="https://github.com/opentracing-contrib/opentracing-specification-zh">中文版</a></p>
</li>
<li>
<p>主要开源软件，按字母排序</p>
</li>
<li>
<ul>
<li><a href="https://github.com/apache/incubator-skywalking">Apache SkyWalking</a></li>
<li><a href="https://github.com/dianping/cat">CAT</a></li>
<li><a href="https://github.com/jaegertracing/jaeger">CNCF jaeger</a></li>
<li><a href="https://github.com/naver/pinpoint">Pinpoint</a></li>
<li><a href="https://github.com/openzipkin/zipkin">Zipkin</a></li>
</ul>
</li>
<li>
<p><a href="http://www.infoq.com/cn/articles/apm-Pinpoint-practice">《开源APM技术选型与实战》</a></p>
</li>
<li>
<ul>
<li>主要基于 Google的Dapper（大规模分布式系统的跟踪系统） 思想。</li>
</ul>
</li>
</ul>
<h2 id="统计分析">统计分析</h2>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/25195217">《流量统计的基础：埋点》</a></p>
</li>
<li>
<ul>
<li>常用指标：访问与访客、停留时长、跳出率、退出率、转化率、参与度</li>
</ul>
</li>
<li>
<p><a href="http://www.25xt.com/company/17066.html">《APP埋点常用的统计工具、埋点目标和埋点内容》</a></p>
</li>
<li>
<ul>
<li>第三方统计：友盟、百度移动、魔方、App Annie、talking data、神策数据等。</li>
</ul>
</li>
<li>
<p><a href="https://tech.meituan.com/mt_mobile_analytics_practice.html">《美团点评前端无痕埋点实践》</a></p>
</li>
<li>
<ul>
<li>所谓无痕、即通过可视化工具配置采集节点，在前端自动解析配置并上报埋点数据，而非硬编码。</li>
</ul>
</li>
</ul>
<h2 id="持续集成cicd">持续集成(CI/CD)</h2>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/09/continuous-integration.html">《持续集成是什么？》</a></li>
<li><a href="https://www.testwo.com/article/1170">《8个流行的持续集成工具》</a></li>
</ul>
<h3 id="jenkins">Jenkins</h3>
<ul>
<li><a href="https://www.liaoxuefeng.com/article/001463233913442cdb2d1bd1b1b42e3b0b29eb1ba736c5e000">《使用Jenkins进行持续集成》</a></li>
</ul>
<h3 id="环境分离">环境分离</h3>
<p>开发、测试、生成环境分离。</p>
<ul>
<li><a href="https://my.oschina.net/sancuo/blog/214904">《开发环境、生产环境、测试环境的基本理解和区》</a></li>
</ul>
<h2 id="自动化运维">自动化运维</h2>
<h3 id="ansible">Ansible</h3>
<ul>
<li><a href="http://www.ansible.com.cn/">《Ansible中文权威指南》</a></li>
<li><a href="https://www.cnblogs.com/heiye123/articles/7855890.html">《Ansible基础配置和企业级项目实用案例》</a></li>
</ul>
<h3 id="puppet">puppet</h3>
<ul>
<li><a href="https://www.cnblogs.com/keerya/p/8040071.html">《自动化运维工具——puppet详解》</a></li>
</ul>
<h3 id="chef">chef</h3>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/cloud/library/1407_caomd_chef/">《Chef 的安装与使用》</a></li>
</ul>
<h2 id="测试">测试</h2>
<h3 id="tdd-理论">TDD 理论</h3>
<ul>
<li>
<p><a href="https://www.jianshu.com/p/62f16cd4fef3">《深度解读 - TDD（测试驱动开发）》</a></p>
</li>
<li>
<ul>
<li>基于测试用例编码功能代码，XP（Extreme Programming）的核心实践.</li>
<li>好处：一次关注一个点，降低思维负担；迎接需求变化或改善代码的设计；提前澄清需求；快速反馈；</li>
</ul>
</li>
</ul>
<h3 id="单元测试">单元测试</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/happyzm/p/6482886.html">《Java单元测试之JUnit篇》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/hotdust/article/details/53406086">《JUnit 4 与 TestNG 对比》</a></p>
</li>
<li>
<ul>
<li>TestNG 覆盖 JUnit 功能，适用于更复杂的场景。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/wqetfg/article/details/50900512">《单元测试主要的测试功能点》</a></p>
</li>
<li>
<ul>
<li>模块接口测试、局部数据结构测试、路径测试 、错误处理测试、边界条件测试 。</li>
</ul>
</li>
</ul>
<h3 id="压力测试">压力测试</h3>
<ul>
<li><a href="https://blog.csdn.net/blueheart20/article/details/52170790">《Apache ab 测试使用指南》</a></li>
<li><a href="https://www.cnblogs.com/binyue/p/6141088.html">《大型网站压力测试及优化方案》</a></li>
<li><a href="http://news.chinabyte.com/466/14126966.shtml">《10大主流压力/负载/性能测试工具推荐》</a></li>
<li><a href="http://quentinxxz.iteye.com/blog/2249799">《真实流量压测工具 tcpcopy应用浅析》</a></li>
<li><a href="https://www.cnblogs.com/jwentest/p/7136727.html">《nGrinder 简易使用教程》</a></li>
</ul>
<h3 id="全链路压测">全链路压测</h3>
<ul>
<li><a href="http://www.infoq.com/cn/articles/jd-618-upgrade-full-link-voltage-test-program-forcebot">《京东618：升级全链路压测方案，打造军演机器人ForceBot》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/30306892">《饿了么全链路压测的探索与实践》</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/28355759">《四大语言，八大框架｜滴滴全链路压测解决之道》</a></li>
<li><a href="https://www.jianshu.com/p/27060fd61f72">《全链路压测经验》</a></li>
</ul>
<h3 id="ab-灰度-蓝绿测试">A/B 、灰度、蓝绿测试</h3>
<ul>
<li><a href="https://testerhome.com/topics/11165">《技术干货 | AB 测试和灰度发布探索及实践》</a></li>
<li><a href="http://blog.51cto.com/purplegrape/1403123">《nginx 根据IP 进行灰度发布》</a></li>
<li><a href="https://www.v2ex.com/t/344341">《蓝绿部署、A/B 测试以及灰度发布》</a></li>
</ul>
<h2 id="虚拟化">虚拟化</h2>
<ul>
<li><a href="https://blog.csdn.net/enweitech/article/details/52910082">《VPS的三种虚拟技术OpenVZ、Xen、KVM优缺点比较》</a></li>
</ul>
<h3 id="kvm">KVM</h3>
<ul>
<li><a href="http://blog.chinaunix.net/uid-20201831-id-5775661.html">《KVM详解，太详细太深入了，经典》</a></li>
<li><a href="https://www.coderxing.com/kvm-install.html">《【图文】KVM 虚拟机安装详解》</a></li>
</ul>
<h3 id="xen">Xen</h3>
<ul>
<li><a href="https://www.cnblogs.com/sddai/p/5931201.html">《Xen虚拟化基本原理详解》</a></li>
</ul>
<h3 id="openvz">OpenVZ</h3>
<ul>
<li><a href="https://blog.csdn.net/longerzone/article/details/44829255">《开源Linux容器 OpenVZ 快速上手指南》</a></li>
</ul>
<h2 id="容器技术">容器技术</h2>
<h3 id="docker">Docker</h3>
<ul>
<li><a href="https://www.cnblogs.com/SzeCheng/p/6822905.html">《几张图帮你理解 docker 基本原理及快速入门》</a></li>
<li><a href="https://draveness.me/docker">《Docker 核心技术与实现原理》</a></li>
<li><a href="http://www.runoob.com/docker/docker-tutorial.html">《Docker 教程》</a></li>
</ul>
<h2 id="云技术">云技术</h2>
<h3 id="openstack">OpenStack</h3>
<ul>
<li><a href="https://www.cnblogs.com/klb561/p/8660264.html">《OpenStack构架知识梳理》</a></li>
</ul>
<h2 id="devops">DevOps</h2>
<ul>
<li><a href="https://www.cnblogs.com/jetzhang/p/6068773.html">《一分钟告诉你究竟DevOps是什么鬼？》</a></li>
<li><a href="http://www.infoq.com/cn/articles/detail-analysis-of-devops">《DevOps详解》</a></li>
</ul>
<h2 id="文档管理">文档管理</h2>
<ul>
<li><a href="http://www.confluence.cn/">Confluence-收费文档管理系统</a></li>
<li>GitLab?</li>
<li>Wiki</li>
</ul>
<h1 id="中间件">中间件</h1>
<h2 id="web-server">Web Server</h2>
<h3 id="nginx">Nginx</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/qq_25797077/article/details/52200722">《Ngnix的基本学习-多进程和Apache的比较》</a></p>
</li>
<li>
<ul>
<li>Nginx 通过异步非阻塞的事件处理机制实现高并发。Apache 每个请求独占一个线程，非常消耗系统资源。</li>
<li>事件驱动适合于IO密集型服务(Nginx)，多进程或线程适合于CPU密集型服务(Apache)，所以Nginx适合做反向代理，而非web服务器使用。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/cunkouzh/p/5410154.html">《nginx与Apache的对比以及优缺点》</a></p>
</li>
<li>
<ul>
<li>nginx只适合静态和反向代理，不适合处理动态请求。</li>
</ul>
</li>
</ul>
<h3 id="openresty">OpenResty</h3>
<ul>
<li>
<p><a href="http://openresty.org/cn/">官方网站</a></p>
</li>
<li>
<p><a href="http://www.linkedkeeper.com/detail/blog.action?bid=1034">《浅谈 OpenResty》</a></p>
</li>
<li>
<ul>
<li>通过 Lua 模块可以在Nginx上进行开发。</li>
</ul>
</li>
<li>
<p><a href="https://openresty.org/download/agentzh-nginx-tutorials-zhcn.html">agentzh 的 Nginx 教程</a></p>
</li>
</ul>
<h3 id="tengine">Tengine</h3>
<ul>
<li><a href="http://tengine.taobao.org/">官方网站</a></li>
</ul>
<h3 id="apache-httpd">Apache Httpd</h3>
<ul>
<li><a href="http://httpd.apache.org/">官方网站</a></li>
</ul>
<h3 id="tomcat">Tomcat</h3>
<h4 id="架构原理">架构原理</h4>
<ul>
<li>
<p><a href="https://www.cnblogs.com/hggen/p/6264475.html">《TOMCAT原理详解及请求过程》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/crazylqy/p/4706223.html">《Tomcat服务器原理详解》</a></p>
</li>
<li>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/">《Tomcat 系统架构与设计模式,第 1 部分: 工作原理》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/xlgen157387/article/details/79006434">《四张图带你了解Tomcat系统架构》</a></p>
</li>
<li>
<p><a href="https://www.futurehosting.com/blog/jboss-vs-tomcat-choosing-a-java-application-server/">《JBoss vs. Tomcat: Choosing A Java Application Server》</a></p>
</li>
<li>
<ul>
<li>Tomcat 是轻量级的 Serverlet 容器，没有实现全部 JEE 特性（比如持久化和事务处理），但可以通过其他组件代替，比如Spring。</li>
<li>Jboss 实现全部了JEE特性，软件开源免费、文档收费。</li>
</ul>
</li>
</ul>
<h4 id="调优方案">调优方案</h4>
<ul>
<li>
<p><a href="https://www.cnblogs.com/sunfenqing/p/7339058.html">《Tomcat 调优方案》</a></p>
</li>
<li>
<ul>
<li>启动NIO模式（或者APR）；调整线程池；禁用AJP连接器（Nginx+tomcat的架构，不需要AJP）；</li>
</ul>
</li>
<li>
<p><a href="http://blog.chinaunix.net/uid-20662363-id-3012760.html">《tomcat http协议与ajp协议》</a></p>
</li>
<li>
<p><a href="http://dmouse.iteye.com/blog/1354527">《AJP与HTTP比较和分析》</a></p>
</li>
<li>
<ul>
<li>AJP 协议（8009端口）用于降低和前端Server（如Apache，而且需要支持AJP协议）的连接数(前端)，通过长连接提高性能。</li>
<li>并发高时，AJP协议优于HTTP协议。</li>
</ul>
</li>
</ul>
<h3 id="jetty">Jetty</h3>
<ul>
<li>
<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jetty/">《Jetty 的工作原理以及与 Tomcat 的比较》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/doutao6677/article/details/51957288">《jetty和tomcat优势比较》</a></p>
</li>
<li>
<ul>
<li>架构比较:Jetty的架构比Tomcat的更为简单。</li>
<li>性能比较：Jetty和Tomcat性能方面差异不大，Jetty默认采用NIO结束在处理I/O请求上更占优势，Tomcat默认采用BIO处理I/O请求，Tomcat适合处理少数非常繁忙的链接，处理静态资源时性能较差。</li>
<li>其他方面：Jetty的应用更加快速，修改简单，对新的Servlet规范的支持较好;Tomcat 对JEE和Servlet 支持更加全面。</li>
</ul>
</li>
</ul>
<h2 id="缓存">缓存</h2>
<ul>
<li><a href="https://blog.csdn.net/clementad/article/details/48229243">《缓存失效策略（FIFO 、LRU、LFU三种算法的区别）》</a></li>
</ul>
<h3 id="本地缓存">本地缓存</h3>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4211.html">《HashMap本地缓存》</a></p>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4212-ehcache.html">《EhCache本地缓存》</a></p>
</li>
<li>
<ul>
<li>堆内、堆外、磁盘三级缓存。</li>
<li>可按照缓存空间容量进行设置。</li>
<li>按照时间、次数等过期策略。</li>
</ul>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/421-ying-yong-ceng-ben-di-huan-cun/4213-guava-cache.html">《Guava Cache》</a></p>
</li>
<li>
<ul>
<li>简单轻量、无堆外、磁盘缓存。</li>
</ul>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/nginx-ben-di-huan-cun.html">《Nginx本地缓存》</a></p>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/422-fu-wu-duan-ben-di-huan-cun/4222-pagespeed.html">《Pagespeed—懒人工具，服务器端加速》</a></p>
</li>
</ul>
<h2 id="客户端缓存">客户端缓存</h2>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-er-pian-ff1a-feng-kuang-yuan-shi-ren/42-xing-neng-zhi-ben-di-huan-cun/423-ke-hu-duan-huan-cun.html">《浏览器端缓存》</a></p>
</li>
<li>
<ul>
<li>主要是利用 Cache-Control 参数。</li>
</ul>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/qHm_dJBhVbv0pJs8Crp77w">《H5 和移动端 WebView 缓存机制解析与实战》</a></p>
</li>
</ul>
<h2 id="服务端缓存">服务端缓存</h2>
<h3 id="web缓存">Web缓存</h3>
<ul>
<li><a href="https://github.com/jiangwenyuan/nuster">nuster</a> - nuster cache</li>
<li><a href="https://github.com/varnishcache/varnish-cache">varnish</a> - varnish cache</li>
<li><a href="https://github.com/squid-cache/squid">squid</a> - squid cache</li>
</ul>
<h3 id="memcached">Memcached</h3>
<ul>
<li>
<p><a href="http://www.runoob.com/Memcached/Memcached-tutorial.html">《Memcached 教程》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/chenleixing/article/details/47035453">《深入理解Memcached原理》</a></p>
</li>
<li>
<ul>
<li>采用多路复用技术提高并发性。</li>
<li>slab分配算法： memcached给Slab分配内存空间，默认是1MB。分配给Slab之后  把slab的切分成大小相同的chunk，Chunk是用于缓存记录的内存空间，Chunk  的大小默认按照1.25倍的速度递增。好处是不会频繁申请内存，提高IO效率，坏处是会有一定的内存浪费。</li>
</ul>
</li>
<li>
<p><a href="https://www.jianshu.com/p/36e5cd400580">《Memcached软件工作原理》</a></p>
</li>
<li>
<p><a href="http://zhihuzeye.com/archives/2361">《Memcache技术分享：介绍、使用、存储、算法、优化、命中率》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/liu251890347/article/details/37690045">《memcache 中 add 、 set 、replace 的区别》</a></p>
</li>
<li>
<ul>
<li>区别在于当key存在还是不存在时，返回值是true和false的。</li>
</ul>
</li>
<li>
<p>[《memcached全面剖析》](https://pan.baidu.com/s/1qX00Lti?errno=0&amp;errmsg=Auth Login Sucess&amp;&amp;bduss=&amp;ssnerror=0&amp;traceid=)</p>
</li>
</ul>
<h3 id="redis">Redis</h3>
<ul>
<li>
<p><a href="http://www.runoob.com/redis/redis-tutorial.html">《Redis 教程》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/wcf373722432/article/details/78678504">《redis底层原理》</a></p>
</li>
<li>
<ul>
<li>使用 ziplist 存储链表，ziplist是一种压缩链表，它的好处是更能节省内存空间，因为它所存储的内容都是在连续的内存区域当中的。</li>
<li>使用 skiplist(跳跃表)来存储有序集合对象、查找上先从高Level查起、时间复杂度和红黑树相当，实现容易，无锁、并发性好。</li>
</ul>
</li>
<li>
<p><a href="http://doc.redisfans.com/topic/persistence.html">《Redis持久化方式》</a></p>
</li>
<li>
<ul>
<li>RDB方式：定期备份快照，常用于灾难恢复。优点：通过fork出的进程进行备份，不影响主进程、RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。缺点：会丢数据。</li>
<li>AOF方式：保存操作日志方式。优点：恢复时数据丢失少，缺点：文件大，回复慢。</li>
<li>也可以两者结合使用。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/chunlongyu/article/details/53346436">《分布式缓存--序列3--原子操作与CAS乐观锁》</a></p>
</li>
</ul>
<h4 id="架构">架构</h4>
<ul>
<li><a href="https://blog.csdn.net/sunhuiliang85/article/details/73656830">《Redis单线程架构》</a></li>
</ul>
<h4 id="回收策略">回收策略</h4>
<ul>
<li><a href="https://blog.csdn.net/qq_29108585/article/details/63251491">《redis的回收策略》</a></li>
</ul>
<h3 id="tair">Tair</h3>
<ul>
<li><a href="https://github.com/alibaba/tair">官方网站</a></li>
<li><a href="http://blog.csdn.net/farphone/article/details/53522383">《Tair和Redis的对比》</a></li>
<li>特点：可以配置备份节点数目，通过异步同步到备份节点</li>
<li>一致性Hash算法。</li>
<li>架构：和Hadoop 的设计思想类似，有Configserver，DataServer，Configserver 通过心跳来检测，Configserver也有主备关系。</li>
</ul>
<p>几种存储引擎:</p>
<ul>
<li>MDB，完全内存性，可以用来存储Session等数据。</li>
<li>Rdb（类似于Redis），轻量化，去除了aof之类的操作，支持Restfull操作</li>
<li>LDB（LevelDB存储引擎），持久化存储，LDB 作为rdb的持久化，google实现，比较高效，理论基础是LSM(Log-Structured-Merge  Tree)算法，现在内存中修改数据，达到一定量时（和内存汇总的旧数据一同写入磁盘）再写入磁盘，存储更加高效，县比喻Hash算法。</li>
<li>Tair采用共享内存来存储数据，如果服务挂掉（非服务器），重启服务之后，数据亦然还在。</li>
</ul>
<h2 id="消息队列">消息队列</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/charlesblc/p/6045238.html">《消息队列-推/拉模式学习 &amp; ActiveMQ及JMS学习》</a></p>
</li>
<li>
<ul>
<li>RabbitMQ 消费者默认是推模式（也支持拉模式）。</li>
<li>Kafka 默认是拉模式。</li>
<li>Push方式：优点是可以尽可能快地将消息发送给消费者，缺点是如果消费者处理能力跟不上，消费者的缓冲区可能会溢出。</li>
<li>Pull方式：优点是消费端可以按处理能力进行拉去，缺点是会增加消息延迟。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/yunfeng482/article/details/72856762">《Kafka、RabbitMQ、RocketMQ等消息中间件的对比 —— 消息发送性能和区别》</a></p>
</li>
</ul>
<h3 id="消息总线">消息总线</h3>
<p>消息总线相当于在消息队列之上做了一层封装，统一入口，统一管控、简化接入成本。</p>
<ul>
<li><a href="https://blog.csdn.net/yanghua_kobe/article/details/43877281">《消息总线VS消息队列》</a></li>
</ul>
<h3 id="消息的顺序">消息的顺序</h3>
<ul>
<li><a href="https://www.cnblogs.com/cjsblog/p/8267892.html">《如何保证消费者接收消息的顺序》</a></li>
</ul>
<h3 id="rabbitmq">RabbitMQ</h3>
<p>支持事务，推拉模式都是支持、适合需要可靠性消息传输的场景。</p>
<ul>
<li><a href="https://blog.csdn.net/whoamiyang/article/details/54954780">《RabbitMQ的应用场景以及基本原理介绍》</a></li>
<li><a href="https://www.jianshu.com/p/79ca08116d57">《消息队列之 RabbitMQ》</a></li>
<li><a href="https://blog.csdn.net/u013256816/article/details/55515234">《RabbitMQ之消息确认机制（事务+Confirm）》</a></li>
</ul>
<h3 id="rocketmq">RocketMQ</h3>
<p>Java实现，推拉模式都是支持，吞吐量逊于Kafka。可以保证消息顺序。</p>
<ul>
<li><a href="https://www.jianshu.com/p/824066d70da8">《RocketMQ 实战之快速入门》</a></li>
<li><a href="http://www.iocoder.cn/categories/RocketMQ/?vip&amp;architect-awesome">《RocketMQ 源码解析》</a></li>
</ul>
<h3 id="activemq">ActiveMQ</h3>
<p>纯Java实现，兼容JMS，可以内嵌于Java应用中。</p>
<ul>
<li><a href="https://www.cnblogs.com/wintersun/p/3962302.html">《ActiveMQ消息队列介绍》</a></li>
</ul>
<h3 id="kafka">Kafka</h3>
<p>高吞吐量、采用拉模式。适合高IO场景，比如日志同步。</p>
<ul>
<li><a href="http://kafka.apache.org/">官方网站</a></li>
<li><a href="https://blog.csdn.net/allthesametome/article/details/47362451">《各消息队列对比，Kafka深度解析，众人推荐，精彩好文！》</a></li>
<li><a href="http://lxw1234.com/archives/2015/10/538.htm">《Kafka分区机制介绍与示例》</a></li>
</ul>
<h3 id="redis-消息推送">Redis 消息推送</h3>
<p>生产者、消费者模式完全是客户端行为，list 和 拉模式实现，阻塞等待采用 blpop 指令。</p>
<ul>
<li><a href="https://blog.csdn.net/qq_34212276/article/details/78455004">《Redis学习笔记之十：Redis用作消息队列》</a></li>
</ul>
<h3 id="zeromq">ZeroMQ</h3>
<h2 id="定时调度">定时调度</h2>
<h3 id="单机定时调度">单机定时调度</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/shuaiqing/p/7742382.html">《linux定时任务cron配置》</a></p>
</li>
<li>
<p><a href="https://my.oschina.net/daquan/blog/483305">《Linux cron运行原理》</a></p>
</li>
<li>
<ul>
<li>fork 进程 + sleep 轮询</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/drift-ice/p/3817269.html">《Quartz使用总结》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/wenniuwuren/article/details/42082981/">《Quartz源码解析 ---- 触发器按时启动原理》</a></p>
</li>
<li>
<p><a href="https://www.jianshu.com/p/bab8e4e32952">《quartz原理揭秘和源码解读》</a></p>
</li>
<li>
<ul>
<li>定时调度在 QuartzSchedulerThread 代码中，while()无限循环，每次循环取出时间将到的trigger，触发对应的job，直到调度器线程被关闭。</li>
</ul>
</li>
</ul>
<h3 id="分布式定时调度">分布式定时调度</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/qq_16216221/article/details/70314337">《这些优秀的国产分布式任务调度系统，你用过几个？》</a></p>
</li>
<li>
<ul>
<li>opencron、LTS、XXL-JOB、Elastic-Job、Uncode-Schedule、Antares</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/zhenyuyaodidiao/p/4755649.html">《Quartz任务调度的基本实现原理》</a></p>
</li>
<li>
<ul>
<li>Quartz集群中，独立的Quartz节点并不与另一其的节点或是管理节点通信，而是通过相同的数据库表来感知到另一Quartz应用的</li>
</ul>
</li>
<li>
<p><a href="http://www.iocoder.cn/categories/Elastic-Job-Lite/?vip&amp;architect-awesome">《Elastic-Job-Lite 源码解析》</a></p>
</li>
<li>
<p><a href="http://www.iocoder.cn/categories/Elastic-Job-Cloud/?vip&amp;architect-awesome">《Elastic-Job-Cloud 源码解析》</a></p>
</li>
</ul>
<h2 id="rpc">RPC</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/top_code/article/details/54615853">《从零开始实现RPC框架 - RPC原理及实现》</a></p>
</li>
<li>
<ul>
<li>核心角色：Server: 暴露服务的服务提供方、Client: 调用远程服务的服务消费方、Registry: 服务注册与发现的注册中心。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/testcs_dn/article/details/78050590">《分布式RPC框架性能大比拼 dubbo、motan、rpcx、gRPC、thrift的性能比较》</a></p>
</li>
</ul>
<h3 id="dubbo">Dubbo</h3>
<ul>
<li><a href="http://dubbo.apache.org/">官方网站</a></li>
<li><a href="https://www.cnblogs.com/steven520213/p/7606598.html">dubbo实现原理简单介绍</a></li>
</ul>
<p>** SPI **</p>
<h3 id="thrift">Thrift</h3>
<ul>
<li>
<p><a href="http://thrift.apache.org/">官方网站</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/kesonyk/article/details/50924489">《Thrift RPC详解》</a></p>
</li>
<li>
<ul>
<li>支持多语言，通过中间语言定义接口。</li>
</ul>
</li>
</ul>
<h3 id="grpc">gRPC</h3>
<p>服务端可以认证加密，在外网环境下，可以保证数据安全。</p>
<ul>
<li><a href="https://grpc.io/">官方网站</a></li>
<li><a href="https://www.cnblogs.com/LBSer/p/4853234.html">《你应该知道的RPC原理》</a></li>
</ul>
<h2 id="数据库中间件">数据库中间件</h2>
<h3 id="sharding-jdbc">Sharding Jdbc</h3>
<ul>
<li><a href="http://shardingjdbc.io/">官网</a></li>
<li><a href="http://www.iocoder.cn/categories/Sharding-JDBC/?vip&amp;architect-awesome">源码解析</a></li>
</ul>
<h2 id="日志系统">日志系统</h2>
<h3 id="日志搜集">日志搜集</h3>
<ul>
<li><a href="http://cjting.me/misc/build-log-system-with-elkb/">《从零开始搭建一个ELKB日志收集系统》</a></li>
<li><a href="https://blog.csdn.net/lzw_2006/article/details/51280058">《用ELK搭建简单的日志收集分析系统》</a></li>
<li><a href="https://www.cnblogs.com/beginmind/p/6058194.html">《日志收集系统-探究》</a></li>
</ul>
<h2 id="配置中心">配置中心</h2>
<ul>
<li>
<p><a href="https://github.com/ctripcorp/apollo">Apollo - 携程开源的配置中心应用</a></p>
</li>
<li>
<ul>
<li>Spring Boot 和 Spring Cloud</li>
<li>支持推、拉模式更新配置</li>
<li>支持多种语言</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/u011320740/article/details/78742625">《基于zookeeper实现统一配置管理》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/shamo89/p/8016908.html">《 Spring Cloud Config 分布式配置中心使用教程》</a></p>
</li>
</ul>
<p>servlet 3.0 异步特性可用于配置中心的客户端</p>
<ul>
<li><a href="https://www.cnblogs.com/dogdogwang/p/7151866.html">《servlet3.0 新特性——异步处理》</a></li>
</ul>
<h2 id="api-网关">API 网关</h2>
<p>主要职责：请求转发、安全认证、协议转换、容灾。</p>
<ul>
<li><a href="http://yunlzheng.github.io/2017/03/14/the-things-about-api-gateway/">《API网关那些儿》</a></li>
<li><a href="http://www.infoq.com/cn/news/2016/07/API-background-architecture-floo">《谈API网关的背景、架构以及落地方案》</a></li>
<li><a href="https://blog.csdn.net/zhanglh046/article/details/78651993">《使用Zuul构建API Gateway》</a></li>
<li><a href="http://www.iocoder.cn/categories/Spring-Cloud-Gateway/?vip&amp;architect-awesome">《Spring Cloud Gateway 源码解析》</a></li>
<li><a href="https://mp.weixin.qq.com/s/LIq2CiXJQmmjBC0yvYLY5A">《HTTP API网关选择之一Kong介绍》</a></li>
</ul>
<h1 id="网络">网络</h1>
<h2 id="协议">协议</h2>
<h3 id="osi-七层协议">OSI 七层协议</h3>
<ul>
<li><a href="https://www.cnblogs.com/Robin-YB/p/6668762.html">《OSI七层协议模型、TCP/IP四层模型学习笔记》</a></li>
</ul>
<h3 id="tcpip">TCP/IP</h3>
<ul>
<li><a href="https://www.cnblogs.com/onepixel/p/7092302.html">《深入浅出 TCP/IP 协议》</a></li>
<li><a href="https://blog.csdn.net/whuslei/article/details/6667471/">《TCP协议中的三次握手和四次挥手》</a></li>
</ul>
<h3 id="http">HTTP</h3>
<ul>
<li><a href="https://www.cnblogs.com/wangning528/p/6388464.html">《http协议详解(超详细)》</a></li>
</ul>
<h3 id="http20">HTTP2.0</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/zhuyiquan/article/details/69257126">《HTTP 2.0 原理详细分析》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u012657197/article/details/77877840">《HTTP2.0的基本单位为二进制帧》</a></p>
</li>
<li>
<ul>
<li>利用二进制帧负责传输。</li>
<li>多路复用。</li>
</ul>
</li>
</ul>
<h3 id="https">HTTPS</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/zhangshitong/p/6478721.html">《https原理通俗了解》</a></p>
</li>
<li>
<ul>
<li>使用非对称加密协商加密算法</li>
<li>使用对称加密方式传输数据</li>
<li>使用第三方机构签发的证书，来加密公钥，用于公钥的安全传输、防止被中间人串改。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/enweitech/article/details/53213862">《八大免费SSL证书-给你的网站免费添加Https安全加密》</a></p>
</li>
</ul>
<h2 id="网络模型">网络模型</h2>
<ul>
<li>
<p><a href="http://blog.51cto.com/litaotao/1289790">《web优化必须了解的原理之I/o的五种模型和web的三种工作模式》</a></p>
</li>
<li>
<ul>
<li>五种I/O模型：阻塞I/O，非阻塞I/O，I/O复用、事件(信号)驱动I/O、异步I/O，前四种I/O属于同步操作，I/O的第一阶段不同、第二阶段相同，最后的一种则属于异步操作。</li>
<li>三种 Web Server 工作方式：Prefork(多进程)、Worker方式(线程方式)、Event方式。</li>
</ul>
</li>
<li>
<p><a href="http://www.cnblogs.com/Anker/p/3265058.html">《select、poll、epoll之间的区别总结》</a></p>
</li>
<li>
<ul>
<li>select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的。</li>
<li>select 有打开文件描述符数量限制，默认1024（2048 for x64），100万并发，就要用1000个进程、切换开销大；poll采用链表结构，没有数量限制。</li>
<li>select，poll “醒着”的时候要遍历整个fd集合，而epoll在“醒着”的时候只要判断一下就绪链表是否为空就行了，通过回调机制节省大量CPU时间；select，poll每次调用都要把fd集合从用户态往内核态拷贝一次，而epoll只要一次拷贝。</li>
<li>poll会随着并发增加，性能逐渐下降，epoll采用红黑树结构，性能稳定，不会随着连接数增加而降低。</li>
</ul>
</li>
<li>
<p><a href="http://xingyunbaijunwei.blog.163.com/blog/static/76538067201241685556302/">《select，poll，epoll比较 》</a></p>
</li>
<li>
<ul>
<li>在连接数少并且连接都十分活跃的情况下，select和poll的性能可能比epoll好，毕竟epoll的通知机制需要很多函数回调。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/geason/p/5774096.html">《深入理解Java NIO》</a></p>
</li>
<li>
<ul>
<li>NIO 是一种同步非阻塞的 IO 模型。同步是指线程不断轮询 IO 事件是否就绪，非阻塞是指线程在等待 IO 的时候，可以同时做其他任务</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/skiof007/article/details/52873421">《BIO与NIO、AIO的区别》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/u013074465/article/details/46276967">《两种高效的服务器设计模型：Reactor和Proactor模型》</a></p>
</li>
</ul>
<h3 id="epoll">Epoll</h3>
<ul>
<li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5835573.html">《epoll使用详解（精髓）》</a></li>
</ul>
<h3 id="java-nio">Java NIO</h3>
<ul>
<li><a href="https://www.cnblogs.com/geason/p/5774096.html">《深入理解Java NIO》</a></li>
<li><a href="https://blog.csdn.net/xidianliuy/article/details/51612676">《Java NIO编写Socket服务器的一个例子》</a></li>
</ul>
<h3 id="kqueue">kqueue</h3>
<ul>
<li><a href="http://www.cnblogs.com/luminocean/p/5631336.html">《kqueue用法简介》</a></li>
</ul>
<h2 id="连接和短连接">连接和短连接</h2>
<ul>
<li><a href="https://www.cnblogs.com/pangguoping/p/5571422.html">《TCP/IP系列——长连接与短连接的区别》</a></li>
</ul>
<h2 id="框架">框架</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/excellentyuxiao/article/details/53390408">《Netty原理剖析》</a></p>
</li>
<li>
<ul>
<li>Reactor 模式介绍。</li>
<li>Netty 是 Reactor 模式的一种实现。</li>
</ul>
</li>
</ul>
<h2 id="零拷贝zero-copy">零拷贝（Zero-copy）</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/xys1228/p/6088805.html">《对于 Netty ByteBuf 的零拷贝(Zero Copy) 的理解》</a></p>
</li>
<li>
<ul>
<li>多个物理分离的buffer，通过逻辑上合并成为一个，从而避免了数据在内存之间的拷贝。</li>
</ul>
</li>
</ul>
<h2 id="序列化二进制协议">序列化(二进制协议)</h2>
<h3 id="hessian">Hessian</h3>
<ul>
<li><a href="https://www.cnblogs.com/happyday56/p/4268249.html">《Hessian原理分析》</a> Binary-RPC;不仅仅是序列化</li>
</ul>
<h3 id="protobuf">Protobuf</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/antgan/article/details/52103966">《Protobuf协议的Java应用例子》</a> Goolge出品、占用空间和效率完胜其他序列化类库，如Hessian；需要编写 .proto 文件。</p>
</li>
<li>
<p><a href="https://worktile.com/tech/share/prototol-buffers">《Protocol Buffers序列化协议及应用》</a></p>
</li>
<li>
<ul>
<li>关于协议的解释；缺点：可读性差;</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/eric520zenobia/article/details/53766571">《简单的使用 protobuf 和 protostuff》</a></p>
</li>
<li>
<ul>
<li>protostuff 的好处是不用写 .proto 文件，Java 对象直接就可以序列化。</li>
</ul>
</li>
</ul>
<h1 id="数据库">数据库</h1>
<h2 id="基础理论">基础理论</h2>
<h3 id="数据库设计的三大范式">数据库设计的三大范式</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/waj6511988/p/7027127.html">《数据库的三大范式以及五大约束》</a></p>
</li>
<li>
<ul>
<li>第一范式：数据表中的每一列（每个字段）必须是不可拆分的最小单元，也就是确保每一列的原子性；</li>
<li>第二范式（2NF）：满足1NF后，要求表中的所有列，都必须依赖于主键，而不能有任何一列与主键没有关系，也就是说一个表只描述一件事情；</li>
<li>第三范式：必须先满足第二范式（2NF），要求：表中的每一列只与主键直接相关而不是间接相关，（表中的每一列只能依赖于主键）；</li>
</ul>
</li>
</ul>
<h2 id="mysql">MySQL</h2>
<h3 id="原理">原理</h3>
<ul>
<li>
<p><a href="http://www.admin10000.com/document/5372.html">《MySQL的InnoDB索引原理详解》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/xifeijian/article/details/20316775">《MySQL存储引擎－－MyISAM与InnoDB区别》</a></p>
</li>
<li>
<ul>
<li>两种类型最主要的差别就是Innodb 支持事务处理与外键和行级锁</li>
</ul>
</li>
<li>
<p><a href="https://www.2cto.com/database/201211/172380.html">《myisam和innodb索引实现的不同》</a></p>
</li>
</ul>
<h3 id="innodb">InnoDB</h3>
<ul>
<li><a href="https://my.oschina.net/kailuncen/blog/1504217">《一篇文章带你读懂Mysql和InnoDB》</a></li>
</ul>
<h3 id="优化">优化</h3>
<ul>
<li>
<p><a href="http://vdisk.weibo.com/s/muWOT">《MySQL36条军规》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/zhouyusheng/p/8038224.html">《MYSQL性能优化的最佳20+条经验》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/when_less_is_more/article/details/70187459">《SQL优化之道》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/sivkun/p/7518540.html">《mysql数据库死锁的产生原因及解决办法》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/monkey_d_feilong/article/details/52291556">《导致索引失效的可能情况》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/zy_281870667/article/details/51604540">《 MYSQL分页limit速度太慢优化方法》</a></p>
</li>
<li>
<ul>
<li>原则上就是缩小扫描范围。</li>
</ul>
</li>
</ul>
<h3 id="索引">索引</h3>
<h4 id="聚集索引-非聚集索引">聚集索引, 非聚集索引</h4>
<ul>
<li><a href="https://blog.csdn.net/no_endless/article/details/77073549">《MySQL 聚集索引/非聚集索引简述》</a></li>
<li><a href="https://www.cnblogs.com/zlcxbb/p/5757245.html">《MyISAM和InnoDB的索引实现》</a></li>
</ul>
<p>MyISAM 是非聚集，InnoDB 是聚集</p>
<h4 id="复合索引">复合索引</h4>
<ul>
<li>
<p><a href="https://www.cnblogs.com/summer0space/p/7247778.html">《复合索引的优点和注意事项》</a></p>
<blockquote>
<p>对于复合索引,在查询使用时,最好将条件顺序按找索引的顺序,这样效率最高; select * from table1 where col1=A AND col2=B AND col3=D 如果使用 where  col2=B AND col1=A 或者 where col2=B 将不会使用索引</p>
</blockquote>
</li>
<li>
<ul>
<li>原文中提到索引是按照“col1，col2，col3”的顺序创建的，而mysql在按照最左前缀的索引匹配原则，且会自动优化 where 条件的顺序，当条件中只有 col2=B AND col1=A 时，会自动转化为 col1=A AND  col2=B，所以依然会使用索引。</li>
<li>文中有一处错误：</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/acode/p/7489258.html">《MySQL查询where条件的顺序对查询效率的影响》</a></p>
</li>
</ul>
<h4 id="自适应哈希索引ahi">自适应哈希索引(AHI)</h4>
<ul>
<li><a href="https://blog.csdn.net/Linux_ever/article/details/62043708">《InnoDB存储引擎——自适应哈希索引》</a></li>
</ul>
<h3 id="explain">explain</h3>
<ul>
<li><a href="https://segmentfault.com/a/1190000008131735">《MySQL 性能优化神器 Explain 使用分析》</a></li>
</ul>
<h2 id="nosql">NoSQL</h2>
<h3 id="mongodb">MongoDB</h3>
<ul>
<li>
<p><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html">MongoDB 教程</a></p>
</li>
<li>
<p><a href="http://mxdxm.iteye.com/blog/2093603">《Mongodb相对于关系型数据库的优缺点》</a></p>
</li>
<li>
<ul>
<li>优点：弱一致性（最终一致），更能保证用户的访问速度；内置GridFS，支持大容量的存储；Schema-less 数据库，不用预先定义结构；内置Sharding；相比于其他NoSQL，第三方支持丰富；性能优越；</li>
<li>缺点：mongodb不支持事务操作；mongodb占用空间过大；MongoDB没有如MySQL那样成熟的维护工具，这对于开发和IT运营都是个值得注意的地方；</li>
</ul>
</li>
</ul>
<h3 id="hbase">Hbase</h3>
<ul>
<li>
<p><a href="http://www.thebigdata.cn/HBase/35831.html">《简明 HBase 入门教程（开篇）》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/qiaoyihang/p/6246424.html">《深入学习HBase架构原理》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/youzhouliu/article/details/67632882">《传统的行存储和（HBase）列存储的区别》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/lifuxiangcaohui/article/details/39891099">《Hbase与传统数据库的区别》</a></p>
</li>
<li>
<ul>
<li>空数据不存储，节省空间，且适用于并发。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/u014091123/article/details/73163088">《HBase Rowkey设计》</a></p>
</li>
<li>
<ul>
<li>rowkey 按照字典顺序排列，便于批量扫描。</li>
<li>通过散列可以避免热点。</li>
</ul>
</li>
</ul>
<h1 id="搜索引擎">搜索引擎</h1>
<h2 id="搜索引擎原理">搜索引擎原理</h2>
<ul>
<li><a href="https://www.jianshu.com/p/0193dc44135b">《倒排索引--搜索引擎入门》</a></li>
</ul>
<h2 id="lucene">Lucene</h2>
<ul>
<li><a href="https://www.cnblogs.com/rodge-run/p/6551152.html">《Lucene入门简介》</a></li>
</ul>
<h2 id="elasticsearch">Elasticsearch</h2>
<ul>
<li><a href="https://blog.csdn.net/laoyang360/article/details/52244917">《Elasticsearch学习，请先看这一篇！》</a></li>
<li><a href="https://blog.csdn.net/cyony/article/details/65437708">《Elasticsearch索引原理》</a></li>
</ul>
<h2 id="solr">Solr</h2>
<ul>
<li><a href="https://blog.csdn.net/u011936655/article/details/51960005">《 Apache Solr入门教程》</a></li>
<li><a href="https://blog.csdn.net/convict_eva/article/details/53537837">《elasticsearch与solr比较》</a></li>
</ul>
<h2 id="sphinx">sphinx</h2>
<ul>
<li><a href="http://blog.jobbole.com/101672/">《Sphinx 的介绍和原理探索》</a></li>
</ul>
<h1 id="性能">性能</h1>
<h2 id="性能优化方法论">性能优化方法论</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/huangwenyi1010/article/details/72673447?ref=myread">《15天的性能优化工作，5方面的调优经验》</a></p>
</li>
<li>
<ul>
<li>代码层面、业务层面、数据库层面、服务器层面、前端优化。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/tenglizhe/article/details/44563135">《系统性能优化的几个方面》</a></p>
</li>
</ul>
<h2 id="容量评估">容量评估</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/u012528360/article/details/70054156">《联网性能与容量评估的方法论和典型案例》</a></p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5ODYxMDA5OQ==&amp;mid=2651959542&amp;idx=1&amp;sn=2494bbea9a855e0e1c3ccd6d2562a600&amp;scene=21#wechat_redirect">《互联网架构，如何进行容量设计？》</a></p>
</li>
<li>
<ul>
<li>评估总访问量、评估平均访问量QPS、评估高峰QPS、评估系统、单机极限QPS</li>
</ul>
</li>
</ul>
<h2 id="cdn-网络">CDN 网络</h2>
<ul>
<li><a href="https://www.cnblogs.com/wxiaona/p/5867685.html">《CDN加速原理》</a></li>
<li><a href="https://www.zhihu.com/question/20536932">《国内有哪些比较好的 CDN？》</a></li>
</ul>
<h2 id="连接池">连接池</h2>
<ul>
<li><a href="https://blog.csdn.net/fysuccess/article/details/66972554">《主流Java数据库连接池比较与开发配置实战》</a></li>
</ul>
<h2 id="性能调优">性能调优</h2>
<ul>
<li><a href="https://blog.csdn.net/yethyeth/article/details/73266455">《九大Java性能调试工具，必备至少一款》</a></li>
</ul>
<h1 id="大数据">大数据</h1>
<h2 id="流式计算">流式计算</h2>
<h3 id="storm">Storm</h3>
<ul>
<li><a href="http://storm.apache.org/">官方网站</a></li>
<li><a href="https://blog.csdn.net/uisoul/article/details/77989927">《最详细的Storm入门教程》</a></li>
</ul>
<h3 id="flink">Flink</h3>
<ul>
<li><a href="https://blog.csdn.net/lisi1129/article/details/54844919">《Flink之一 Flink基本原理介绍》</a></li>
</ul>
<h3 id="kafka-stream">Kafka Stream</h3>
<ul>
<li><a href="https://yq.aliyun.com/articles/58382">《Kafka Stream调研：一种轻量级流计算模式》</a></li>
</ul>
<h3 id="应用场景-2">应用场景</h3>
<p>例如：</p>
<ul>
<li>广告相关实时统计；</li>
<li>推荐系统用户画像标签实时更新；</li>
<li>线上服务健康状况实时监测；</li>
<li>实时榜单；</li>
<li>实时数据统计。</li>
</ul>
<h2 id="hadoop">Hadoop</h2>
<ul>
<li><a href="https://blog.csdn.net/houbin0912/article/details/72967178">《用通俗易懂的话说下hadoop是什么,能做什么》</a></li>
<li><a href="http://gitbook.cn/books/5954c9600326c7705af8a92a/index.html">《史上最详细的Hadoop环境搭建》</a></li>
</ul>
<h3 id="hdfs">HDFS</h3>
<ul>
<li><a href="https://segmentfault.com/a/1190000011575458">《【Hadoop学习】HDFS基本原理》</a></li>
</ul>
<h3 id="mapreduce">MapReduce</h3>
<ul>
<li><a href="https://blog.csdn.net/oppo62258801/article/details/72884633">《用通俗易懂的大白话讲解Map/Reduce原理》</a></li>
<li><a href="https://blog.csdn.net/foye12/article/details/78358292">《 简单的map-reduce的java例子》</a></li>
</ul>
<h3 id="yarn">Yarn</h3>
<ul>
<li><a href="http://www.cnblogs.com/codeOfLife/p/5492740.html">《初步掌握Yarn的架构及原理》</a></li>
</ul>
<h2 id="spark">Spark</h2>
<ul>
<li><a href="http://www.cnblogs.com/tgzhu/p/5818374.html">《Spark(一): 基本架构及原理》</a></li>
<li><a href="http://dblab.xmu.edu.cn/blog/1709-2/">《子雨大数据之Spark入门教程(Python版)》</a></li>
</ul>
<h1 id="安全">安全</h1>
<h2 id="web-安全">web 安全</h2>
<h3 id="xss">XSS</h3>
<ul>
<li><a href="https://blog.csdn.net/qq_21956483/article/details/54377947">《xss攻击原理与解决方法》</a></li>
</ul>
<h3 id="csrf">CSRF</h3>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6412-csrf.html">《CSRF原理及防范》</a></li>
</ul>
<h3 id="sql-注入">SQL 注入</h3>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6413-sql-zhu-ru.html">《SQL注入》</a></li>
</ul>
<h3 id="hash-dos">Hash Dos</h3>
<ul>
<li>
<p><a href="http://www.freebuf.com/articles/web/14199.html">《邪恶的JAVA HASH DOS攻击》</a></p>
</li>
<li>
<ul>
<li>利用JsonObject 上传大Json，JsonObject 底层使用HashMap；不同的数据产生相同的hash值，使得构建Hash速度变慢，耗尽CPU。</li>
</ul>
</li>
<li>
<p><a href="http://blog.it2048.cn/article_hash-collision.html">《一种高级的DoS攻击-Hash碰撞攻击》</a></p>
</li>
<li>
<p><a href="http://www.iteye.com/news/23939/">《关于Hash Collision DoS漏洞：解析与解决方案》</a></p>
</li>
</ul>
<h3 id="脚本注入">脚本注入</h3>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/641-web-an-quan-fang-fan/6414-shang-chuan-wen-jian-guo-lv.html">《上传文件漏洞原理及防范》</a></li>
</ul>
<h3 id="漏洞扫描工具">漏洞扫描工具</h3>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/6421-dvwa.html">《DVWA》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/w3af.html">W3af</a></li>
<li><a href="https://blog.csdn.net/xygg0801/article/details/53610640">OpenVAS详解</a></li>
</ul>
<h3 id="验证码">验证码</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/niaonao/article/details/51112686">《验证码原理分析及实现》</a></p>
</li>
<li>
<p><a href="https://my.oschina.net/jiangbianwanghai/blog/1031031">《详解滑动验证码的实现原理》</a></p>
</li>
<li>
<ul>
<li>滑动验证码是根据人在滑动滑块的响应时间，拖拽速度，时间，位置，轨迹，重试次数等来评估风险。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/xcj26/p/5242758.html">《淘宝滑动验证码研究》</a></p>
</li>
</ul>
<h2 id="ddos-防范">DDoS 防范</h2>
<ul>
<li><a href="http://netsecurity.51cto.com/art/201601/503799.htm">《学习手册：DDoS的攻击方式及防御手段》</a></li>
<li><a href="http://netsecurity.51cto.com/art/201406/442756.htm">《免费DDoS攻击测试工具大合集》</a></li>
</ul>
<h2 id="用户隐私信息保护">用户隐私信息保护</h2>
<ol>
<li>用户密码非明文保存，加动态salt。</li>
<li>身份证号，手机号如果要显示，用 “*” 替代部分字符。</li>
<li>联系方式在的显示与否由用户自己控制。</li>
</ol>
<ul>
<li><a href="https://zhidao.baidu.com/question/1988017976673661587.html">《个人隐私包括哪些》</a></li>
<li><a href="https://www.zhihu.com/question/20137108">《在互联网上，隐私的范围包括哪些？》</a></li>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6425-jia-mi-chang-jing-ff1a-yong-hu-mi-ma-bao-cun.html">《用户密码保存》</a></li>
</ul>
<h2 id="序列化漏洞">序列化漏洞</h2>
<ul>
<li><a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/">《Lib之过？Java反序列化漏洞通用利用分析》</a></li>
</ul>
<h2 id="加密解密">加密解密</h2>
<h3 id="对称加密">对称加密</h3>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6421-chang-jian-dui-cheng-jia-mi-suan-fa.html">《常见对称加密算法》</a></p>
</li>
<li>
<ul>
<li>DES、3DES、Blowfish、AES</li>
<li>DES 采用 56位秘钥，Blowfish 采用1到448位变长秘钥，AES 128，192和256位长度的秘钥。</li>
<li>DES 秘钥太短（只有56位）算法目前已经被 AES 取代，并且 AES 有硬件加速，性能很好。</li>
</ul>
</li>
</ul>
<h3 id="哈希算法">哈希算法</h3>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6422-chang-jian-ha-xi-suan-fa-and-hmac.html">《常用的哈希算法》</a></p>
</li>
<li>
<ul>
<li>MD5 和 SHA-1 已经不再安全，已被弃用。</li>
<li>目前 SHA-256 是比较安全的。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/zhangruhong168/article/details/78033202">《基于Hash摘要签名的公网URL签名验证设计方案》</a></p>
</li>
</ul>
<h3 id="非对称加密">非对称加密</h3>
<ul>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/642-shu-ju-jia-mi/6424-chang-yong-fei-dui-cheng-jia-mi-suan-fa.html">《常见非对称加密算法》</a></p>
</li>
<li>
<ul>
<li>
<p>RSA、DSA、ECDSA(螺旋曲线加密算法)</p>
</li>
<li>
<p>和 RSA 不同的是 DSA 仅能用于数字签名，不能进行数据加密解密，其安全性和RSA相当，但其性能要比RSA快。</p>
</li>
<li>
<p>256位的ECC秘钥的安全性等同于3072位的RSA秘钥。</p>
<p><a href="http://baijiahao.baidu.com/s?id=1578348858092033763&amp;wfr=spider&amp;for=pc">《区块链的加密技术》</a></p>
</li>
</ul>
</li>
</ul>
<h2 id="服务器安全">服务器安全</h2>
<ul>
<li><a href="http://www.freebuf.com/articles/system/121540.html">《Linux强化论：15步打造一个安全的Linux服务器》</a></li>
</ul>
<h2 id="数据安全">数据安全</h2>
<h3 id="数据备份">数据备份</h3>
<h2 id="网络隔离">网络隔离</h2>
<h3 id="内外网分离">内外网分离</h3>
<h3 id="登录跳板机">登录跳板机</h3>
<p>在内外环境中通过跳板机登录到线上主机。</p>
<ul>
<li><a href="http://blog.51cto.com/zero01/2062618">《搭建简易堡垒机》</a></li>
</ul>
<h2 id="授权-认证">授权、认证</h2>
<h3 id="rbac">RBAC</h3>
<ul>
<li><a href="https://www.cnblogs.com/zq8024/p/5003050.html">《基于组织角色的权限设计》</a></li>
<li><a href="https://www.cnblogs.com/shijiaqi1066/p/3793894.html">《权限系统与RBAC模型概述》</a></li>
<li><a href="https://blog.csdn.net/he90227/article/details/38663553">《Spring整合Shiro做权限控制模块详细案例分析》</a></li>
</ul>
<h3 id="oauth20">OAuth2.0</h3>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">《理解OAuth 2.0》</a></li>
<li><a href="https://www.cnblogs.com/flashsun/p/7424071.html">《一张图搞定OAuth2.0》</a></li>
</ul>
<h3 id="双因素认证2fa">双因素认证（2FA）</h3>
<p>2FA - Two-factor authentication，用于加强登录验证</p>
<p>常用做法是 登录密码 + 手机验证码（或者令牌Key，类似于与网银的 USB key）</p>
<ul>
<li>【《双因素认证（2FA）教程》】(http://www.ruanyifeng.com/blog/2017/11/2fa-tutorial.html)</li>
</ul>
<h3 id="单点登录sso">单点登录(SSO)</h3>
<ul>
<li><a href="https://www.cnblogs.com/ywlaker/p/6113927.html">《单点登录原理与简单实现》</a></li>
<li><a href="https://github.com/apereo/cas">CAS单点登录框架</a></li>
</ul>
<h1 id="常用开源框架">常用开源框架</h1>
<h2 id="开源协议">开源协议</h2>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/chapter1/di-yi-zhang-ff1a-zhun-bei-qi-cheng/12-guan-yu-kai-yuan/123-kai-yuan-xie-yi-de-xuan-ze.html">《开源协议的选择》</a></li>
<li><a href="http://choosealicense.online/">如何选择一个开源软件协议</a></li>
</ul>
<h2 id="日志框架">日志框架</h2>
<h3 id="log4j-log4j2">Log4j、Log4j2</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/u012422446/article/details/51199724">《log4j 详细讲解》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/vbirdbest/article/details/71751835">《log4j2 实际使用详解》</a></p>
</li>
<li>
<p><a href="https://my.oschina.net/OutOfMemory/blog/789267">《Log4j1,Logback以及Log4j2性能测试对比》</a></p>
</li>
<li>
<ul>
<li>Log4J 异步日志性能优异。</li>
</ul>
</li>
</ul>
<h3 id="logback">Logback</h3>
<ul>
<li><a href="https://blog.csdn.net/rulon147/article/details/52620541">《最全LogBack 详解、含java案例和配置说明》</a></li>
</ul>
<h2 id="orm">ORM</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/sinat_34093604/article/details/53082000">《ORM框架使用优缺点》</a></p>
</li>
<li>
<ul>
<li>主要目的是为了提高开发效率。</li>
</ul>
</li>
</ul>
<p>MyBatis：</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/winclpt/articles/7511672.html">《mybatis缓存机制详解》</a></p>
</li>
<li>
<ul>
<li>一级缓存是SqlSession级别的缓存，缓存的数据只在SqlSession内有效</li>
<li>二级缓存是mapper级别的缓存，同一个namespace公用这一个缓存，所以对SqlSession是共享的；使用 LRU 机制清理缓存，通过 cacheEnabled 参数开启。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/baidu_32877851/article/details/53959268">《MyBatis学习之代码生成器Generator》</a></p>
</li>
</ul>
<h2 id="网络框架">网络框架</h2>
<h2 id="web-框架">Web 框架</h2>
<h3 id="spring-家族">Spring 家族</h3>
<p>Spring</p>
<ul>
<li><a href="https://www.w3cschool.cn/wkspring/">Spring 简明教程</a></li>
</ul>
<p>Spring Boot</p>
<ul>
<li><a href="http://projects.spring.io/spring-boot/">官方网站</a></li>
<li><a href="http://blog.didispace.com/Spring-Boot%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/">《Spring Boot基础教程》</a></li>
</ul>
<p>Spring Cloud</p>
<ul>
<li><a href="http://springboot.fun/">Spring Boot 中文索引站</a></li>
<li><a href="https://springcloud.cc/">Spring Cloud 中文文档</a></li>
<li><a href="http://blog.didispace.com/Spring-Cloud%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/">《Spring Cloud基础教程》</a></li>
</ul>
<h2 id="工具框架">工具框架</h2>
<ul>
<li><a href="https://www.cnblogs.com/crazylqy/p/4872236.html">《Apache Commons 工具类介绍及简单使用》</a></li>
<li><a href="http://ifeve.com/google-guava/">《Google guava 中文教程》</a></li>
</ul>
<h1 id="分布式设计">分布式设计</h1>
<h2 id="扩展性设计">扩展性设计</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/hemin1003/article/details/53633926">《架构师不可不知的十大可扩展架构》</a></p>
</li>
<li>
<ul>
<li>总结下来，通用的套路就是分布、缓存及异步处理。</li>
</ul>
</li>
<li>
<p><a href="https://yq.aliyun.com/articles/38119">《可扩展性设计之数据切分》</a></p>
</li>
<li>
<ul>
<li>水平切分+垂直切分</li>
<li>利用中间件进行分片如，MySQL Proxy。</li>
<li>利用分片策略进行切分，如按照ID取模。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/deniro_li/article/details/78458306">《说说如何实现可扩展性的大型网站架构》</a></p>
</li>
<li>
<ul>
<li>分布式服务+消息队列。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/chaofanwei/article/details/29191073">《大型网站技术架构（七）--网站的可扩展性架构》</a></p>
</li>
</ul>
<h2 id="稳定性-高可用">稳定性 &amp; 高可用</h2>
<ul>
<li>
<p><a href="https://blog.csdn.net/hustspy1990/article/details/78008324">《系统设计：关于高可用系统的一些技术方案》</a></p>
</li>
<li>
<ul>
<li>可扩展：水平扩展、垂直扩展。 通过冗余部署，避免单点故障。</li>
<li>隔离：避免单一业务占用全部资源。避免业务之间的相互影响 2. 机房隔离避免单点故障。</li>
<li>解耦：降低维护成本，降低耦合风险。减少依赖，减少相互间的影响。</li>
<li>限流：滑动窗口计数法、漏桶算法、令牌桶算法等算法。遇到突发流量时，保证系统稳定。</li>
<li>降级：紧急情况下释放非核心功能的资源。牺牲非核心业务，保证核心业务的高可用。</li>
<li>熔断：异常情况超出阈值进入熔断状态，快速失败。减少不稳定的外部依赖对核心服务的影响。</li>
<li>自动化测试：通过完善的测试，减少发布引起的故障。</li>
<li>灰度发布：灰度发布是速度与安全性作为妥协，能够有效减少发布故障。</li>
</ul>
</li>
<li>
<p><a href="https://coolshell.cn/articles/17459.html">《关于高可用的系统》</a></p>
</li>
<li>
<ul>
<li>设计原则：数据不丢(持久化)；服务高可用(服务副本)；绝对的100%高可用很难，目标是做到尽可能多的9，如99.999%（全年累计只有5分钟）。</li>
</ul>
</li>
</ul>
<h3 id="硬件负载均衡">硬件负载均衡</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/wuyun-blog/p/6186198.html">《转！！负载均衡器技术Nginx和F5的优缺点对比》</a></p>
</li>
<li>
<ul>
<li>主要是和F5对比。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/lcword/p/5773296.html">《软/硬件负载均衡产品 你知多少？》</a></p>
</li>
</ul>
<h3 id="软件负载均衡">软件负载均衡</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/tianzhiliang/articles/2317808.html">《几种负载均衡算法》</a> 轮寻、权重、负载、最少连接、QoS</p>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/611-dns-fang-shi.html">《DNS负载均衡》</a></p>
</li>
<li>
<ul>
<li>配置简单，更新速度慢。</li>
</ul>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/613-nginx-fu-zai-jun-heng.html">《Nginx负载均衡》</a></p>
</li>
<li>
<ul>
<li>简单轻量、学习成本低；主要适用于web应用。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/edisonchou/p/4281978.html">《借助LVS+Keepalived实现负载均衡 》</a></p>
</li>
<li>
<ul>
<li>配置比较负载、只支持到4层，性能较高。</li>
</ul>
</li>
<li>
<p><a href="http://www.ttlsa.com/linux/haproxy-study-tutorial/">《HAProxy用法详解 全网最详细中文文档》</a></p>
</li>
<li>
<ul>
<li>支持到七层（比如HTTP）、功能比较全面，性能也不错。</li>
</ul>
</li>
<li>
<p><a href="http://blog.itpub.net/25704976/viewspace-1319781/">《Haproxy+Keepalived+MySQL实现读均衡负载》</a></p>
</li>
<li>
<ul>
<li>主要是用户读请求的负载均衡。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/lylife/p/5584019.html">《rabbitmq+haproxy+keepalived实现高可用集群搭建》</a></p>
</li>
</ul>
<h3 id="限流">限流</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/haoxinyue/p/6792309.html">《谈谈高并发系统的限流》</a></p>
</li>
<li>
<ul>
<li>计数器：通过滑动窗口计数器，控制单位时间内的请求次数，简单粗暴。</li>
<li>漏桶算法：固定容量的漏桶，漏桶满了就丢弃请求，比较常用。</li>
<li>令牌桶算法：固定容量的令牌桶，按照一定速率添加令牌，处理请求前需要拿到令牌，拿不到令牌则丢弃请求，或进入丢队列，可以通过控制添加令牌的速率，来控制整体速度。Guava 中的 RateLimiter 是令牌桶的实现。</li>
<li>Nginx 限流：通过 <code>limit_req</code> 等模块限制并发连接数。</li>
</ul>
</li>
</ul>
<h3 id="应用层容灾">应用层容灾</h3>
<ul>
<li>
<p><a href="https://segmentfault.com/a/1190000005988895">《防雪崩利器：熔断器 Hystrix 的原理与使用》</a></p>
</li>
<li>
<ul>
<li>资源隔离：Hystrix通过将每个依赖服务分配独立的线程池进行资源隔离, 从而避免服务雪崩。</li>
<li>熔断开关：服务的健康状况 = 请求失败数 / 请求总数，通过阈值设定和滑动窗口控制开关。</li>
<li>命令模式：通过继承 HystrixCommand 来包装服务调用逻辑。</li>
<li>雪崩效应原因：硬件故障、硬件故障、程序Bug、重试加大流量、用户大量请求。</li>
<li>雪崩的对策：限流、改进缓存模式(缓存预加载、同步调用改异步)、自动扩容、降级。</li>
<li>Hystrix设计原则：</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506">《缓存穿透，缓存击穿，缓存雪崩解决方案分析》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/zeb_perfect/article/details/54135506">《缓存击穿、失效以及热点key问题》</a></p>
</li>
<li>
<ul>
<li>主要策略：失效瞬间：单机使用锁；使用分布式锁；不过期；</li>
<li>热点数据：热点数据单独存储；使用本地缓存；分成多个子key；</li>
</ul>
</li>
</ul>
<h3 id="跨机房容灾">跨机房容灾</h3>
<ul>
<li>
<p><a href="http://dc.idcquan.com/ywgl/71559.shtml">《“异地多活”多机房部署经验谈》</a></p>
</li>
<li>
<ul>
<li>通过自研中间件进行数据同步。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/jeffreynicole/article/details/48135093">《异地多活（异地双活）实践经验》</a></p>
</li>
<li>
<ul>
<li>注意延迟问题，多次跨机房调用会将延时放大数倍。</li>
<li>建房间专线很大概率会出现问题，做好运维和程序层面的容错。</li>
<li>不能依赖于程序端数据双写，要有自动同步方案。</li>
<li>数据永不在高延迟和较差网络质量下，考虑同步质量问题。</li>
<li>核心业务和次要业务分而治之，甚至只考虑核心业务。</li>
<li>异地多活监控部署、测试也要跟上。</li>
<li>业务允许的情况下考虑用户分区，尤其是游戏、邮箱业务。</li>
<li>控制跨机房消息体大小，越小越好。</li>
<li>考虑使用docker容器虚拟化技术，提高动态调度能力。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/yoara/article/details/38013751">容灾技术及建设经验介绍</a></p>
</li>
</ul>
<h3 id="容灾演练流程">容灾演练流程</h3>
<ul>
<li>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650996320&amp;idx=1&amp;sn=0ed3be190bbee4a9277886ef88cbb2e5">《依赖治理、灰度发布、故障演练，阿里电商故障演练系统的设计与实战经验》</a></p>
</li>
<li>
<ul>
<li>常见故障画像</li>
<li>案例：预案有效性、预案有效性、故障复现、架构容灾测试、参数调优、参数调优、故障突袭、联合演练。</li>
</ul>
</li>
</ul>
<h3 id="平滑启动">平滑启动</h3>
<ul>
<li>平滑重启应用思路 1.端流量（如vip层）、2. flush 数据(如果有)、3, 重启应用</li>
<li><a href="https://blog.csdn.net/u011001084/article/details/73480432">《JVM安全退出（如何优雅的关闭java服务）》</a> 推荐推出方式：System.exit，Kill SIGTERM；不推荐 kill-9；用 Runtime.addShutdownHook 注册钩子。</li>
<li><a href="http://ju.outofmemory.cn/entry/337235">《常见Java应用如何优雅关闭》</a> Java、Spring、Dubbo 优雅关闭方式。</li>
</ul>
<h2 id="数据库扩展">数据库扩展</h2>
<h3 id="读写分离模式">读写分离模式</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/houdj/p/6563771.html">《Mysql主从方案的实现》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/edisonchou/p/4133148.html">《搭建MySQL主从复制经典架构》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/nimasike/article/details/48048341">《Haproxy+多台MySQL从服务器(Slave) 实现负载均衡》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/zhangsubai/p/6801764.html">《DRBD+Heartbeat+Mysql高可用读写分离架构》</a></p>
</li>
<li>
<ul>
<li>DRDB 进行磁盘复制，避免单点问题。</li>
</ul>
</li>
<li>
<p><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/62-ke-kuo-zhan-de-shu-ju-ku-jia-gou/621-gao-ke-yong-mysql-de-ji-zhong-fang-an/6214-mysql-cluster-fang-an.html">《MySQL Cluster 方式》</a></p>
</li>
</ul>
<h3 id="分片模式">分片模式</h3>
<ul>
<li>
<p><a href="https://www.jianshu.com/p/32b3e91aa22c">《分库分表需要考虑的问题及方案》</a></p>
</li>
<li>
<ul>
<li>中间件： 轻量级：sharding-jdbc、TSharding；重量级：Atlas、MyCAT、Vitess等。</li>
<li>问题：事务、Join、迁移、扩容、ID、分页等。</li>
<li>事务补偿：对数据进行对帐检查;基于日志进行比对;定期同标准数据来源进行同步等。</li>
<li>分库策略：数值范围；取模；日期等。</li>
<li>分库数量：通常 MySQL 单库 5千万条、Oracle 单库一亿条需要分库。</li>
</ul>
</li>
<li>
<p><a href="https://www.2cto.com/database/201503/380348.html">《MySql分表和表分区详解》</a></p>
</li>
<li>
<ul>
<li>分区：是MySQL内部机制，对客户端透明，数据存储在不同文件中，表面上看是同一个表。</li>
<li>分表：物理上创建不同的表、客户端需要管理分表路由。</li>
</ul>
</li>
</ul>
<h2 id="服务治理">服务治理</h2>
<h3 id="服务注册与发现">服务注册与发现</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/jiaolongdy/article/details/51188798">《永不失联！如何实现微服务架构中的服务发现？》</a></p>
</li>
<li>
<ul>
<li>客户端服务发现模式：客户端直接查询注册表，同时自己负责负载均衡。Eureka 采用这种方式。</li>
<li>服务器端服务发现模式：客户端通过负载均衡查询服务实例。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/u010963948/article/details/71730165">《SpringCloud服务注册中心比较:Consul vs Zookeeper vs Etcd vs Eureka》</a></p>
</li>
<li>
<ul>
<li>CAP支持：Consul（CA）、zookeeper（cp）、etcd（cp） 、euerka（ap）</li>
<li>作者认为目前 Consul 对 Spring cloud 的支持比较好。</li>
</ul>
</li>
<li>
<p><a href="http://mobile.51cto.com/news-502394.htm">《基于Zookeeper的服务注册与发现》</a></p>
</li>
<li>
<ul>
<li>优点：API简单、Pinterest，Airbnb 在用、多语言、通过watcher机制来实现配置PUSH，能快速响应配置变化。</li>
</ul>
</li>
</ul>
<h3 id="服务路由控制">服务路由控制</h3>
<ul>
<li>
<p><a href="https://blog.csdn.net/xundh/article/details/59492750">《分布式服务框架学习笔记4 服务路由》</a></p>
</li>
<li>
<ul>
<li>原则：透明化路由</li>
<li>负载均衡策略：随机、轮询、服务调用延迟、一致性哈希、粘滞连接</li>
<li>本地路由优先策略：injvm(优先调用jvm内部的服务)，innative(优先使用相同物理机的服务),原则上找距离最近的服务。</li>
<li>配置方式：统一注册表；本地配置；动态下发。</li>
</ul>
</li>
</ul>
<h2 id="分布式一致">分布式一致</h2>
<h3 id="cap-与-base-理论">CAP 与 BASE 理论</h3>
<ul>
<li>
<p><a href="http://www.cnblogs.com/szlbm/p/5588543.html">《从分布式一致性谈到CAP理论、BASE理论》</a></p>
</li>
<li>
<ul>
<li>一致性分类：强一致(立即一致)；弱一致(可在单位时间内实现一致，比如秒级)；最终一致(弱一致的一种，一定时间内最终一致)</li>
<li>CAP：一致性、可用性、分区容错性(网络故障引起)</li>
<li>BASE：Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）</li>
<li>BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。</li>
</ul>
</li>
</ul>
<h3 id="分布式锁">分布式锁</h3>
<ul>
<li>
<p><a href="http://www.hollischuang.com/archives/1716">《分布式锁的几种实现方式》</a></p>
</li>
<li>
<ul>
<li>基于数据库的分布式锁：优点：操作简单、容易理解。缺点：存在单点问题、数据库性能够开销较大、不可重入；</li>
<li>基于缓存的分布式锁：优点：非阻塞、性能好。缺点：操作不好容易造成锁无法释放的情况。</li>
<li>Zookeeper 分布式锁：通过有序临时节点实现锁机制，自己对应的节点需要最小，则被认为是获得了锁。优点：集群可以透明解决单点问题，避免锁不被释放问题，同时锁可以重入。缺点：性能不如缓存方式，吞吐量会随着zk集群规模变大而下降。</li>
</ul>
</li>
<li>
<p><a href="https://www.tuicool.com/articles/VZJr6fY">《基于Zookeeper的分布式锁》</a></p>
</li>
<li>
<ul>
<li>清楚的原理描述 + Java 代码示例。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/0201zcr/p/5942748.html">《jedisLock—redis分布式锁实现》</a></p>
</li>
<li>
<ul>
<li>基于 setnx(set if ont exists)，有则返回false，否则返回true。并支持过期时间。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/albertfly/article/details/77412333">《Memcached 和 Redis 分布式锁方案》</a></p>
</li>
<li>
<ul>
<li>利用 memcached 的 add（有别于set）操作，当key存在时，返回false。</li>
</ul>
</li>
</ul>
<h3 id="分布式一致性算法">分布式一致性算法</h3>
<h4 id="paxos">PAXOS</h4>
<ul>
<li><a href="https://www.cnblogs.com/linbingdong/p/6253479.html">《分布式系列文章——Paxos算法原理与推导》</a></li>
<li><a href="https://blog.csdn.net/u010039929/article/details/70171672">《Paxos--&gt;Fast Paxos--&gt;Zookeeper分析》</a></li>
<li><a href="https://www.cnblogs.com/leesf456/p/6012777.html">《【分布式】Zookeeper与Paxos》</a></li>
</ul>
<h4 id="zab">Zab</h4>
<ul>
<li><a href="https://www.jianshu.com/p/fb527a64deee">《Zab：Zookeeper 中的分布式一致性协议介绍》</a></li>
</ul>
<h4 id="raft">Raft</h4>
<ul>
<li>
<p><a href="http://www.cnblogs.com/mindwind/p/5231986.html">《Raft 为什么是更易理解的分布式一致性算法》</a></p>
</li>
<li>
<ul>
<li>三种角色：Leader（领袖）、Follower（群众）、Candidate（候选人）</li>
<li>通过随机等待的方式发出投票，得票多的获胜。</li>
</ul>
</li>
</ul>
<h4 id="gossip">Gossip</h4>
<ul>
<li><a href="http://blog.51cto.com/tianya23/530743">《Gossip算法》</a></li>
</ul>
<h4 id="两阶段提交-多阶段提交">两阶段提交、多阶段提交</h4>
<ul>
<li><a href="http://blog.jobbole.com/95632/">《关于分布式事务、两阶段提交协议、三阶提交协议》</a></li>
</ul>
<h3 id="幂等">幂等</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/wxgblogs/p/6639272.html">《分布式系统---幂等性设计》</a></p>
</li>
<li>
<ul>
<li>幂等特性的作用：该资源具备幂等性，请求方无需担心重复调用会产生错误。</li>
<li>常见保证幂等的手段：MVCC（类似于乐观锁）、去重表(唯一索引)、悲观锁、一次性token、序列号方式。</li>
</ul>
</li>
</ul>
<h3 id="分布式一致方案">分布式一致方案</h3>
<ul>
<li><a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency">《分布式系统事务一致性解决方案》</a></li>
<li><a href="https://weibo.com/ttarticle/p/show?id=2309403965965003062676">《保证分布式系统数据一致性的6种方案》</a></li>
</ul>
<h3 id="分布式-leader-节点选举">分布式 Leader 节点选举</h3>
<ul>
<li><a href="https://blog.csdn.net/johnson_moon/article/details/78809995">《利用zookeeper实现分布式leader节点选举》</a></li>
</ul>
<h3 id="tcctryconfirmcancel-柔性事务">TCC(Try/Confirm/Cancel) 柔性事务</h3>
<ul>
<li>
<p><a href="https://www.jianshu.com/p/ab1a1c6b08a1">《传统事务与柔性事务》</a></p>
</li>
<li>
<ul>
<li>基于BASE理论：基本可用、柔性状态、最终一致。</li>
<li>解决方案：记录日志+补偿（正向补充或者回滚）、消息重试(要求程序要幂等)；“无锁设计”、采用乐观锁机制。</li>
</ul>
</li>
</ul>
<h2 id="分布式文件系统">分布式文件系统</h2>
<ul>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/27666295">说说分布式文件存储系统-基本架构</a> ？</p>
</li>
<li>
<p><a href="https://blog.csdn.net/gatieme/article/details/44982961">《各种分布式文件系统的比较》</a> ？</p>
</li>
<li>
<ul>
<li>HDFS：大批量数据读写，用于高吞吐量的场景，不适合小文件。</li>
<li>FastDFS：轻量级、适合小文件。</li>
</ul>
</li>
</ul>
<h2 id="唯一id-生成">唯一ID 生成</h2>
<h3 id="全局唯一id">全局唯一ID</h3>
<ul>
<li>
<p><a href="https://www.cnblogs.com/baiwa/p/5318432.html">《高并发分布式系统中生成全局唯一Id汇总》</a></p>
</li>
<li>
<ul>
<li>Twitter 方案（Snowflake 算法）：41位时间戳+10位机器标识（比如IP，服务器名称等）+12位序列号(本地计数器)</li>
<li>Flicker 方案：MySQL自增ID + &quot;REPLACE INTO XXX:SELECT LAST_INSERT_ID();&quot;</li>
<li>UUID：缺点，无序，字符串过长，占用空间，影响检索性能。</li>
<li>MongoDB 方案：利用 ObjectId。缺点：不能自增。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/hdu09075340/article/details/79103851">《TDDL 在分布式下的SEQUENCE原理》</a></p>
</li>
<li>
<ul>
<li>在数据库中创建 sequence 表，用于记录，当前已被占用的id最大值。</li>
<li>每台客户端主机取一个id区间（比如 1000~2000）缓存在本地，并更新 sequence 表中的id最大值记录。</li>
<li>客户端主机之间取不同的id区间，用完再取，使用乐观锁机制控制并发。</li>
</ul>
</li>
</ul>
<h2 id="一致性hash算法">一致性Hash算法</h2>
<ul>
<li><a href="https://coderxing.gitbooks.io/architecture-evolution/di-san-pian-ff1a-bu-luo/631-yi-zhi-xing-ha-xi.html">《一致性哈希算法》</a></li>
</ul>
<h1 id="设计思想-开发模式">设计思想 &amp; 开发模式</h1>
<h2 id="ddddomain-driven-design-领域驱动设计">DDD(Domain-driven Design - 领域驱动设计)</h2>
<ul>
<li>
<p><a href="https://www.cnblogs.com/netfocus/p/5548025.html">《浅谈我对DDD领域驱动设计的理解》</a></p>
</li>
<li>
<ul>
<li>概念：DDD  主要对传统软件开发流程(分析-设计-编码)中各阶段的割裂问题而提出，避免由于一开始分析不明或在软件开发过程中的信息流转不一致而造成软件无法交付（和需求方设想不一致）的问题。DDD 强调一切以领域（Domain）为中心，强调领域专家（Domain  Expert）的作用，强调先定义好领域模型之后在进行开发，并且领域模型可以指导开发（所谓的驱动）。</li>
<li>过程：理解领域、拆分领域、细化领域，模型的准确性取决于模型的理解深度。</li>
<li>设计：DDD 中提出了建模工具，比如聚合、实体、值对象、工厂、仓储、领域服务、领域事件来帮助领域建模。</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/butterfly100/p/7827870.html">《领域驱动设计的基础知识总结》</a></p>
</li>
<li>
<ul>
<li>关联尽量少，尽量单项，尽量降低整体复杂度。</li>
<li>实体（Entity）：领域中的唯一标示，一个实体的属性尽量少，少则清晰。</li>
<li>值对象（Value Object）：没有唯一标识，且属性值不可变，小二简单的对象，比如Date。</li>
<li>领域服务（Domain Service）： 协调多个领域对象，只有方法没有状态(不存数据)；可以分为应用层服务，领域层服务、基础层服务。</li>
<li>聚合及聚合根（Aggregate，Aggregate  Root）：聚合定义了一组具有内聚关系的相关对象的集合；聚合根是对聚合引用的唯一元素；当修改一个聚合时，必须在事务级别；大部分领域模型中，有70%的聚合通常只有一个实体，30%只有2~3个实体；如果一个聚合只有一个实体，那么这个实体就是聚合根；如果有多个实体，那么我们可以思考聚合内哪个对象有独立存在的意义并且可以和外部直接进行交互；</li>
<li>工厂（Factory）：类似于设计模式中的工厂模式。</li>
<li>仓储（Repository）：持久化到DB，管理对象，且只对聚合设计仓储。</li>
<li>领域（Doamin）本质上就是问题域，比如一个电商系统，一个论坛系统等。</li>
<li>界限上下文（Bounded Context）：阐述子域之间的关系，可以简单理解成一个子系统或组件模块。</li>
<li>领域模型（Domain Model）：DDD的核心是建立（用通用描述语言、工具—领域通用语言）正确的领域模型；反应业务需求的本质，包括实体和过程；其贯穿软件分析、设计、开发 的整个过程；常用表达领域模型的方式：图、代码或文字；</li>
<li>领域通用语言：领域专家、开发设计人员都能立即的语言或工具。</li>
<li>经典分层架构：用户界面/展示层、应用层、领域层、基础设施层，是四层架构模式。</li>
<li>使用的模式：</li>
</ul>
</li>
<li>
<p><a href="http://www.cnblogs.com/Leo_wl/p/3866629.html">《领域驱动设计(DDD)实现之路》</a></p>
</li>
<li>
<ul>
<li>聚合：比如一辆汽车（Car）包含了引擎（Engine）、车轮（Wheel）和油箱（Tank）等组件，缺一不可。</li>
</ul>
</li>
<li>
<p><a href="http://www.hollischuang.com/archives/553">《领域驱动设计系列（2）浅析VO、DTO、DO、PO的概念、区别和用处》</a></p>
</li>
</ul>
<h3 id="命令查询职责分离cqrs">命令查询职责分离(CQRS)</h3>
<p>CQRS — Command Query Responsibility Seperation</p>
<ul>
<li>
<p><a href="https://www.cnblogs.com/cnblogsfans/p/4551990.html">《领域驱动设计系列 (六)：CQRS》</a></p>
</li>
<li>
<ul>
<li>核心思想：读写分离（查询和更新在不同的方法中），不同的流程只是不同的设计方式，CQ代码分离，分布式环境中会有明显体现（有冗余数据的情况下），目的是为了高性能。</li>
</ul>
</li>
<li>
<p><a href="http://www.techweb.com.cn/network/system/2017-07-07/2553563.shtml">《DDD CQRS架构和传统架构的优缺点比较》</a></p>
</li>
<li>
<ul>
<li>最终一致的设计理念；依赖于高可用消息中间件。</li>
</ul>
</li>
<li>
<p><a href="http://www.cnblogs.com/netfocus/p/4055346.html">《CQRS架构简介》</a></p>
</li>
<li>
<ul>
<li>一个实现 CQRS 的抽象案例。</li>
</ul>
</li>
<li>
<p><a href="http://www.uml.org.cn/zjjs/201609221.asp">《深度长文：我对CQRS/EventSourcing架构的思考》</a></p>
</li>
<li>
<ul>
<li>CQRS 模式分析 + 12306 抢票案例</li>
</ul>
</li>
</ul>
<h3 id="贫血充血模型">贫血，充血模型</h3>
<ul>
<li>
<p><a href="https://kb.cnblogs.com/page/520743/">《贫血，充血模型的解释以及一些经验》</a></p>
</li>
<li>
<ul>
<li>失血模型：老子和儿子分别定义，相互不知道，二者实体定义中完全没有业务逻辑，通过外部Service进行关联。</li>
<li>贫血模型：老子知道儿子，儿子也知道老子；部分业务逻辑放到实体中；优点：各层单项依赖，结构清楚，易于维护；缺点：不符合OO思想，相比于充血模式，Service层较为厚重；</li>
<li>充血模型：和贫血模型类似，区别在于如何划分业务逻辑。优点：Service层比较薄，只充当Facade的角色，不和DAO打交道、复合OO思想；缺点：非单项依赖，DO和DAO之间双向依赖、和Service层的逻辑划分容易造成混乱。</li>
<li>肿胀模式：是一种极端情况，取消Service层、全部业务逻辑放在DO中；优点：符合OO思想、简化了分层；缺点：暴露信息过多、很多非DO逻辑也会强行并入DO。这种模式应该避免。</li>
<li>作者主张使用贫血模式。</li>
</ul>
</li>
</ul>
<h2 id="actor-模式">Actor 模式</h2>
<h2 id="响应式编程">响应式编程</h2>
<h3 id="reactor">Reactor</h3>
<h3 id="rxjava">RxJava</h3>
<h3 id="vertx">Vert.x</h3>
<h2 id="dodaf20">DODAF2.0</h2>
<ul>
<li><a href="http://www.360doc.com/content/16/0627/19/33945750_571201779.shtml">《DODAF2.0方法论》</a></li>
<li><a href="http://blog.51cto.com/xiaoyong/1553164">《DODAF2.0之能力视角如何落地》</a></li>
</ul>
<h2 id="serverless">Serverless</h2>
<p>无需过多关系服务器的服务架构理念。</p>
<ul>
<li>
<p><a href="http://www.jdon.com/soa/serverless.html">《什么是Serverless无服务器架构？》</a></p>
</li>
<li>
<ul>
<li>Serverless 不代表出去服务器，而是去除对服务器运行状态的关心。</li>
<li>Serverless 代表一思维方式的转变，从“构建一套服务在一台服务器上，对对个事件进行响应转变为构建一个为服务器，来响应一个事件”。</li>
<li>Serverless 不代表某个具体的框架。</li>
</ul>
</li>
<li>
<p><a href="http://www.infoq.com/cn/news/2017/10/how-to-understand-serverless">《如何理解Serverless？》</a></p>
</li>
<li>
<ul>
<li>依赖于 Baas （(Mobile) Backend as a Service） 和 Faas （Functions as a service）</li>
</ul>
</li>
</ul>
<h2 id="service-mesh">Service Mesh</h2>
<ul>
<li><a href="https://time.geekbang.org/article/2355">《什么是Service Mesh？》</a></li>
<li><a href="https://www.jianshu.com/p/e23e3e74538e">《初识 Service Mesh》</a></li>
</ul>
<h1 id="项目管理">项目管理</h1>
<h2 id="架构评审">架构评审</h2>
<ul>
<li><a href="http://developer.51cto.com/art/201506/478486.htm">《架构设计之如何评审架构设计说明书》</a></li>
<li><a href="https://blog.csdn.net/wireless_com/article/details/45935591">《人人都是架构师：非功能性需求》</a></li>
</ul>
<h2 id="重构">重构</h2>
<ul>
<li><a href="http://www.infoq.com/cn/articles/architect-12-rules-complete/">《架构之重构的12条军规》</a></li>
</ul>
<h2 id="代码规范">代码规范</h2>
<ul>
<li><a href="https://github.com/alibaba/p3c">《阿里巴巴Java开发手册》</a></li>
</ul>
<h2 id="代码-review">代码 Review</h2>
<p>制度还是制度! 另外，每个公司需要根据自己的需求和目标制定自己的 check list</p>
<ul>
<li>
<p><a href="http://www.sohu.com/a/229745352_181657">《为什么你做不好 Code Review？》</a></p>
</li>
<li>
<ul>
<li>代码 review 做的好，在于制度建设。</li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/uxyheaven/article/details/49773619">《从零开始Code Review》</a></p>
</li>
<li>
<p><a href="https://www.cnblogs.com/zuoping/p/5477047.html">《Code Review Checklist》</a></p>
</li>
<li>
<p><a href="https://dzone.com/articles/java-code-review-checklist">《Java Code Review Checklist》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/legend0011/article/details/45585575">《如何用 gitlab 做 code review》</a></p>
</li>
</ul>
<h2 id="rup">RUP</h2>
<ul>
<li><a href="https://blog.csdn.net/apanious/article/details/51011946">《运用RUP 4+1视图方法进行软件架构设计》</a></li>
</ul>
<h2 id="看板管理">看板管理</h2>
<ul>
<li><a href="https://blog.csdn.net/tkchen/article/details/51637643">《说说看板在项目中的应用》</a></li>
</ul>
<h2 id="scrum">SCRUM</h2>
<p>SCRUM - 争球</p>
<ul>
<li>3个角色:Product Owner(PO) 产品负责人;Scrum Master（SM），推动Scrum执行;Team 开发团队。</li>
<li>3个工件：Product Backlog 产品TODOLIST，含优先级;Sprint Backlog 功能开发 TODO LIST；燃尽图；</li>
<li>五个价值观：专注、勇气、公开、承诺、尊重。</li>
<li><a href="https://blog.csdn.net/inny100_100/article/details/54633757">《敏捷项目管理流程-Scrum框架最全总结！》</a></li>
<li><a href="https://blog.csdn.net/superkunkun/article/details/52951142">《敏捷其实很简单3---敏捷方法之scrum》</a></li>
</ul>
<h2 id="敏捷开发">敏捷开发</h2>
<h2 id="极限编程xp">极限编程（XP）</h2>
<p>XP - eXtreme Programming</p>
<ul>
<li>
<p><a href="http://www.woshipm.com/pmd/406917.html">《主流敏捷开发方法：极限编程XP》</a></p>
</li>
<li>
<ul>
<li>沟通：鼓励口头沟通，提高效率。</li>
<li>简单：够用就好。</li>
<li>反馈：及时反馈、通知相关人。</li>
<li>勇气：提倡拥抱变化，敢于重构。</li>
<li>是一种指导开发人员的方法论。</li>
<li>4大价值：</li>
<li>5个原则：快速反馈、简单性假设、逐步修改、提倡更改（小步快跑）、优质工作（保证质量的前提下保证小步快跑）。</li>
<li>5个工作：阶段性冲刺；冲刺计划会议；每日站立会议；冲刺后review；回顾会议。</li>
</ul>
</li>
</ul>
<h2 id="结对编程">结对编程</h2>
<p>边写码，边review。能够增强代码质量、减少bug。</p>
<ul>
<li><a href="http://www.baike.com/wiki/%E7%BB%93%E5%AF%B9%E7%BC%96%E7%A8%8B">《结对编程》</a></li>
</ul>
<h2 id="pdca-循环质量管理">PDCA 循环质量管理</h2>
<p>P——PLAN 策划，D——DO 实施，C——CHECK 检查，A——ACT 改进</p>
<ul>
<li><a href="http://www.baike.com/wiki/PDCA">《PDCA》</a></li>
</ul>
<h2 id="fmea管理模式">FMEA管理模式</h2>
<h1 id="政策-法规">政策、法规</h1>
<h2 id="法律">法律</h2>
<ul>
<li>
<p><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/16843044">《中华人民共和国网络安全法》</a></p>
</li>
<li>
<ul>
<li>2016年11月7日发布，自2017年6月1日起施行</li>
</ul>
</li>
<li>
<p><a href="https://baike.baidu.com/item/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E4%BF%9D%E6%8A%A4%E6%B3%95/8343360">《个人信息保护法》</a></p>
</li>
<li>
<ul>
<li>个人信息保护法是一部保护个人信息的法律条款，现尚在制订中，2019全国两会信息安全相关提案中，有政协委员呼吁关注大数据时代隐私保护，加速立法。</li>
</ul>
</li>
<li>
<p><a href="https://baike.baidu.com/item/%E6%9C%80%E9%AB%98%E4%BA%BA%E6%B0%91%E6%B3%95%E9%99%A2%E3%80%81%E6%9C%80%E9%AB%98%E4%BA%BA%E6%B0%91%E6%A3%80%E5%AF%9F%E9%99%A2%E5%85%B3%E4%BA%8E%E5%8A%9E%E7%90%86%E4%BE%B5%E7%8A%AF%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E5%88%91%E4%BA%8B%E6%A1%88%E4%BB%B6%E9%80%82%E7%94%A8%E6%B3%95%E5%BE%8B%E8%8B%A5%E5%B9%B2%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E9%87%8A/20497481">《最高人民法院、最高人民检察院关于办理侵犯公民个人信息刑事案件适用法律若干问题的解释》</a></p>
<blockquote></blockquote>
</li>
<li>
<ul>
<li>1、对于行踪轨迹信息、通信内容、征信信息、财产信息，非法获取、出售或者提供50条以上即算“情节严重”；</li>
<li>2、对于住宿信息、通信记录、健康生理信息、交易信息等其他可能影响人身、财产安全的公民个人信息，标准则是 500条以上；</li>
<li>3、对于其他公民个人信息，标准为 5000条以上。</li>
<li>《解释》共十三条，自2017年6月1日起施行</li>
</ul>
</li>
<li>
<p><a href="https://baike.baidu.com/item/%E4%B8%AD%E5%8D%8E%E4%BA%BA%E6%B0%91%E5%85%B1%E5%92%8C%E5%9B%BD%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E6%B3%95/16467544">《中华人民共和国电子商务法》</a></p>
</li>
<li>
<ul>
<li>2018年8月31日，十三届全国人大常委会第五次会议表决通过《电子商务法》，自2019年1月1日起施行</li>
<li><a href="https://v.youku.com/v_show/id_XNDAzNjAyNDM0MA==.html">解读电子商务法（一）什么是电商</a></li>
<li><a href="https://v.youku.com/v_show/id_XNDA1OTc0OTQ5Mg==.html">解读电子商务法（二）电商经营者</a></li>
<li><a href="https://v.youku.com/v_show/id_XNDA4NzIyNjI4MA==.html">解读电子商务法（三）电商行为规范</a></li>
<li><a href="https://v.qq.com/x/page/e08443fc1cr.html">解读电子商务法（四）电商的法律关系</a></li>
<li><a href="https://v.youku.com/v_show/id_XNDA4MTQ2Nzk4NA==.html">解读电子商务法（外传）电商挣钱的秘密</a></li>
<li><a href="https://v.qq.com/x/page/j0844twjwr5.html">解读电子商务法（外传）电商模式</a></li>
</ul>
</li>
<li>
<p><a href="https://blog.csdn.net/a331685690/article/details/79917772">程序员需要知道的法律常识</a></p>
</li>
<li>
<p><a href="https://time.geekbang.org/column/132">白话法律42讲-为程序员打造的专属法律武器</a></p>
</li>
</ul>
<h3 id="严格遵守刑法253法条">严格遵守刑法253法条</h3>
<p>我国刑法第253条之一规定：</p>
<blockquote>
<ul>
<li>国家机关或者金融、电信、交通、教育、医疗等单位的工作人员，违反国家规定，将本单位在履行职责或者提供服务过程中获得的公民个人信息，出售或者非法提供给他人，情节严重的，处3年以下有期徒刑或者拘役，并处或者单处罚金。</li>
<li>窃取或者以其他方法非法获取上述信息，情节严重的，依照前款的规定处罚。</li>
<li>单位犯前两款罪的，对单位判处罚金，并对其直接负责的主管人员和其他直接责任人员，依照各该款的规定处罚。</li>
</ul>
</blockquote>
<p>最高人民法院、最高人民检察院关于执行《中华人民共和国刑法》确定罪名的补充规定（四）规定：触犯刑法第253条之一第1款之规定，构成“出售、非法提供公民个人信息罪”；触犯刑法第253条之一第2款之规定，构成“非法获取公民个人信息罪”</p>
<ul>
<li><a href="https://baike.baidu.com/item/%E9%9D%9E%E6%B3%95%E8%8E%B7%E5%8F%96%E5%85%AC%E6%B0%91%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BD%AA">《非法获取公民个人信息罪》</a></li>
</ul>
<h3 id="避风港原则">避风港原则</h3>
<p>“避风港”原则是指在发生著作权侵权案件时，当ISP（网络服务提供商）只提供空间服务，并不制作网页内容，如果ISP被告知侵权，则有删除的义务，否则就被视为侵权。如果侵权内容既不在ISP的服务器上存储，又没有被告知哪些内容应该删除，则ISP不承担侵权责任。 后来避风港原则也被应用在搜索引擎、网络存储、在线图书馆等方面。</p>
<ul>
<li><a href="https://baike.baidu.com/item/%E9%81%BF%E9%A3%8E%E6%B8%AF%E5%8E%9F%E5%88%99/588459?fr=aladdin">《避风港原则》</a></li>
</ul>
<h1 id="架构师素质">架构师素质</h1>
<ul>
<li>
<p><a href="http://hellojava.info/?p=430">《架构师画像》</a></p>
</li>
<li>
<ul>
<li>业务理解和抽象能力</li>
<li>NB的代码能力</li>
<li>全面：1. 在面对业务问题上，架构师脑海里是否会浮现出多种技术方案；2. 在做系统设计时是否考虑到了足够多的方方面面；3. 在做系统设计时是否考虑到了足够多的方方面面；</li>
<li>全局：是否考虑到了对上下游的系统的影响。</li>
<li>权衡：权衡投入产出比；优先级和节奏控制；</li>
</ul>
</li>
<li>
<p><a href="http://www.infoq.com/cn/articles/architecture-optimization-and-design-the-architect-must-know">《关于架构优化和设计，架构师必须知道的事情》</a></p>
</li>
<li>
<ul>
<li>要去考虑的细节：模块化、轻耦合、无共享架构；减少各个组件之前的依赖、注意服务之间依赖所有造成的链式失败及影响等。</li>
<li>基础设施、配置、测试、开发、运维综合考虑。</li>
<li>考虑人、团队、和组织的影响。</li>
</ul>
</li>
<li>
<p><a href="https://www.zhihu.com/question/19841397">《如何才能真正的提高自己，成为一名出色的架构师？》</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/sanbingyutuoniao123/article/details/54144129">《架构师的必备素质和成长途径》</a></p>
</li>
<li>
<ul>
<li>素质：业务理解、技术广度、技术深度、丰富经验、沟通能力、动手能力、美学素养。</li>
<li>成长路径：2年积累知识、4年积累技能和组内影响力、7年积累部门内影响力、7年以上积累跨部门影响力。</li>
</ul>
</li>
<li>
<p><a href="http://blog.51cto.com/frankfan/1248401">《架构设计师—你在哪层楼？》</a></p>
</li>
<li>
<ul>
<li>第一层的架构师看到的只是产品本身</li>
<li>第二层的架构师不仅看到自己的产品，还看到了整体的方案</li>
<li>第三层的架构师看到的是商业价值</li>
</ul>
</li>
</ul>
<p>资讯</p>
<h2 id="行业资讯">行业资讯</h2>
<ul>
<li><a href="http://36kr.com/">36kr</a></li>
<li><a href="http://www.techweb.com.cn/">Techweb</a></li>
</ul>
<h2 id="公众号列表">公众号列表</h2>
<h2 id="博客">博客</h2>
<h3 id="团队博客">团队博客</h3>
<ul>
<li><a href="http://jm.taobao.org/">阿里中间件博客</a></li>
<li><a href="https://tech.meituan.com/">美团点评技术团队博客</a></li>
</ul>
<h3 id="个人博客">个人博客</h3>
<ul>
<li><a href="http://www.ruanyifeng.com/">阮一峰的网络日志</a></li>
<li><a href="https://coolshell.cn/">酷壳 - COOLSHELL-陈皓</a></li>
<li><a href="http://hellojava.info/">hellojava-阿里毕玄</a></li>
<li><a href="http://cmsblogs.com/">Cm's Blog</a></li>
<li><a href="http://blog.didispace.com/">程序猿DD-翟永超-《Spring Cloud微服务实战》作者</a></li>
</ul>
<h2 id="综合门户-社区">综合门户、社区</h2>
<p>国内：</p>
<ul>
<li>
<p><a href="http://csdn.net/">CSDN</a> 老牌技术社区、不必解释。</p>
</li>
<li>
<p><a href="http://www.51cto.com/">51cto.com</a></p>
</li>
<li>
<p><a href="http://www.iteye.com/">ITeye</a></p>
</li>
<li>
<ul>
<li>偏 Java 方向</li>
</ul>
</li>
<li>
<p><a href="https://www.cnblogs.com/">博客园</a></p>
</li>
<li>
<p><a href="http://www.chinaunix.net/">ChinaUnix</a></p>
</li>
<li>
<ul>
<li>偏 Linux 方向</li>
</ul>
</li>
<li>
<p><a href="https://www.oschina.net/">开源中国社区</a></p>
</li>
<li>
<p><a href="https://www.infoq.cn/">InfoQ</a></p>
</li>
<li>
<p><a href="http://www.open-open.com/">深度开源</a></p>
</li>
<li>
<p><a href="http://www.jobbole.com/">伯乐在线</a></p>
</li>
<li>
<ul>
<li>涵盖 IT职场、Web前端、后端、移动端、数据库等方面内容，偏技术端。</li>
</ul>
</li>
<li>
<p><a href="http://www.itpub.net/">ITPUB</a></p>
</li>
<li>
<p><a href="https://cloud.tencent.com/developer/column">腾讯云— 云+社区</a></p>
</li>
<li>
<p><a href="https://yq.aliyun.com/">阿里云— 云栖社区</a></p>
</li>
<li>
<p><a href="https://www.ibm.com/developerworks/cn/">IBM DeveloperWorks</a></p>
</li>
<li>
<p><a href="https://toutiao.io/">开发者头条</a></p>
</li>
<li>
<p><a href="http://www.linkedkeeper.com/">LinkedKeeper</a></p>
</li>
</ul>
<p>国外：</p>
<ul>
<li><a href="https://dzone.com/">DZone</a></li>
<li><a href="https://www.reddit.com/">Reddit</a></li>
</ul>
<h2 id="问答-讨论类社区">问答、讨论类社区</h2>
<ul>
<li>
<p><a href="https://segmentfault.com/">segmentfault</a></p>
</li>
<li>
<ul>
<li>问答+专栏</li>
</ul>
</li>
<li>
<p><a href="https://www.zhihu.com/">知乎</a></p>
</li>
<li>
<p><a href="https://stackoverflow.com/">stackoverflow</a></p>
</li>
</ul>
<h2 id="行业数据分析">行业数据分析</h2>
<ul>
<li><a href="http://report.iresearch.cn/">艾瑞网</a></li>
<li><a href="https://www.questmobile.com.cn/">QUEST MOBILE</a></li>
<li><a href="http://data.stats.gov.cn/">国家数据</a></li>
<li><a href="http://www.talkingdata.com/">TalkingData</a></li>
</ul>
<h2 id="专项网站">专项网站</h2>
<ul>
<li>
<p>测试:</p>
</li>
<li>
<ul>
<li><a href="http://www.ltesting.net/">领测国际</a></li>
<li><a href="https://www.testwo.com/">测试窝</a></li>
<li><a href="https://testerhome.com/">TesterHome</a></li>
</ul>
</li>
<li>
<p>运维:</p>
</li>
<li>
<ul>
<li><a href="http://www.yunweipai.com/">运维派</a></li>
<li><a href="https://www.abcdocker.com/">Abcdocker</a></li>
</ul>
</li>
<li>
<p>Java:</p>
</li>
<li>
<ul>
<li>英文博客</li>
<li>专注于 Java 技术分享</li>
<li><a href="http://www.importnew.com/">ImportNew</a></li>
<li><a href="https://howtodoinjava.com/">HowToDoInJava</a></li>
</ul>
</li>
<li>
<p>安全</p>
</li>
<li>
<ul>
<li><a href="https://www.2cto.com/">红黑联盟</a></li>
<li><a href="http://www.freebuf.com/">FreeBuf</a></li>
</ul>
</li>
<li>
<p>大数据</p>
</li>
<li>
<ul>
<li><a href="http://www.thebigdata.cn/">中国大数据</a></li>
</ul>
</li>
<li>
<p>其他专题网站：</p>
</li>
<li>
<ul>
<li>Linux 主题社区</li>
<li>专注于 Docker 应用及咨询、教程的网站</li>
<li>偏重于基础架构、运维方向</li>
<li><a href="http://www.infoq.com/cn/">InfoQ</a></li>
<li><a href="http://www.dockerinfo.net/">DockerInfo</a></li>
<li><a href="https://www.linuxidc.com/">Linux公社</a></li>
</ul>
</li>
</ul>
<h2 id="其他类">其他类</h2>
<ul>
<li><a href="https://github.com/TeamStuQ/skill-map">程序员技能图谱</a></li>
</ul>
<h2 id="推荐参考书">推荐参考书</h2>
<h3 id="在线电子书">在线电子书</h3>
<ul>
<li><a href="https://github.com/forezp/SpringCloudLearning">《深入理解Spring Cloud与微服务构建》</a></li>
<li><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523849261680/AliTech101_RD.pdf">《阿里技术参考图册-研发篇》</a></li>
<li><a href="http://techforum-img.cn-hangzhou.oss-pub.aliyun-inc.com/1523848064814/AliTech101_Algorithms.pdf">《阿里技术参考图册-算法篇》</a></li>
<li><a href="http://dpurl.cn/n/1lqcX">《2018美团点评技术年货（合辑）》70M</a></li>
<li><a href="http://www.infoq.com/cn/architect/">InfoQ《架构师》月刊</a></li>
<li><a href="https://www.w3cschool.cn/architectroad/">《架构师之路》</a></li>
</ul>
<h3 id="纸质书">纸质书</h3>
<p>更多架构方面书籍参考: <a href="https://github.com/sorenduan/awesome-java-books/blob/master/README.md#%E6%9E%B6%E6%9E%84">awesome-java-books</a></p>
<h4 id="开发方面">开发方面</h4>
<ul>
<li>《阿里巴巴Java开发手册》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BfL5CR">详情</a></li>
</ul>
<h4 id="架构方面">架构方面</h4>
<ul>
<li>《软件架构师的12项修炼：技术技能篇》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=rTlo0m">详情</a></li>
<li>《架构之美》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=1KECBZ">详情</a></li>
<li>《分布式服务架构》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=hkzqtK">详情</a></li>
<li>《聊聊架构》 <a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=A8Nd6Z">详情</a></li>
<li>《云原生应用架构实践》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=D4WCpd">详情</a></li>
<li>《亿级流量网站架构核心技术》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Rdmd21">详情</a></li>
<li>《淘宝技术这十年》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=CoUdGG">详情</a></li>
<li>《企业IT架构转型之道-中台战略思想与架构实战》 <a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BxS6eI">详情</a></li>
<li>《高可用架构（第1卷）》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=BcjUwS">详情</a></li>
</ul>
<h4 id="技术管理方面">技术管理方面</h4>
<ul>
<li>《CTO说》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=Gl3QAo">详情</a></li>
<li>《技术管理之巅》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=MeloLt">详情</a></li>
<li>《网易一千零一夜：互联网产品项目管理实战》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=qPuqMg">详情</a></li>
</ul>
<h4 id="基础理论-2">基础理论</h4>
<ul>
<li>《数学之美》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=0seUpO">详情</a></li>
<li>《编程珠玑》<a href="https://www.coderxing.com/r.php?r=https://union-click.jd.com/jdc?d=I7jj9r">详情</a></li>
</ul>
<h4 id="工具方面">工具方面</h4>
<h4 id="大数据方面">大数据方面</h4>
<h2 id="技术资源">技术资源</h2>
<h2 id="开源资源">开源资源</h2>
<ul>
<li><a href="https://github.com/">github</a></li>
<li><a href="https://www.apache.org/index.html">Apache 软件基金会</a></li>
</ul>
<h2 id="手册-文档-教程">手册、文档、教程</h2>
<p>国内：</p>
<ul>
<li>
<p><a href="http://w3cschool.cn/">W3Cschool</a></p>
</li>
<li>
<p><a href="http://www.runoob.com/">Runoob.com</a></p>
</li>
<li>
<ul>
<li>HTML 、 CSS、XML、Java、Python、PHP、设计模式等入门手册。</li>
</ul>
</li>
<li>
<p><a href="https://love2.io/">Love2.io</a></p>
</li>
<li>
<ul>
<li>很多很多中文在线电子书，是一个全新的开源技术文档分享平台。</li>
</ul>
</li>
<li>
<p><a href="http://gitbook.cn/">gitbook.cn</a></p>
</li>
<li>
<ul>
<li>付费电子书。</li>
</ul>
</li>
<li>
<p><a href="http://www.apachecn.org/">ApacheCN</a></p>
</li>
<li>
<ul>
<li>AI、大数据方面系列中文文档。</li>
</ul>
</li>
</ul>
<p>国外：</p>
<ul>
<li>
<p><a href="http://www.quickcode.co/">Quick Code</a></p>
</li>
<li>
<ul>
<li>免费在线技术教程。</li>
</ul>
</li>
<li>
<p><a href="http://gitbook.com/">gitbook.com</a></p>
</li>
<li>
<ul>
<li>有部分中文电子书。</li>
</ul>
</li>
<li>
<p><a href="https://www.cheatography.com/">Cheatography</a></p>
</li>
<li>
<ul>
<li>Cheat Sheets 大全，单页文档网站。</li>
</ul>
</li>
<li>
<p><a href="https://www.tutorialspoint.com/index.htm">Tutorialspoint</a></p>
</li>
<li>
<ul>
<li>知名教程网站，提供Java、Python、JS、SQL、大数据等高质量入门教程。</li>
</ul>
</li>
</ul>
<h2 id="在线课堂">在线课堂</h2>
<ul>
<li><a href="http://www.xuetuwuyou.com/">学徒无忧</a></li>
<li><a href="https://time.geekbang.org/">极客时间</a></li>
<li><a href="https://segmentfault.com/lives">segmentfault</a></li>
<li><a href="https://new.stuq.org/course/explore">斯达克学院</a></li>
<li><a href="http://nowcoder.com/">牛客网</a></li>
<li><a href="https://www.jikexueyuan.com/">极客学院</a></li>
<li><a href="http://edu.51cto.com/">51CTO学院</a></li>
</ul>
<h2 id="会议-活动">会议、活动</h2>
<ul>
<li><a href="http://www.infoq.com/cn/qcon/">QCon</a></li>
<li><a href="https://archsummit.com/">ArchSummit</a></li>
<li><a href="http://www.thegitc.com/">GITC全球互联网技术大会</a></li>
</ul>
<p>活动发布平台:</p>
<ul>
<li><a href="http://www.huodongxing.com/">活动行</a></li>
</ul>
<h2 id="常用app">常用APP</h2>
<ul>
<li><a href="https://time.geekbang.org/">极客时间</a></li>
<li><a href="https://www.igetget.com/">得到</a></li>
</ul>
<h2 id="找工作">找工作</h2>
<ul>
<li><a href="https://www.zhipin.com/">Boss直聘</a></li>
<li><a href="https://www.lagou.com/">拉勾网</a></li>
<li><a href="https://www.liepin.com/">猎聘</a></li>
<li><a href="https://cn.100offer.com/">100Offer</a></li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://s.geekbang.org/">极客搜索</a></p>
</li>
<li>
<ul>
<li>技术文章搜索引擎。</li>
</ul>
</li>
</ul>
<h2 id="代码托管">代码托管</h2>
<ul>
<li><a href="https://coding.net/">Coding</a></li>
<li><a href="https://gitee.com/">码云</a></li>
</ul>
<h2 id="文件服务">文件服务</h2>
<ul>
<li>七牛</li>
<li>又拍云</li>
</ul>
<h2 id="综合云服务商">综合云服务商</h2>
<ul>
<li>阿里云</li>
<li><a href="https://cloud.tencent.com/redirect.php?redirect=1012&amp;cps_key=c2665015d90871c0cb20fef91b7afc3c">腾讯云</a></li>
<li>百度云</li>
<li>新浪云</li>
<li>金山云</li>
<li><a href="https://amazonaws-china.com/cn/">亚马逊云(AWS)</a></li>
<li><a href="https://cloud.google.com/?hl=zh-cn">谷歌云</a></li>
<li><a href="https://azure.microsoft.com/zh-cn/">微软云</a></li>
</ul>
<h3 id="vps">VPS</h3>
<ul>
<li><a href="http://linode.com/">Linode</a></li>
<li><a href="https://www.digitalocean.com/">DigitalOcean</a></li>
<li><a href="https://www.vultr.com/">Vultr</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue PC端框架 ]]></title>
        <id>https://kangjn.github.io/post/vue-pc-duan-kuang-jia/</id>
        <link href="https://kangjn.github.io/post/vue-pc-duan-kuang-jia/">
        </link>
        <updated>2021-04-25T06:23:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-element">1. Element</h1>
<p>Element，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的桌面端组件库</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/060592.jpg" alt="" loading="lazy"></figure>
<h1 id="2-iview">2. iView</h1>
<p>一套基于 Vue.js 的高质量UI 组件库</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/054762.jpg" alt="" loading="lazy"></figure>
<h1 id="3-vue-element-admin">3. vue-element-admin</h1>
<p>vue-element-admin是基于 Vue2.0，配合使用 Element UI 组件库的一个前端管理后台集成解决方案。它使用了最新的前端技术栈，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/048700.jpg" alt="" loading="lazy"></figure>
<h1 id="4-vue-material">4. Vue Material</h1>
<p>通过Vue Material和Vue 2.0建立精美的app应用</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/015083.jpg" alt="" loading="lazy"></figure>
<h1 id="5-vuestrap">5. VueStrap</h1>
<p>基于 Vue.js 构建的 Bootstrap 组件。该仓库包含一系列基于 Bootstrap 标记和 CSS 的本地 Vue.js 组件。所以不需要 jQuery 和 Bootstrap 的 JavaScript 文件，唯一需要依赖的是:</p>
<ul>
<li>Vue.js (要求版本为 ^0.12，基于 0.12.10 版本做的测试)</li>
<li>Bootstrap CSS (需要版本为 3.x.x， 基于 3.3.5 版本做的测试)。 VueStrap 不依赖某个非常精确的 Bootstrap 版本。</li>
</ul>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/072878.jpg" alt="" loading="lazy"></figure>
<h1 id="6-keen-ui">6. Keen UI</h1>
<p>由Vue编写的基本UI组件的轻量级集合，并受Material Design的启发。</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/073456.jpg" alt="" loading="lazy"></figure>
<h1 id="7-radon-ui">7. Radon UI</h1>
<p>一个帮助你快速开发产品的Vue组件库，简洁好用，效率高，让你摆脱各种定制化的烦恼。</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/001887.jpg" alt="" loading="lazy"></figure>
<h1 id="8-n3-components">8. N3-components</h1>
<p>N3组件库是基于Vue.js构建的，让前端工程师和全栈工程师能快速构建页面和应用。致力于构建良好的Vue开发者生态圈，提供良好的开发体验。</p>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/073671.jpg" alt="" loading="lazy"></figure>
<h1 id="9-muse-ui">9. Muse-UI</h1>
<p>基于 Vue 2.0 优雅的 Material Design UI 组件库</p>
<figure data-type="image" tabindex="9"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/036630.jpg" alt="" loading="lazy"></figure>
<h1 id="10-vue-antd">10. Vue Antd</h1>
<p>这里是 Ant Design 的 Vue 实现，开发和服务于企业级后台产品。</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/011431.jpg" alt="" loading="lazy"></figure>
<h1 id="11-vuetify">11. Vuetify</h1>
<p>Vuetify是一个渐进式的框架，试图推动前端开发发展到一个新的水平。Vuetify 支持SSR（服务端渲染），SPA（单页应用程序），PWA（渐进式Web应用程序）和标准HTML页面。</p>
<figure data-type="image" tabindex="11"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/030282.jpg" alt="" loading="lazy"></figure>
<h1 id="12-buefy">12. Buefy</h1>
<p>Buefy 基于 Bulma 和 Vue.js 的轻量级UI组件，它提供了即装即用的轻量级组件。</p>
<figure data-type="image" tabindex="12"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/071050.jpg" alt="" loading="lazy"></figure>
<h1 id="13-vue-beauty">13. Vue Beauty</h1>
<p>基于 ant design 的漂亮的 vue 组件库；vue-beauty 是一套基于 vue.js 和 ant-design样式 的PC端 UI 组件库，旨在帮助开发者提升产品体验和开发效率、降低维护成本。</p>
<figure data-type="image" tabindex="13"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/014140.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mysql开发规则]]></title>
        <id>https://kangjn.github.io/post/mysql-kai-fa-gui-ze/</id>
        <link href="https://kangjn.github.io/post/mysql-kai-fa-gui-ze/">
        </link>
        <updated>2021-04-25T05:47:49.000Z</updated>
        <content type="html"><![CDATA[<p>(一)核心规则</p>
<p>(1)不在数据库做运算</p>
<p>cpu计算务必移至业务层；</p>
<p>(2)控制单表数据量</p>
<p>int型不超过1000w，含char则不超过500w；</p>
<p>合理分表；</p>
<p>限制单库表数量在300以内；</p>
<p>(3)控制列数量</p>
<p>字段少而精，字段数建议在20以内；</p>
<p>(4)平衡范式与冗余</p>
<p>效率优先；</p>
<p>往往牺牲范式；</p>
<p>(5)拒绝3B</p>
<p>拒绝大sql语句：big sql</p>
<p>拒绝大事物：big transaction</p>
<p>拒绝大批量：big batch</p>
<p>(二)字段类规则</p>
<p>(6)用好数值类型</p>
<p>tinyint(1Byte)</p>
<p>smallint(2Byte)</p>
<p>mediumint(3Byte)</p>
<p>int(4Byte)</p>
<p>bigint(8Byte)</p>
<p>bad case：int(1)/int(11)</p>
<p>(7)字符转化为数字</p>
<p>用int而不是char(15)存储ip</p>
<p>(8)优先使用enum或set</p>
<p>例如：<code>sex</code> enum (‘F’, ‘M’)</p>
<p>(9)避免使用NULL字段</p>
<p>NULL字段很难查询优化；</p>
<p>NULL字段的索引需要额外空间；</p>
<p>NULL字段的复合索引无效；</p>
<p>bad case：</p>
<p><code>name</code> char(32) default null</p>
<p><code>age</code> int not null</p>
<p>good case：</p>
<p><code>age</code> int not null default 0</p>
<p>(10)少用text/blob</p>
<p>varchar的性能会比text高很多；</p>
<p>实在避免不了blob，请拆表；</p>
<p>(11)不在数据库里存图片</p>
<p>(三)索引类规则</p>
<p>(12)谨慎合理使用索引</p>
<p>改善查询、减慢更新；</p>
<p>索引一定不是越多越好(能不加就不加，要加的一定得加)；</p>
<p>覆盖记录条数过多不适合建索引，例如“性别”；</p>
<p>(13)字符字段必须建前缀索引</p>
<p>(14)不在索引做列运算</p>
<p>！！！不只是索引，都不能做列运算吧！！！</p>
<p>bad case：</p>
<p>select id where age +1 = 10;</p>
<p>(15)innodb主键推荐使用自增列；</p>
<p>主键建立聚簇索引；</p>
<p>主键不应该被修改；</p>
<p>字符串不应该做主键；</p>
<p>如果不指定主键，innodb会使用唯一且非空值索引代替；</p>
<p>(16)不用外键</p>
<p>请由程序保证约束；</p>
<p>(四)sql类规则</p>
<p>(17)sql语句尽可能简单</p>
<p>一条sql只能在一个cpu运算；</p>
<p>大语句拆小语句，减少锁时间；</p>
<p>一条大sql可以堵死整个库；</p>
<p>(18)简单的事务</p>
<p>事务时间尽可能短；</p>
<p>bad case：</p>
<p>上传图片事务</p>
<p>(19)避免使用trig/func</p>
<p>触发器、函数不用；</p>
<p>客户端程序取而代之；</p>
<p>(20)不用select *</p>
<p>消耗cpu，io，内存，带宽；</p>
<p>这种程序不具有扩展性；</p>
<p>(21)OR改写为IN()</p>
<p>or的效率是n级别；</p>
<p>in的消息时log(n)级别；</p>
<p>in的个数建议控制在200以内；</p>
<p>select id from t where phone=’159′ or phone=’136′;</p>
<p>=&gt;</p>
<p>select id from t where phone in (’159′, ’136′);</p>
<p>(22)OR改写为UNION</p>
<p>mysql的索引合并很弱智</p>
<p>select id from t where phone = ’159′ or name = ‘john’;</p>
<p>=&gt;</p>
<p>select id from t where phone=’159′</p>
<p>union</p>
<p>select id from t where name=’jonh’</p>
<p>(23)避免负向%</p>
<p>(24)慎用count(*)</p>
<p>(25)同上</p>
<p>(26)limit高效分页</p>
<p>limit越大，效率越低</p>
<p>select id from t limit 10000, 10;</p>
<p>=&gt;</p>
<p>select id from t where id &gt; 10000 limit 10;</p>
<p>(27)使用union all替代union</p>
<p>union有去重开销</p>
<p>(28)少用连接join</p>
<p>(29)使用group by</p>
<p>分组；</p>
<p>自动排序；</p>
<p>(30)请使用同类型比较</p>
<p>(31)使用load data导数据</p>
<p>load data比insert快约20倍；</p>
<p>(32)打散批量更新</p>
<p>(33)新能分析工具</p>
<p>show profile;</p>
<p>mysqlsla;</p>
<p>mysqldumpslow;</p>
<p>explain;</p>
<p>show slow log;</p>
<p>show processlist;</p>
<p>show query_response_time(percona);</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[国外程序员整理的Java资源大全 ]]></title>
        <id>https://kangjn.github.io/post/guo-wai-cheng-xu-yuan-zheng-li-de-java-zi-yuan-da-quan/</id>
        <link href="https://kangjn.github.io/post/guo-wai-cheng-xu-yuan-zheng-li-de-java-zi-yuan-da-quan/">
        </link>
        <updated>2021-04-25T05:40:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="构建">构建</h2>
<p>这里搜集了用来构建应用程序的工具。</p>
<ul>
<li><a href="http://maven.apache.org/">Apache Maven</a>：Maven使用声明进行构建并进行依赖管理，偏向于使用约定而不是配置进行构建。Maven优于Apache Ant。后者采用了一种过程化的方式进行配置，所以维护起来相当困难。</li>
<li><a href="http://www.gradle.org/">Gradle</a>：Gradle采用增量构建。Gradle通过Groovy编程而不是传统的XML声明进行配置。Gradle可以很好地配合Maven进行依赖管理，并且把Ant脚本当作头等公民。</li>
</ul>
<h2 id="字节码操作">字节码操作</h2>
<p>编程操作Java字节码的函数库。</p>
<ul>
<li><a href="http://asm.ow2.org/">ASM</a>：通用底层字节码操作及分析。</li>
<li><a href="http://www.csg.ci.i.u-tokyo.ac.jp/~chiba/javassist/">Javassist</a>：尝试简化字节码编辑。</li>
<li><a href="http://bytebuddy.net/">Byte Buddy</a>：使用“流式API”进一步简化字节码生成。</li>
</ul>
<h2 id="代码分析">代码分析</h2>
<p>软件度量和质量评估工具。</p>
<ul>
<li><a href="http://checkstyle.sourceforge.net/">Checkstyle</a>：对编程规范和标准进行静态分析。</li>
<li><a href="http://findbugs.sourceforge.net/">FindBugs</a>：通过字节码静态分析找出潜在Bug。</li>
<li><a href="http://pmd.sourceforge.net/">PMD</a>：对源代码中不良编程习惯进行分析。</li>
<li><a href="http://www.sonarqube.org/">SonarQube</a>：通过插件集成其它分析组件，提供评估最终结果报告。</li>
</ul>
<h2 id="编译器">编译器</h2>
<p>创建分析器、解释器和编译器的框架。</p>
<ul>
<li><a href="http://www.antlr.org/">ANTLR</a>：功能完备的自顶向下分析复杂框架。</li>
<li><a href="https://javacc.java.net/">JavaCC</a>：相对ANTLR更具体，上手略为简单。支持语法语法超前预测（syntactic lookahead）。</li>
</ul>
<h2 id="持续集成">持续集成</h2>
<p>支持持续集成、测试和应用发布的工具。</p>
<ul>
<li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a>：Atlassian的持续集成（CI）解决方案，包含很多其它产品。</li>
<li><a href="https://circleci.com/">CircleCI</a>：提供托管服务，可免费试用。</li>
<li><a href="https://www.codeship.io/features">Codeship</a>：提供托管服务，提供有限免费计划。</li>
<li><a href="http://www.thoughtworks.com/products/go-continuous-delivery">Go</a>：ThoughtWork开源持续集成解决方案。</li>
<li><a href="http://jenkins-ci.org/">Jenkins</a>：提供基于服务器的部署服务。</li>
<li><a href="http://www.jetbrains.com/teamcity/">TeamCity</a>：JetBrain持续集成方案，提供免费版。</li>
<li><a href="https://travis-ci.org/">Travis</a>：提供托管服务，常用于开源项目。</li>
</ul>
<h2 id="数据库">数据库</h2>
<p>简化数据库交互的工具、库。</p>
<ul>
<li><a href="http://flywaydb.org/">Flyway</a>：使用Java API轻松完成数据库迁移。</li>
<li><a href="http://h2database.com/">H2</a>：小型SQL数据库，以内存操作著称。</li>
<li><a href="http://jdbi.org/">JDBI</a>：便捷的JDBC抽象。</li>
<li><a href="http://www.jooq.org/">jOOQ</a>：基于SQL schema生成类型安全代码。</li>
<li><a href="https://github.com/facebook/presto">Presto</a>：针对大数据的分布式SQL查询引擎。</li>
<li><a href="http://www.querydsl.com/">Querydsl</a>：针对Java的类型安全统一查询。</li>
</ul>
<h2 id="日期和时间">日期和时间</h2>
<p>处理日期和时间的函数库。</p>
<ul>
<li><a href="http://www.joda.org/joda-time/">Joda-Time</a>：Java 8出现之前，它是日期、时间处理的标准函数库。</li>
<li><a href="https://github.com/MenoData/Time4J">Time4J</a>：Java高级日期、时间函数库。</li>
</ul>
<h2 id="依赖注入">依赖注入</h2>
<p>帮助代码实现<a href="http://en.wikipedia.org/wiki/Inversion_of_control">控制反转</a>模式的函数库。</p>
<ul>
<li><a href="http://square.github.io/dagger/">Dagger</a> ：编译期的注入框架，没有使用反射，主要用于Android开发。</li>
<li><a href="https://github.com/google/guice">Guice</a>：轻量级注入框架，功能强大可与Dagger媲美。</li>
</ul>
<h2 id="开发库">开发库</h2>
<p>从基础层次上改进开发流程。</p>
<ul>
<li><a href="https://eclipse.org/aspectj/">AspectJ</a>：面向切面编程扩展，与程序无缝连接。</li>
<li><a href="https://github.com/google/auto">Auto</a>：源代码生成器集合。</li>
<li><a href="http://ssw.jku.at/dcevm/">DCEVM</a>：通过修改JVM，在运行时可无限次重定义已加载的类。OpenJDK 7、8已提供支持，详情可查看<a href="http://dcevm.github.io/">这个分支（fork）</a>。</li>
<li><a href="http://zeroturnaround.com/software/jrebel/">JRebel</a>：商用软件，无需重新部署可即时重新加载代码及配置。</li>
<li><a href="http://projectlombok.org/">Lombok</a>：代码生成器，旨在减少Java冗余代码。</li>
<li><a href="https://github.com/Netflix/RxJava">RxJava</a>：使用JVM中可观察序列，创建异步、基于事件应用程序的函数库。</li>
<li><a href="https://github.com/spring-projects/spring-loaded">Spring Loaded</a>：另一个JVM类重载代理。</li>
<li><a href="http://vertx.io/">vert.x</a>：JVM多语言事件驱动应用框架。</li>
</ul>
<h2 id="分布式应用">分布式应用</h2>
<p>用来开发分布式、具有容错性应用程序的函数库和框架。</p>
<ul>
<li><a href="http://akka.io/">Akka</a>：构建并发、分布式和具有容错功能的事件驱动应用程序所需的工具包和运行时。</li>
<li><a href="http://storm.incubator.apache.org/">Apache Storm</a>：分布式实时计算系统。</li>
<li><a href="http://zookeeper.apache.org/">Apache ZooKeeper</a>：为大型分布式系统，使用分布式配置、同步和命名注册提供协调服务。</li>
<li><a href="http://hazelcast.org/">Hazelcast</a>：分布式、高可扩展性内存网格。</li>
<li><a href="https://github.com/Netflix/Hystrix">Hystrix</a>：为分布式系统提供延迟和容错处理。</li>
<li><a href="http://www.jgroups.org/">JGroups</a>：一组提供可靠消息传输的工具包，可用来创建集群。集群中的节点可互相发送消息。</li>
<li><a href="http://www.paralleluniverse.co/quasar/">Quasar</a>：为JVM提供轻量级线程和Actor。</li>
</ul>
<h2 id="发布">发布</h2>
<p>使用本机格式分发Java应用程序的工具。</p>
<ul>
<li><a href="https://bintray.com/">Bintray</a>：对二进制发布进行版本控制，可与Maven或Gradle配合使用。</li>
<li><a href="http://izpack.org/">IzPack</a>：为跨平台部署建立授权工具。</li>
<li><a href="http://launch4j.sourceforge.net/">Launch4j</a>：将JAR包装为小巧的Windows可执行文件。</li>
<li><a href="https://github.com/libgdx/packr#packr">packr</a>：将程序JAR、资源和JVM打包成Windows、Linux和Mac OS X的本机文件。</li>
</ul>
<h2 id="文档处理">文档处理</h2>
<p>用来处理Office格式文档的函数库。</p>
<ul>
<li><a href="http://poi.apache.org/">Apache POI</a>：支持OOXML （XLSX、DOCX、PPTX）以及 OLE2 （XLS, DOC or PPT）格式的文档。</li>
<li><a href="http://www.jopendocument.org/">jOpenDocument</a>：处理OpenDocument格式文档。</li>
</ul>
<h2 id="游戏开发">游戏开发</h2>
<p>游戏开发框架。</p>
<ul>
<li><a href="http://jmonkeyengine.org/">jMonkeyEngine</a>：支持现代3D开发的游戏引擎。</li>
<li><a href="http://libgdx.badlogicgames.com/">libGDX</a>：全面的跨平台高级开发框架。</li>
<li><a href="http://lwjgl.org/">LWJGL</a>：抽象了OpenGL、CL、AL等函数库的健壮框架。</li>
</ul>
<h2 id="gui">GUI</h2>
<p>用来创建现代图形用户界面的函数库。</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/overview/javafx-overview-2158620.html">JavaFX</a>：Swing的继承者。</li>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/javafxscenebuilder-info-2157684.html">Scene Builder</a>：JavaFX虚拟布局工具。</li>
</ul>
<h2 id="高性能">高性能</h2>
<p>与高性能计算有关的资源，包括集合以及很多具体功能的函数库。</p>
<ul>
<li><a href="http://lmax-exchange.github.io/disruptor/">Disruptor</a>：线程间消息函数库。</li>
<li><a href="http://fastutil.di.unimi.it/">fastutil</a>：快速紧凑的Java类型安全集合。</li>
<li><a href="https://github.com/goldmansachs/gs-collections">GS Collections</a>：受Smalltalk启发的集合框架。</li>
<li><a href="https://github.com/OpenHFT/hftc">hftc</a>：Hash set和hash map。</li>
<li><a href="http://labs.carrotsearch.com/hppc.html">HPPC</a>：基本类型集合。</li>
<li><a href="http://javolution.org/">Javolution</a>：针对实时嵌入式系统的函数库。</li>
<li><a href="http://trove.starlight-systems.com/">Trove</a>：基本类型集合。</li>
</ul>
<h2 id="ide">IDE</h2>
<p>视图简化开发的集成开发环境。</p>
<ul>
<li><a href="http://www.eclipse.org/">Eclipse</a>：后台做了很多工作，以其丰富插件著称。</li>
<li><a href="http://www.jetbrains.com/idea/">IntelliJ IDEA</a>：支持很多JVM语言，为Android开发提供了很多不错的选项。其商业版本主要面向企业用户。</li>
<li><a href="https://netbeans.org/">NetBeans</a>：集成了很多Java SE和Java EE特性，包括数据库访问、服务器、HTML5以及AngularJS。</li>
</ul>
<h2 id="图像处理">图像处理</h2>
<p>用来帮助创建、评估或操作图形的函数库。</p>
<ul>
<li><a href="http://square.github.io/picasso/">Picasso</a>：Android下载图像和图像缓存函数库。</li>
<li><a href="https://github.com/zxing/zxing">ZXing</a>：多种格式的一维、二维条形码处理函数库。</li>
</ul>
<h2 id="json">JSON</h2>
<p>简化JSON处理的函数库。</p>
<ul>
<li><a href="https://code.google.com/p/google-gson/">Gson</a>：将Java对象序列化为JSON及反向操作。使用时提供了很好的性能。</li>
<li><a href="http://wiki.fasterxml.com/JacksonHome">Jackson</a>：与GSON类似，但如果需要频繁初始化Jackson库会带来性能问题。</li>
</ul>
<h2 id="jvm和jdk">JVM和JDK</h2>
<p>目前的JVM、JDK实现。</p>
<ul>
<li><a href="https://jdk9.java.net/">JDK 9</a>：JDK 9早期访问版本。</li>
<li><a href="http://openjdk.java.net/">OpenJDK</a>：开源实现。</li>
</ul>
<h2 id="日志">日志</h2>
<p>记录应用程序的日志函数库。</p>
<ul>
<li><a href="http://logging.apache.org/log4j/">Apache Log4j 2</a>：对之前版本进行了完全重写。现在的版本具备一个强大的插件和配置架构。</li>
<li><a href="http://www.elasticsearch.org/overview/kibana/">kibana</a>：对日志进行分析并进行可视化。</li>
<li><a href="http://logback.qos.ch/">Logback</a>：Log4j原班人马作品。被证明是一个强健的日志函数库，通过Groovy提供了很多有意思的配置选项。</li>
<li><a href="http://logstash.net/">logstash</a>：日志文件管理工具。</li>
<li><a href="http://www.slf4j.org/">SLF4J</a>：日志抽象层，需要与某个具体日志框架配合使用。</li>
</ul>
<h2 id="机器学习">机器学习</h2>
<p>提供具体统计算法的工具。其算法可从数据中学习。</p>
<ul>
<li><a href="http://hadoop.apache.org/">Apache Hadoop</a>：对商用硬件集群上大规模数据存储和处理的开源软件框架。</li>
<li><a href="https://mahout.apache.org/">Apache Mahout</a>：专注协同过滤、聚类和分类的可扩展算法。</li>
<li><a href="http://spark.apache.org/">Apache Spark</a>：开源数据分析集群计算框架。</li>
<li><a href="http://0xdata.github.io/h2o/">h2o</a>：用作大数据统计的分析引擎。</li>
<li><a href="http://www.cs.waikato.ac.nz/ml/weka/">Weka</a>：用作数据挖掘的算法集合，包括从预处理到可视化的各个层次。</li>
</ul>
<h2 id="消息">消息</h2>
<p>在客户端之间进行消息传递，确保协议独立性的工具。</p>
<ul>
<li><a href="http://activemq.apache.org/">Apache ActiveMQ</a>：实现JMS的开源消息代理（broker），可将同步通讯转为异步通讯。</li>
<li><a href="http://kafka.apache.org/">Apache Kafka</a>：高吞吐量分布式消息系统。</li>
<li><a href="http://hornetq.jboss.org/">JBoss HornetQ</a>：清晰、准确、模块化且方便嵌入的消息工具。</li>
<li><a href="https://github.com/zeromq/jeromq">JeroMQ</a>：ZeroMQ的纯Java实现。</li>
</ul>
<h2 id="其它">其它</h2>
<p>其它资源。</p>
<ul>
<li><a href="https://github.com/iluwatar/java-design-patterns">Design Patterns</a>：实现并解释了最常见的<a href="http://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=importnew-23&amp;linkCode=as2&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001130JN8">设计模式</a>。</li>
<li><a href="https://github.com/google/jimfs">Jimfs</a>：内存文件系统。</li>
<li><a href="https://code.google.com/p/lanterna/">Lanterna</a>：类似curses的简单console文本GUI函数库。</li>
<li><a href="http://lightadmin.org/">LightAdmin</a>：可插入式CRUD UI函数库，可用于快速应用开发。</li>
<li><a href="http://metrics.codahale.com/">Metrics</a>：创建自己的软件度量或者为支持框架添加度量信息，通过JMX或HTTP进行发布或者发送到数据库。</li>
<li><a href="http://openrefine.org/">OpenRefine</a>：用来处理混乱数据的工具，包括清理、转换、使用Web Service进行扩展并将其关联到数据库。</li>
<li><a href="http://www.robovm.org/">RoboVM</a>：Java编写原生iOS应用。</li>
</ul>
<h2 id="自然语言处理">自然语言处理</h2>
<p>用来专门处理文本的函数库。</p>
<ul>
<li><a href="https://opennlp.apache.org/">Apache OpenNL</a>：处理类似分词等常见任务的工具。</li>
<li><a href="http://nlp.stanford.edu/software/corenlp.shtml">CoreNLP</a>：斯坦佛的CoreNLP提供了一组基础工具，可以处理类似标签、实体名识别和情感分析这样的任务。</li>
<li><a href="http://alias-i.com/lingpipe/">LingPipe</a>：一组可以处理各种任务的工具集，支持POS标签、情感分析等。</li>
<li><a href="http://mallet.cs.umass.edu/">Mallet</a>：统计学自然语言处理、文档分类、聚类、主题建模等。</li>
</ul>
<h2 id="网络">网络</h2>
<p>网络编程函数库。</p>
<ul>
<li><a href="http://netty.io/">Netty</a>：构建高性能网络应用程序开发框架。</li>
<li><a href="http://square.github.io/okhttp/">OkHttp</a> ：一个Android和Java应用的HTTP+SPDY客户端。</li>
</ul>
<h2 id="orm">ORM</h2>
<p>处理对象持久化的API。</p>
<ul>
<li><a href="https://www.eclipse.org/eclipselink/">EclipseLink</a>：支持许多持久化标准，JPA、JAXB、JCA和SDO。</li>
<li><a href="http://hibernate.org/orm/">Hibernate</a>：广泛使用、强健的持久化框架。Hibernate的技术社区非常活跃。</li>
<li><a href="http://ebean-orm.github.io/">Ebean</a>：支持快速数据访问和编码的ORM框架。</li>
</ul>
<h2 id="pdf">PDF</h2>
<p>用来帮助创建PDF文件的资源。</p>
<ul>
<li><a href="http://xmlgraphics.apache.org/fop/">Apache FOP</a>：从XSL-FO创建PDF。</li>
<li><a href="http://pdfbox.apache.org/">Apache PDFBox</a>：用来创建和操作PDF的工具集。</li>
<li><a href="http://dynamicreports.org/">DynamicReports</a>：JasperReports的精简版。</li>
<li><a href="http://itextpdf.com/">iText</a>：一个易于使用的PDF函数库，用来编程创建PDF文件。注意，用于商业用途时需要许可证。</li>
<li><a href="http://community.jaspersoft.com/project/jasperreports-library">JasperReports</a>：一个复杂的报表引擎。</li>
</ul>
<h2 id="rest框架">REST框架</h2>
<p>用来创建RESTful 服务的框架。</p>
<ul>
<li><a href="https://dropwizard.github.io/dropwizard/">Dropwizard</a>：偏向于自己使用的Web框架。用来构建Web应用程序，使用了Jetty、Jackson、Jersey和Metrics。</li>
<li><a href="https://jersey.java.net/">Jersey</a>：JAX-RS参考实现。</li>
<li><a href="http://resteasy.jboss.org/">RESTEasy</a>：经过JAX-RS规范完全认证的可移植实现。</li>
<li><a href="http://square.github.io/retrofit/">Retrofit</a>：一个Java类型安全的REST客户端。</li>
<li><a href="http://www.sparkjava.com/">Spark</a>：受到Sinatra启发的Java REST框架。</li>
<li><a href="https://helloreverb.com/developers/swagger">Swagger</a>：Swagger是一个规范且完整的框架，提供描述、生产、消费和可视化RESTful Web Service。</li>
</ul>
<h2 id="科学">科学</h2>
<p>用于科学计算和分析的函数库。</p>
<ul>
<li><a href="http://jwork.org/scavis/">SCaVis</a>：用于科学计算、数据分析和数据可视化环境。</li>
</ul>
<h2 id="搜索">搜索</h2>
<p>文档索引引擎，用于搜索和分析。</p>
<ul>
<li><a href="http://lucene.apache.org/solr/">Apache Solr</a> ：一个完全的企业搜索引擎。为高吞吐量通信进行了优化。</li>
<li><a href="http://www.elasticsearch.org/">Elasticsearch</a>：一个分布式、支持多租户（multitenant）全文本搜索引擎。提供了RESTful Web接口和无schema的JSON文档。</li>
</ul>
<h2 id="安全">安全</h2>
<p>用于处理安全、认证、授权或会话管理的函数库。</p>
<ul>
<li><a href="http://shiro.apache.org/">Apache Shiro</a>：执行认证、授权、加密和会话管理。</li>
<li><a href="http://cryptomator.org/">Cryptomator</a>：在云上进行客户端跨平台透明加密。</li>
<li><a href="http://keycloak.jboss.org/">Keycloak</a>：为浏览器应用和RESTful Web Service集成SSO和IDM。目前还处于beta版本，但是看起来非常有前途。</li>
<li><a href="http://picketlink.org/">PicketLink</a>：PicketLink是一个针对Java应用进行安全和身份认证管理的大型项目（Umbrella Project）。</li>
<li><a href="http://projects.spring.io/spring-security/">Spring Security</a>：专注认证、授权和多维度攻击防护框架。</li>
</ul>
<h2 id="序列化">序列化</h2>
<p>用来高效处理序列化的函数库。</p>
<ul>
<li><a href="https://github.com/google/flatbuffers">FlatBuffers</a>：序列化函数库，高效利用内存，无需解包和解析即可高效访问序列化数据。</li>
<li><a href="https://github.com/EsotericSoftware/kryo">Kryo</a>：快速和高效的对象图形序列化框架。</li>
<li><a href="https://github.com/msgpack/msgpack-java">MessagePack</a>：一种高效的二进制序列化格式。</li>
</ul>
<h2 id="服务器">服务器</h2>
<p>用来部署应用程序的服务器。</p>
<ul>
<li><a href="http://tomcat.apache.org/">Apache Tomcat</a>：针对Servlet和JSP的应用服务器，健壮性好且适用性强。</li>
<li><a href="http://tomee.apache.org/">Apache TomEE</a>：Tomcat加Java EE。</li>
<li><a href="https://glassfish.java.net/">GlassFish</a>：Java EE开源参考实现，由Oracle资助开发。</li>
<li><a href="http://www.eclipse.org/jetty/">Jetty</a>：轻量级、小巧的应用服务器，通常会嵌入到项目中。</li>
<li><a href="http://www.wildfly.org/">WildFly</a>：之前被称作JBoss，由Red Hat开发。支持很多Java EE功能。</li>
</ul>
<h2 id="模版引擎">模版引擎</h2>
<p>对模板中表达式进行替换的工具。</p>
<ul>
<li><a href="http://velocity.apache.org/">Apache Velocity</a>：提供HTML页面模板、email模板和通用开源代码生成器模板。</li>
<li><a href="http://freemarker.org/">FreeMarker</a>：通用模板引擎，不需要任何重量级或自己使用的依赖关系。</li>
<li><a href="http://jknack.github.io/handlebars.java/">Handlebars.java</a>：使用Java编写的模板引擎，逻辑简单，支持语义扩展（semantic Mustache）。</li>
<li><a href="https://jsp.java.net/">JavaServer Pages</a>：通用网站模板，支持自定义标签库。</li>
<li><a href="http://www.thymeleaf.org/">Thymeleaf</a>：旨在替换JSP，支持XML文件。</li>
</ul>
<h2 id="测试">测试</h2>
<p>测试内容从对象到接口，涵盖性能测试和基准测试工具。</p>
<ul>
<li><a href="http://jmeter.apache.org/">Apache JMeter</a>：功能性测试和性能评测。</li>
<li><a href="http://arquillian.org/">Arquillian</a>：集成测试和功能行测试平台，集成Java EE容器。</li>
<li><a href="http://joel-costigliola.github.io/assertj/">AssertJ</a>：支持流式断言提高测试的可读性。</li>
<li><a href="http://openjdk.java.net/projects/code-tools/jmh/">JMH</a>：JVM微基准测试工具。</li>
<li><a href="http://junit.org/">JUnit</a>：通用测试框架。</li>
<li><a href="http://code.google.com/p/mockito/">Mockito</a>：在自动化单元测试中创建测试对象，为TDD或BDD提供支持。</li>
<li><a href="http://docs.seleniumhq.org/">Selenium</a>：为Web应用程序提供可移植软件测试框架。</li>
<li><a href="http://selenide.org/">Selenide</a>：为Selenium提供精准的周边API，用来编写稳定且可读的UI测试。</li>
<li><a href="http://testng.org/">TestNG</a> ：测试框架。</li>
<li><a href="http://visualvm.java.net/">VisualVM</a>：提供可视化方式查看运行中的应用程序信息。</li>
</ul>
<h2 id="工具类">工具类</h2>
<p>通用工具类函数库。</p>
<ul>
<li><a href="http://commons.apache.org/">Apache Commons</a>：提供各种用途的函数，比如配置、验证、集合、文件上传或XML处理等。</li>
<li><a href="http://code.google.com/p/guava-libraries/">Guava</a>：集合、缓存、支持基本类型、并发函数库、通用注解、字符串处理、I/O等。</li>
<li><a href="http://www.javatuples.org/">javatuples</a>：正如名字表示的那样，提供tuple支持。尽管目前tuple的概念还有留有争议。</li>
</ul>
<h2 id="网络爬虫">网络爬虫</h2>
<p>用于分析网站内容的函数库。</p>
<ul>
<li><a href="http://nutch.apache.org/">Apache Nutch</a> ：可用于生产环境的高度可扩展、可伸缩的网络爬虫。</li>
<li><a href="https://code.google.com/p/crawler4j/">Crawler4j</a>：简单的轻量级爬虫。</li>
<li><a href="http://jsoup.org/">JSoup</a> ：刮取、解析、操作和清理HTML。</li>
</ul>
<h2 id="web框架">Web框架</h2>
<p>用于处理Web应用程序不同层次间通讯的框架。</p>
<ul>
<li><a href="http://tapestry.apache.org/">Apache Tapestry</a>：基于组件的框架，使用Java创建动态、强健的、高度可扩展的Web应用程序。</li>
<li><a href="http://wicket.apache.org/">Apache Wicket</a>：基于组件的Web应用框架，与Tapestry类似带有状态显示GUI。</li>
<li><a href="http://www.gwtproject.org/">Google Web Toolkit</a>：一组Web开发工具集，包含在客户端将Java代码转为JavaScript的编译器、XML解析器、RCP API、JUnit集成、国际化支持和GUI控件。</li>
<li><a href="https://grails.org/">Grails</a>：Groovy框架，旨在提供一个高效开发环境，使用约定而非配置、没有XML并支持混入（mixin）。</li>
<li><a href="http://www.playframework.com/">Play</a>： 使用约定而非配置，支持代码热加载并在浏览器中显示错误。</li>
<li><a href="http://primefaces.org/">PrimeFaces</a>：JSF框架，提供免费版和带技术支持的商业版。包含一些前端组件。</li>
<li><a href="http://projects.spring.io/spring-boot/">Spring Boot</a>：微框架，简化了Spring新程序的开发过程。</li>
<li><a href="http://projects.spring.io/spring-framework/">Spring</a>：旨在简化Java EE的开发过程，提供依赖注入相关组件并支持面向切面编程。</li>
<li><a href="https://vaadin.com/">Vaadin</a>：基于GWT构建的事件驱动框架。使用服务端架构，客户端使用Ajax。</li>
<li><a href="http://www.ninjaframework.org/">Ninja</a>：Java全栈Web开发框架。非常稳固、快速和高效。</li>
<li><a href="http://www.ratpack.io/">Ratpack</a>：一组Java开发函数库，用于构建快速、高效、可扩展且测试完备的HTTP应用程序。</li>
</ul>
<h2 id="资源">资源</h2>
<h2 id="社区">社区</h2>
<p>活跃的讨论区。</p>
<ul>
<li><a href="http://www.reddit.com/r/java">r/java</a>：Java社区的Subreddit。</li>
<li><a href="http://stackoverflow.com/questions/tagged/java">stackoverflow</a>：问答平台。</li>
</ul>
<h2 id="有影响的书籍">有影响的书籍</h2>
<p>具有广泛影响且值得阅读的Java经典书籍。</p>
<ul>
<li><a href="http://www.amazon.cn/gp/product/0321356683/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=0321356683&amp;linkCode=as2&amp;tag=vastwork-23">Effective Java (2nd Edition)</a></li>
<li><a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601">Java Concurrency in Practice</a> | <a href="http://www.amazon.cn/gp/product/B0077K9XHW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0077K9XHW&amp;linkCode=as2&amp;tag=vastwork-23">Java并发编程实战</a></li>
<li><a href="http://www.amazon.cn/gp/product/B0011C3CVA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011C3CVA&amp;linkCode=as2&amp;tag=vastwork-23">Thinking in Java</a> | <a href="http://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=vastwork-23">中文版</a></li>
</ul>
<h2 id="播客">播客</h2>
<p>可以一边编程一边听的东西。</p>
<ul>
<li><a href="http://www.javaposse.com/">The Java Posse</a></li>
</ul>
<h2 id="twitter">Twitter</h2>
<p>值得关注的帐号。</p>
<ul>
<li><a href="https://twitter.com/AdamBien/">Adam Bien</a>：自由职业者、作家、JavaONE明星演讲者、顾问、Java Champion。</li>
<li><a href="https://twitter.com/agoncal/">Antonio Goncalves</a>：Java Champion、JUG Leader、Devoxx France、Java EE 6/7、JCP、作家。</li>
<li><a href="https://twitter.com/arungupta/">Arun Gupta</a>：Java Champion、JavaONE明星演讲者、JUG Leader、Devoxx4Kids成员、Red Hatter。</li>
<li><a href="https://twitter.com/brunoborges">Bruno Borges</a>：Oracle产品经理、Java Jock。</li>
<li><a href="https://twitter.com/edburns">Ed Burns</a>：Oracle技术团队顾问。</li>
<li><a href="https://twitter.com/baeldung">Eugen Paraschiv</a>：Spring安全课程作者。</li>
<li><a href="https://twitter.com/JavaFXpert">James Weaver</a>：Java、JavaFX、IoT开发者、作者和演讲者。</li>
<li><a href="https://twitter.com/Java_EE/">Java EE</a>：Java EE Twitter官方账号。</li>
<li><a href="https://twitter.com/Oraclejavamag">Java Magazine</a>：Java杂志官方账号。</li>
<li><a href="https://twitter.com/javanetbuzz/">Java.net</a>：Java.net官方账号。</li>
<li><a href="https://twitter.com/java/">Java</a>：Java Twitter官方账号。</li>
<li><a href="https://twitter.com/javinpaul">Javin Paul</a>：知名Java博客作者。</li>
<li><a href="https://twitter.com/lukaseder">Lukas Eder</a>：Data Geekery（jOOQ）创始人兼CEO。</li>
<li><a href="https://twitter.com/mariofusco">Mario Fusco</a>：RedHatter、JUG协调、活跃讲师和作者。</li>
<li><a href="https://twitter.com/mreinhold">Mark Reinhold</a>：Oracle首席架构师、Java平台开发组。</li>
<li><a href="https://twitter.com/karianna">Martijn Verburg</a>：London JUG co-leader、演讲者、作家、Java Champion等。</li>
<li><a href="https://twitter.com/OpenJDK">OpenJDK</a>：OpenJDK官方账号。</li>
<li><a href="https://twitter.com/reza_rahman">Reza Rahman</a>：Java EE、GlassFish、WebLogic传道者、作家、演讲者、开源黑客。</li>
<li><a href="https://twitter.com/sjmaple">Simon Maple</a>：Java Champion、virtualJUG创始人、LJC leader、RebelLabs作者。</li>
<li><a href="https://twitter.com/jodastephen">Stephen Colebourne</a>： Java Champion、演讲者。</li>
<li><a href="https://twitter.com/kablosna">Tim Boudreau</a>：作家、NetBeans大牛。</li>
<li><a href="https://twitter.com/trisha_gee">Trisha Gee</a>：Java Champion、演讲者。</li>
</ul>
<h2 id="网站">网站</h2>
<p>值得阅读的网站。</p>
<ul>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javaguide.html">Google Java Style</a></li>
<li><a href="http://www.infoq.com/">InfoQ</a></li>
<li><a href="http://www.javacodegeeks.com/">Java Code Geeks</a></li>
<li><a href="http://java.net/">Java.net</a></li>
<li><a href="http://java.dzone.com/">Javalobby</a></li>
<li><a href="http://www.javaworld.com/">JavaWorld</a></li>
<li><a href="http://zeroturnaround.com/rebellabs/">RebelLabs</a></li>
<li><a href="http://www.javaspecialists.eu/archive/archive.jsp">The Java Specialist’ Newsletter</a></li>
<li><a href="http://www.theserverside.com/">TheServerSide.com</a></li>
<li><a href="http://www.thoughts-on-java.org/">Thoughts On Java</a></li>
<li><a href="http://www.importnew.com/">ImportNew</a>（ImportNew 专注 Java 技术）</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在自己的应用中加入支付功能]]></title>
        <id>https://kangjn.github.io/post/zai-zi-ji-de-ying-yong-zhong-jia-ru-zhi-fu-gong-neng/</id>
        <link href="https://kangjn.github.io/post/zai-zi-ji-de-ying-yong-zhong-jia-ru-zhi-fu-gong-neng/">
        </link>
        <updated>2021-04-25T05:31:20.000Z</updated>
        <content type="html"><![CDATA[<p>在自己的应用中如何加入对支付功能的支持。</p>
<p><strong>1、项目名称：龙果支付系统 roncoo-pay</strong></p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/047554.jpg" alt="1561286741806047554" loading="lazy"></figure>
<p>**项目简介：**龙果支付系统核心目标是汇聚所有主流支付渠道，打造一款轻量、便捷、易用，且集支付、资金对账、资金清结算于一体的支付系统，满足互联网业务系统的收款和业务资金管理需求。</p>
<p>主要特点：</p>
<ul>
<li>具备支付系统通用的支付、对账、清算、资金账户管理、支付订单管理等功能；</li>
<li>目前已接通“支付宝即时到账”和“微信扫码支付”通道；</li>
<li>支持直连和间连两种支付模式，任君选择；</li>
<li>通过支付网关，业务系统可以轻松实现统一支付接入；</li>
<li>搭配运营后台，支付数据的监控和管理可以兼得；</li>
<li>配套完善的系统使用文档，可轻松嵌入任何需要支付的场景；</li>
</ul>
<p>**项目地址：**https://gitee.com/roncoocom/roncoo-pay</p>
<p><strong>2、项目名称：聚合支付系统 XxPay</strong></p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/025826.jpg" alt="" loading="lazy"></figure>
<p>**项目简介：**XxPay 聚合支付使用 Java 开发，包括spring-cloud、dubbo、spring-boot三个架构版本，已接入微信、支付宝等主流支付渠道，可直接用于生产环境。</p>
<p>目前已经接入支付渠道：微信(公众号支付、扫码支付、APP支付、H5支付)、支付宝(电脑网站支付、手机网站支付、APP支付、当面付)。</p>
<p>**项目地址：**https://gitee.com/jmdhappy/xxpay-master</p>
<p><strong>3、项目名称：常用支付接口 IJPay</strong></p>
<p>**项目简介：**IJPay 封装了微信支付、支付宝支付、银联支付常用的支付方式以及各种常用的接口。不依赖任何第三方 mvc 框架，仅仅作为工具使用简单快速完成支付模块的开发，可轻松嵌入到任何系统里。</p>
<p><strong>项目地址：https://gitee.com/javen205/IJPay</strong></p>
<p><strong>4、项目名称：基于 Java 的支付开发工具包</strong></p>
<p>**项目简介：**优雅的轻量级支付模块，集成微信支付、支付宝、银联、友店、富友、跨境支付等。付与业务完全剥离，简单几行代码即可实现支付，简单快速完成支付模块的开发，可轻松嵌入到任何系统里。</p>
<p>目前仅是一个开发工具包（即SDK），只提供简单 Web 实现，建议使用 maven 或 gradle 引用本项目即可使用本 SDK 提供的各种支付相关的功能。</p>
<p>**项目地址：**https://gitee.com/egzosn/pay-java-parent</p>
<p><strong>5、项目名称：轻量级支付系统 Fastpay</strong></p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/087807.jpg" alt="" loading="lazy"></figure>
<p>**项目简介：**Fastpay 的目标是打造一款开源的、轻量级的、微服务化的、可共私有云部署的、可定制化的集成聚合支付和资金清结算于一体的统一支付系统，满足互联网企业业务系统的收款和资金处理等需求。</p>
<ul>
<li>在支付系统上实施微服务架构，使用最流行的Spring Cloud做服务化。</li>
<li>设计天生可伸缩的数据存储，直接使用分库分表。</li>
<li>使用缓存进行加速交易过程，提高用户体验。</li>
<li>将回调通知、入账等异步化，提高用户响应能力。</li>
<li>使用分布式定时任务系统将任务调度与交易隔离。</li>
<li>使用当前最先进的单元化架构实现可水平伸缩。</li>
</ul>
<p>**项目地址：**https://gitee.com/robertleepeak/fastpay</p>
<p><strong>6、项目名称：支付 SDK 扩展包 easyPay</strong></p>
<p>**项目简介：**本项目根据支付宝、微信最新 API 开发而成，高度抽象的类，免去各种拼 json 与 xml 的痛苦；符合 PSR  标准，你可以各种方便的与你的框架集成；文件结构清晰易理解，可以随心所欲添加本项目中没有的支付网关；方法使用更优雅，不必再去研究那些奇怪的的方法名或者类名是做啥用的。</p>
<p>**项目地址：**https://gitee.com/yansongda/pay</p>
<p><strong>7、项目名称：互联网金融支付系统 aaden-pay</strong></p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/024867.jpg" alt="" loading="lazy"></figure>
<p>**项目简介：**基于互联网金融理财环境下产生的支付系统，特点为：</p>
<ul>
<li>同卡进出，用户先实名绑定银行卡，后交易，不支持手机扫码交易。</li>
<li>提供统一的支付框架，只需少量代码就可快速接入新渠道，提供一个稳定的支付解决方法，节约程序员时间。</li>
</ul>
<p>**项目地址：**https://gitee.com/aaden/aaden-pay</p>
<p><strong>8、项目名称：基于 PHP 的支付 SDK</strong></p>
<p>**项目简介：**Payment 是一个 PHP 版本的支付聚合第三方 SDK，集成了微信支付、支付宝支付、招商一网通支付。提供统一的调用接口，方便快速接入各种支付、查询、退款、转账能力。</p>
<p>**项目地址：**https://gitee.com/helei112g/payment</p>
<p><strong>9、项目名称：基于 .NET Core 的支付 SDK 集</strong></p>
<p>**项目简介：**本项目是基于 .NET Core / ASP.NET Core 开发的跨平台支付 SDK 集，简化了 API 调用及相关通知的处理流程。</p>
<p>目前支持：支付宝(Alipay)、微信支付(WeChatPay)、QQ钱包(QPay)、京东支付(JDPay)、连连支付(LianLianPay)、银联支付(UnionPay)。</p>
<p>**项目地址：**https://gitee.com/Essensoft/Payment</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在VS code中提交项目到码云]]></title>
        <id>https://kangjn.github.io/post/zai-vs-code-zhong-ti-jiao-xiang-mu-dao-ma-yun/</id>
        <link href="https://kangjn.github.io/post/zai-vs-code-zhong-ti-jiao-xiang-mu-dao-ma-yun/">
        </link>
        <updated>2021-04-23T05:23:04.000Z</updated>
        <content type="html"><![CDATA[<p>在VS code中提交项目</p>
<p>首先在VS code中进入到要上传的项目内，比如我的是Angular项目，就是这个样子：</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/408314.png" alt="" loading="lazy"></figure>
<p>然后依次执行如下语句：<br>
初始化：<br>
git init<br>
定向到你的代码仓库：<br>
git remote add origin https://gitee.com/用户个性地址/HelloGitee.git<br>
上传并添加评论：<br>
git add .<br>
git commit -m &quot;第一次提交&quot;<br>
git push origin master ——这里注意，如果你项目中有redme文件而且在码云网站上创建仓库时也生成了redme文件话要加上 -f</p>
<p>将代码放到码云<br>
到码云里新建一个仓库，完成后码云会有一个命令教程按上面的来就行了<br>
码云中的使用教程：</p>
<p>Git 全局设置:<br>
git config --global user.name &quot;ASxx&quot;<br>
git config --global user.email &quot;123456789@qq.com&quot;</p>
<p>创建 git 仓库:</p>
<p>mkdir wap // 项目在本地的路径<br>
cd wap<br>
git init<br>
touch README.md<br>
git add README.md<br>
git commit -m &quot;first commit&quot;<br>
git remote add origin https://git.oschina.net/name/package.git  // 远程仓库地址<br>
git push -u origin master</p>
<p>已有项目：<br>
cd existing_git_repo<br>
git remote add origin https://git.oschina.net/name/package.git<br>
git push -u origin master<br>
下面说下详细的本地操作步骤：</p>
<p><strong>1、用vs打开你的项目文件夹</strong></p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/980552.png" alt="" loading="lazy"></figure>
<p><strong>2、配置git</strong></p>
<p>打开Git Bash输入以下命令</p>
<p>如果还没输入全局配置就先把这个全局配置输入上去</p>
<p>Git 全局设置:</p>
<p>git config --global user.name &quot;ASxx&quot;<br>
git config --global user.email &quot;123456789@qq.com&quot;</p>
<p>然后开始做提交代码到码云的配置<br>
cd d:/wamp/www/mall360/wap              //首先指定到你的项目目录下<br>
git init<br>
touch README.md<br>
git add README.md<br>
git commit -m &quot;first commit&quot;<br>
git remote add origin https://git.oschina.net/name/package.git   //用你仓库的url<br>
git push -u origin master  //提交到你的仓库<br>
正常情况下上面的命令执行完成后，本地文件夹会有一个隐藏的.git文件夹，云端你的仓库里应该会有一个README.md文件。</p>
<ul>
<li><strong>3、在vscode中提交代码到仓库</strong></li>
</ul>
<p>回到vs code打开git工作区就会看到所有代码显示在这里</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/939768.png" alt="img" loading="lazy"></figure>
<p>点击+号，把所有文件提交到暂存区。</p>
<p>然后打开菜单选择--提交已暂存的</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/104252.png" alt="img" loading="lazy"></figure>
<p>然后按提示随便在消息框里输入一个消息，再按ctrl+enter提交</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/778020.png" alt="img" loading="lazy"></figure>
<p>然后把所有暂存的代码push云端，</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/866213.png" alt="img" loading="lazy"></figure>
<p>点击后，会弹出让你输入账号密码，把你托管平台的账号密码输入上去就行了。。。</p>
<p>不出问题的话你整个项目就会提交到云端上了。</p>
<p>在vs中每次更新代码都会要输入账号密码，方便起见，可以配置一下让GIT记住密码账号。</p>
<pre><code>git config --global credential.helper store   //在Git Bash输入这个命令就可以了
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[刻在骨子里的“教养”]]></title>
        <id>https://kangjn.github.io/post/ke-zai-gu-zi-li-de-jiao-yang/</id>
        <link href="https://kangjn.github.io/post/ke-zai-gu-zi-li-de-jiao-yang/">
        </link>
        <updated>2021-04-22T09:24:25.000Z</updated>
        <content type="html"><![CDATA[<p>不责人小过，不发人阴私，不念人旧恶。<br>
前苏联教育家苏霍姆林斯基曾说：</p>
<p>“在人类心灵的花园中，最质朴、最美丽和最平凡的花朵，是人的教养。”</p>
<p>那什么是教养？</p>
<p>教养是一个人文化品德的修养，是一个人从小就习得的一种规矩，是待人接物处事的一种敬重态度。</p>
<p>丰一吟在《回忆父亲丰子恺》中说：<br>
“生而养之，养而教之。教养，是一个家庭传承给孩子的最好礼物。”</p>
<p>【01】教养，是教育和养成。</p>
<p>教养，是教育和养成，是文化的传承和后天学习的规范。</p>
<p>一个人的教养，不是先天就拥有的，而是后天的学习教育和周身氛围所养成的良好品质和行为习惯，是经过人生历练和修行所沉淀下的德性。</p>
<p>当我们呱呱坠地，生而一张白纸，往后一生的精彩都由自己去涂鸦，而一个人的教养则以自身的学习和规范养成的。</p>
<p>人都说父母是孩子的第一任老师，而家庭是孩子成长的摇篮。</p>
<p>家庭环境是孩子健康成长的基本因素，而父母的品行更是影响孩子的教养。</p>
<p>《三字经》中言，养不教，父之过；教不严，师之惰，人若没有教养，便是父母老师的不称职。</p>
<p>“昔孟母，择邻处”只为孩子远离那些不良因素，为其创造一个良好的教育环境。</p>
<p>胡适先生回忆母亲时曾说：“如果我学得了一丝一毫的好脾气，如果我学得了一点点待人接物的和气，如果我能宽恕人，体谅人——我都得感谢我的慈母。”</p>
<p>可见，自身所处的家庭氛围与父母的品行和行为举止，都会在生活中慢慢渗透于孩子的品行和教养中。</p>
<p>英国切斯特菲尔德说：</p>
<p>“所谓良好教养，它们在几乎所有国家中乃至于一个地区里，都不尽相同；每一个明辨事理的人都会模仿他所在之地的良好教养，并与之看齐。”</p>
<p>正所谓：“玉不琢，不成器；人不学，不知义。”</p>
<p>人要明辨是非就得学习，做一个品德高尚的人也要学习，而做一个有教养的人更要学习，学习端正己身，立身处世，待人接物。</p>
<p>【02】教养，是由内散发的文化修养。</p>
<p>德米特里．利哈乔夫在《论教养》中说：“良好的教养不仅来自家庭和学校，而且可以得之于自身。”</p>
<p>但是前提是必须了解，什么是真正的教养。</p>
<p>教养，是发自于内心，是以成长环境，教育基础，自身经历等所综合成一种内在素质。</p>
<p>一个人是否有教养，不止是行为上彬彬有礼，更注重于其文化内涵和道德修养。</p>
<p>其中，文化，不单单指文化学识，更是一种以行为习惯和精神价值结合成的意识。</p>
<p>作家梁晓声说：“文化是根植于内心的修养，无需自觉提醒的自觉；以约束为前提的自由；为别人着想的善良。”</p>
<p>文化修养是一种由内散发的一种气质，是从自我认知，自我教育，自我学习，且沉淀到一定程度所散发出的一股无形力量。</p>
<p>一个人有没有文化，不在于其学历高低，而是是否具有这种无形中所沉淀下来的气质修养。</p>
<p>有文化修养的人，总能发现事物中的美好和希望，更是对光明的未来充满着极大的向往。</p>
<p>【03】教养，是有别于礼貌却依托于礼貌。</p>
<p>教养，是发自于内心，是一种经过时间的磨练和规范后综合的内在品质素养，是待人处事上的行为习惯。</p>
<p>礼貌，是外在的行为，是在模仿和刻意下也能假装出来的一种谦恭有礼的行为表现，它不一定发自于内心。</p>
<p>有教养的人，总表现的很有礼貌。</p>
<p>有礼貌的的人却未必是有教养的人。</p>
<p>一个人若是金玉其外败絮其中，不能内外兼修，这样的人不是有教养，只能称其“伪君子”。</p>
<p>一个人牙尖嘴利，却背地里又做好事，我们不能说这样的人有教养，只能说其有一副好心肠，刀子嘴豆腐心。<br>
日常生活中，吵架后，我们总能听到劝架的人说：“你别跟他一般见识，他人就那样，嘴巴坏但心地善良，你也别太介意。”等等之类的。</p>
<p>但他忘了，说者无心，听者有意，伤人往往也就在那一两句话中，伤过之后便是千疮百孔。</p>
<p>“良言一句三冬暖，恶语伤人六月寒”，有教养的人不会口无遮拦，也不会以嘴毒心肠好为借口的；反之，有教养的人相处起来是舒服的。</p>
<p>歌德说：“没有一种礼貌会在外表上叫人一眼就看出教养的不足，正确的教养在于使外表上的彬彬有礼和人的高尚的教养同时表现出来。”</p>
<p>【04】教养，是自我的约束和将心比心。</p>
<p>《菜根谭》：“有教养的人，不责人小过，不发人阴私，不念人旧恶。”</p>
<p>有教养的人不责难别人的小过错，不随便揭露别人的隐私，不念叨别人过去的坏处。</p>
<p>教养，体现于细节。</p>
<p>它不是看笑话，更不是让别人感到难堪或轻视。</p>
<p>洛克说：“教养的本质是在交往中对于任何人不表示任何轻视或侮蔑。”</p>
<p>有教养的人，不会让别人觉着尴尬困窘，在冒犯了他人后，懂得及时反省自身以及调整自己的行为。</p>
<p>当你在图书馆看书时，你可以选择自己喜欢的去看，但不能大声喧哗，这是你的个人教养。</p>
<p>当公共区域有人休息时，你不能总弄出动静，影响他人。不然这就是你素质低，没教养了。</p>
<p>一个人是否拥有最高级的教养，就看他懂不懂顾忌别人的感受，懂不懂将心比心，会不会让与之交往的人感到亲切舒适和满足。</p>
<p>格里美尔斯豪森言道：“没有教养、没有学识、没有实践的人的心灵好比一块田地，这块田地即使天生肥沃，但倘若不经耕耘和播种，也是结不出果实来的”</p>
<p>一个人的教养，是他立足社会的根基。</p>
<p>内在的修养让人吸引着志同道合的人，外在的行为礼仪拉近彼此距离，而内外兼修的教养，是稳固所有关系的壁垒。</p>
<p>教养是人生的一大课题，需要我们用一生的时间都去研修。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[微服务拆分]]></title>
        <id>https://kangjn.github.io/post/wei-fu-wu-chai-fen/</id>
        <link href="https://kangjn.github.io/post/wei-fu-wu-chai-fen/">
        </link>
        <updated>2021-04-22T09:04:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-拆分"><strong>一、拆分</strong></h3>
<p>**1、新浪微博微服务从纵横两个维度来划分，简单粗暴：</p>
<p><strong>1.1 纵向拆分</strong></p>
<p>从业务维度进行拆分。标准是按照业务的关联程度来决定，关联比较密切的业务适合拆分为一个微服务，而功能相对比较独立的业务适合单独拆分为一个微服务。</p>
<p><strong>1.2 横向拆分</strong></p>
<p>从公共且独立功能维度拆分。标准是按照是否有公共的被多个其他服务调用，且依赖的资源独立不与其他业务耦合。</p>
<p>纵向以业务为基准，关系铁的在一起；横向功能独立的在一起。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/115502.png" alt="img" loading="lazy"></figure>
<p><strong>2.1 服务拆分要迎合业务的需要</strong></p>
<p>充分考虑业务独立性和专业性，避免以团队来定义服务边界，从而出现“土匪”抢地盘，影响团队信任。</p>
<p>这个维度和上面的类似，但是强调的是业务和团队成员的各自独立性，对上面是一种很好的补充。</p>
<p><strong>2.2 拆分后的维护成本要低于拆分前</strong></p>
<p>这里的维护成本包括：人力、物力、时间。</p>
<p>这里的成本对大部分中小团队来说都是必须要考虑的重要环节，如果投入和收益不能成正比，或者超出领导的预算或者市场窗口，那么先进的技术就是绊脚石，千万不要迷恋技术，所谓工程师思维千万要不得。</p>
<p><strong>2.3 拆分不仅仅是架构的调整，组织结构上也要做响应的适应性优化</strong></p>
<p>确保拆分后的服务由相对独立的团队负责维护。</p>
<p>这句话怎么理解呢？传统的团队划分是按照产品部、前端、后端横向划分，微服务化以后的团队可能就会是吃一张披萨饼的人数，产品、前端、后端被归类到服务里面，以服务为中心来分配人数。</p>
<p>把具有不同扩展性要求的服务拆分出来，分别进行部署，降低成本，提高效率。比如全文搜索服务。</p>
<p>这点和上面的按功能独立性来拆分有点类似，功能独立其实就是面向可扩展性。</p>
<p><strong>2.5 考虑软件发布频率</strong></p>
<p>比如把20%经常变动的部分进行抽离，80%不经常变动的单独部署和管理。说白了就是按照8/2原则进行拆分。这个拆分的好处很明显，可以尽可能的减少发布产生的后遗症，比如用户体验、服务相互干扰等。</p>
<p>但是这里有一个问题，假如20%的服务分属于不同的业务层面，那该怎么办？所以这里的拆分应该有个优先级，在拆分相互冲突的时候应该要优先考虑权重比较高的那个。</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/303502.png" alt="img" loading="lazy"></figure>
<p>**3、另一种拆分：</p>
<p><strong>3.1 基于业务逻辑</strong></p>
<p>将系统中的业务按照职责范围进行识别，职责相同的划分为一个单独的服务。这种业务优先的方式在前面两种姿势当中都出现过，可见是最基本，最重要的划分方式（没有之一）。</p>
<p><strong>3.2 基于稳定性</strong></p>
<p>将系统中的业务模块按照稳定性进行排序。稳定的、不经常修改的划分一块；将不稳定的，经常修改的划分为一个独立服务。比如日志服务、监控服务都是相对稳定的服务，可以归到一起。这个很类似上面提到的2/8原则，80%的业务是稳定的。</p>
<p>至此你会发现服务的拆分真的没有绝对的标准，只有合理才是标准。</p>
<p><strong>3.3 基于可靠性</strong></p>
<p>同样，将系统中的业务模块按照可靠性进行排序。对可靠性要求比较高的核心模块归在一起，对可靠性要求不高的非核心模块归在一块。</p>
<p>这种拆分的高明可以很好的规避因为一颗老鼠屎坏了一锅粥的单体弊端，同时将来要做高可用方案也能很好的节省机器或带宽的成本。</p>
<p><strong>3.4 基于高性能</strong></p>
<p>同上，将系统中的业务模块按照对性能的要求进行优先级排序。把对性能要求较高的模块独立成一个服务，对性能要求不高的放在一起。比如全文搜索，商品查询和分类，秒杀就属于高性能的核心模块。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/457502.png" alt="img" loading="lazy"></figure>
<p><strong>4、盘点</strong></p>
<p>以上不同拆分各有千秋，异曲同工！</p>
<ul>
<li>对业务逻辑均不约而同的放在第一位。</li>
<li>对业务模块的稳定性和可靠性，对功能的独立性、可扩展性都有相似的看法</li>
<li>强调拆分应该是多选，而不是单选。具体情况具体分析，可以自由灵活排列组合。</li>
</ul>
<h3 id="二-题外话">**二、题外话</h3>
<p>如果你把上面的划分角度背下来了拿去现场套，可能还会遇到矛盾或争议。</p>
<p><strong>1、业务矛盾</strong></p>
<p>假如我们按照业务来划分，根据粒度大小，可能存在以下两种：</p>
<ul>
<li>第一种分为商品、交易、用户3个服务；</li>
<li>第二种分为商品、订单、支付、物流、买家、卖家6个服务。</li>
</ul>
<p>3 VS 6，这该怎么办？</p>
<p>如果你的团队只有9个人，那么分成3个是合理的，如果有18个人，那么6个服务是合理的。这里引入团队成员进行协助拆分。</p>
<p>可见拆分的姿势不是单选，而是多选的。这个时候必须要考虑团队成员数量。</p>
<p>在拆分遇到争议的时候，一般情况下我们增加一项拆分条件，虽然不是充要条件，但至少我们的答案会更加接近真理。</p>
<p>除了业务可能存在争议，其他的划分也会有争议，比如一个独立的服务到底需要多少人员的配置？</p>
<p><strong>2、三个火枪手(人员配置)</strong></p>
<p>上面提到的人员数量配置，这里为什么是9和18呢？(这里的团队配置参考李云华前辈提到的三个火枪手的观点)</p>
<p>换一种问法，为什么说是三个人分配一个服务（当然，成员主要是后端人员）？</p>
<ul>
<li>假设是1个人，请个假、生个病都不行。一个人会遇到单点的问题，所以不合理。</li>
<li>假设是2个人，终于有备份了，但是抽离一个后，剩下1个压力还是很大，不合理。</li>
<li>假设是3个人，抽离一个还有2个在。而且数字3是个稳定而神奇数字，用得好事半功倍。特别是遇到技术讨论，3个人相对周全，如果是2个可能会各持己见，带有自我的偏见和盲区。</li>
</ul>
<p>那么这个3是不是就是稳定的数量呢？</p>
<p>假设你做的是边开飞机边换引擎的重写工作，那么前期3个人都可能捉襟见肘。但是到了服务后期，你可能1个就够了。</p>
<p>所以3在我的理解应该是一个基准线，不同的时间段会有上下波动，但是相对稳定。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一份微服务架构手稿图]]></title>
        <id>https://kangjn.github.io/post/yi-fen-wei-fu-wu-jia-gou-shou-gao-tu/</id>
        <link href="https://kangjn.github.io/post/yi-fen-wei-fu-wu-jia-gou-shou-gao-tu/">
        </link>
        <updated>2021-04-22T08:26:56.000Z</updated>
        <content type="html"><![CDATA[<p>什么是微服务？</p>
<p>微服务 Microservices 之父，马丁.福勒，对微服务大概的概述如下：</p>
<p>就目前而言，对于微服务业界并没有一个统一的、标准的定义（While there is no precise definition of this architectural style ) 。</p>
<p>但通常在其而言，微服务架构是一种架构模式或者说是一种架构风格，它提倡将单一应用程序划分成一组小的服务，每个服务运行独立的自己的进程中，服务之间互相协调、互相配合，为用户提供最终价值。</p>
<p>服务之间采用轻量级的通信机制互相沟通（通常是基于 HTTP 的 RESTful API ) 。每个服务都围绕着具体业务进行构建，并且能够被独立地部署到生产环境、类生产环境等。</p>
<p>另外，应尽量避免统一的、集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中式管理来协调这些服务。可以使用不同的语言来编写服务，也可以使用不同的数据存储。</p>
<p>根据马丁.福勒的描述，我总结了以下几点：</p>
<figure data-type="image" tabindex="1"><a href="http://img.javastack.cn/1590629991746502.png"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/746502.png" alt="img" loading="lazy"></a></figure>
<p><strong>①小服务</strong></p>
<p>小服务，没有特定的标准或者规范，但他在总体规范上一定是小的。</p>
<p><strong>②进程独立</strong></p>
<p>每一组服务都是独立运行的，可能我这个服务运行在 Tomcat 容器，而另一个服务运行在 Jetty 上。可以通过进程方式，不断的横向扩展整个服务。</p>
<p><strong>③通信</strong></p>
<p>过去的协议都是很重的，就像 ESB，就像 SOAP，轻通信，这意味着相比过去更智能更轻量的服务相互调用，就所谓 smart endpoints and dumb pipes。</p>
<p>这些 Endpoint 都是解耦的，完成一个业务通信调用串起这些 Micro Service 就像是 Linux 系统中通过管道串起一系列命令业务。</p>
<p>过去的业务，我们通常会考虑各种各样的依赖关系，考虑系统耦合带来的问题。微服务，可以让开发者更专注于业务的逻辑开发。</p>
<p><strong>④部署</strong></p>
<p>不止业务要独立，部署也要独立。不过这也意味着，传统的开发流程会出现一定程度的改变，开发的适合也要有一定的运维职责。</p>
<p><strong>⑤管理</strong></p>
<p>传统的企业级 SOA 服务往往很大，不易于管理，耦合性高，团队开发成本比较大。</p>
<p>微服务，可以让团队各思其政的选择技术实现，不同的 Service 可以根据各自的需要选择不同的技术栈来实现其业务逻辑。</p>
<h2 id="微服务的利与弊">微服务的利与弊</h2>
<p>为什么用微服务呢？因为好玩？不是的。下面是我从网络上找到说的比较全的优点：</p>
<ul>
<li>优点是每个服务足够内聚，足够小，代码容易理解这样能聚焦一个指定的业务功能或业务需求。</li>
<li>开发简单、开发效率提高，一个服务可能就是专一的只干一件事。</li>
<li>微服务能够被小团队单独开发，这个小团队是 2 到 5 人的开发人员组成。</li>
<li>微服务是松耦合的，是有功能意义的服务，无论是在开发阶段或部署阶段都是独立的。</li>
<li>微服务能使用不同的语言开发。</li>
<li>易于和第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如 Jenkins，Hudson，bamboo。</li>
<li>微服务易于被一个开发人员理解，修改和维护，这样小团队能够更关注自己的工作成果。无需通过合作才能体现价值。微服务允许你利用融合最新技术。</li>
<li>微服务只是业务逻辑的代码，不会和 HTML，CSS 或其他界面组件混合。</li>
<li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一数据库。</li>
</ul>
<p>总的来说，微服务的优势，就是在于，面对大的系统，可以有效的减少复杂程度，使服务架构的逻辑更清晰明了。</p>
<p>但是这样也会带来很多问题，就譬如分布式环境下的数据一致性，测试的复杂性，运维的复杂性。</p>
<h2 id="什么组织适合使用微服务">什么组织适合使用微服务？</h2>
<p>微服务带了种种优点，种种弊端，那么什么组织适合使用微服务？</p>
<p>①墨菲定律（设计系统）和康威定律（系统划分）<br>
康威定律，是一个五十多年前就被提出来的微服务概念。在康威的这篇文章中，最有名的一句话就是：</p>
<blockquote>
<p>Organizations which design systems are constrained to produce designs which are copies of the communication structures of these  organizations.</p>
<p>-Melvin Conway(1967)</p>
</blockquote>
<p>中文直译大概的意思就是：设计系统的组织，其产生的设计等同于组织之内、组织之间的沟通结构。</p>
<figure data-type="image" tabindex="2"><a href="http://img.javastack.cn/1590629991985502.png"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/985502.png" alt="img" loading="lazy"></a></figure>
<p>②架构演化</p>
<p>架构是不断演化出来的，微服务也是这样，当从各大科技公司，规模大到一定程度，完全需要演化成更进一步管理的技术架构体系。[淘宝千万并发，14 次架构演进]，推荐大家看下。</p>
<p>[<img src="https://gitee.com/kangjun/MyBlogImage/raw/master/233502.png" alt="img" loading="lazy">]</p>
<p>传统的团队，都是面向过程化的，产品想完了去找策划，策划完了找开发，接着顺着一步一步找。</p>
<p>我们做技术都是为了产品的，一旦过程出来了什么问题，回溯寻找问题会非常耗时。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/387502.png" alt="img" loading="lazy"></figure>
<p>使用了微服务架构体系，团队组织方式需要转变成跨职能团队，即每个团队都有产品专家，策划专家，开发专家，运维专家，他们使用 API 方式发布他们的功能，而平台使用他们的功能发布产品。</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/717502.png" alt="img" loading="lazy"></figure>
<h2 id="微服务技术架构体系">微服务技术架构体系</h2>
<p>下面我分享一下大部分公司都使用的微服务技术架构体系：</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/956502.png" alt="img" loading="lazy"></figure>
<h3 id="服务发现">服务发现</h3>
<p>主流的服务发现，分为三种：</p>
<p><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/87502.jpg" alt="1590629993087502" loading="lazy">第一种，开发人员开发了程序以后，会找运维配一个域名，服务的话通过 DNS 就能找到我们对应的服务。</p>
<p>缺点是，由于服务没有负载均衡功能，对负载均衡服务，可能会有相当大的性能问题。</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/191502.jpg" alt="191502" loading="lazy"></figure>
<p>第二种，是目前普遍的做法。可以参考 Zuul 网关，每一个服务都通过服务端内置的功能注册到注册中心，服务消费者不断轮询注册中心发现对应的服务，使用内置负载均衡调用服务。</p>
<p>缺点是，对多语言环境不是很好，你需要单独给消费者的客户端开发服务发现和负载均衡功能。当然了，这个方法通常都是用在 Spring Cloud 上的。</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/640383.jpg" alt="img" loading="lazy"></figure>
<p>第三种，是将客户端和负载均衡放在同一个主机，而不是同一个进程内。</p>
<ul>
<li>[这种方法相对第一种第二种方法来说，改善了他们的缺点，但是会极大增加运维成本。]</li>
</ul>
<h3 id="网关">[网关]</h3>
<p>微服务的网关是什么？我们可以联系生活实际想一下。每一个大的公司，都会有一偏属于自己的建筑区，而这建筑区内，都有不少的门卫。如果有外来人员进入公司，会先和门卫打好招呼，才能进去。</p>
<p>将生活实际联系到微服务上，就不难理解网关的意思了：</p>
<figure data-type="image" tabindex="8"><a href="http://img.javastack.cn/1590629993612502.png"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/640324.jpg" alt="img" loading="lazy"></a></figure>
<p>网关的作用如下：</p>
<ul>
<li>反向路由：很多时候，公司不想让外部人员看到我们公司的内部，就需要网关来进行反向路由。即将外部请求转换成内部具体服务调用。</li>
<li>安全认证：网络中会有很多恶意访问，譬如爬虫，譬如黑客攻击，网关维护安全功能。</li>
<li>限流熔断：当请求很多服务不堪重负，会让我们的服务自动关闭，导致不能用服务。限流熔断可以有效的避免这类问题。</li>
<li>日志监控：所有的外面的请求都会经过网关，这样我们就可以使用网关来记录日志信息。</li>
<li>灰度发布，蓝绿部署。是指能够平滑过渡的一种发布方式。在其上可以进行 A/B testing。即让一部分用户继续用产品特性 A，一部分用户开始用产品特性 B，如果用户对 B 没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。</li>
</ul>
<p>[开源网关 Zuul 架构：]</p>
<figure data-type="image" tabindex="9"><a href="http://img.javastack.cn/1590629993902502.png"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/640321.jpg" alt="img" loading="lazy"></a></figure>
<p>Zuul 网关核心其实是一个 Servlet，所有请求都会经过 Zuul Servlet 传到 ZuulFilter Runner，然后分发到三种过滤器。</p>
<p>先说说架构图左半部分，分别是使用 Groovy 实现的前置路由过滤器，路由过滤器，后置路由过滤器。</p>
<p>一般请求都会先经过前置路由过滤器处理，一般的自定义 Java 封装逻辑也会在这里实现。</p>
<p>路由过滤器，实现的是找到对应的微服务进行调用。调用完了，响应回来，会经过后置路由过滤器，通过后置路由过滤器我们可以封装日志审计的处理。</p>
<p>可以说 Zuul 网关最大的特色就是它的三层过滤器。是 Zuul 网关设计的自定义过滤器加载机制。</p>
<p>网关内部会有生产者消费者模型，自动的将过滤器脚本发布到 Zuul 网关读取加载运行。</p>
<h3 id="配置中心">配置中心</h3>
<p>以前，开发人员把配置文件放在开发文件里面，这样会有很多隐患。譬如，配置规范不同，无法追溯配置人员。</p>
<p>一旦需要大规模改动配置，改动时间会很长，无法追溯配置人员，从而影响整个产品，后果是我们承担不起的。</p>
<p>因此就有配置中心这个喽！现在的开源中心有百度配置中心 Disconf，Spring Cloud Config，Apollo。</p>
<p>今天重点说说现在应用质量不错的配置中心，携程开源的阿波罗（Apollo）：</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/781502.png" alt="img" loading="lazy"></figure>
<p>Apollo 的配置中心规模比较大，本地应用会有响应的配置中心客户端，可以定时同步配置中心里的配置。如果配置中心怠机，会使用缓存来进行配置。关注微信公众号：Java技术栈，在后台回复：架构，可以获取我整理的 N 篇最新架构干货。</p>
<h3 id="通讯方式">通讯方式</h3>
<p>关于通讯方式，一般市面也就是两种远程调用方式，我整理了一个表格：</p>
<figure data-type="image" tabindex="11"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/516502.png" alt="img" loading="lazy"></figure>
<h3 id="监控预警">监控预警</h3>
<p>监控预警对于微服务很重要，一个可靠的监控预警体系对微服务运行至关重要。</p>
<p>一般监控分为如下层次：</p>
<figure data-type="image" tabindex="12"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/744502.png" alt="img" loading="lazy"></figure>
<p>从基础设施到用户端，层层有监控，全方位，多角度，每一个层面都很重要。</p>
<p>总体来说，微服务可分为 5 个监控点：</p>
<ul>
<li>日志监控</li>
<li>Metrics 监控</li>
<li>健康检查</li>
<li>调用链检查</li>
<li>告警系统</li>
</ul>
<p><strong>①监控架构</strong></p>
<p>下面的图是大部分公司的一种监控架构图。每一个服务都有一个 Agent，Agent 收集到关键信息，会传到一些 MQ 中，为了解耦。</p>
<p>同时将日志传入 ELK，将 Metrics 传入 InfluxDB 时间序列库。而像 Nagios，可以定期向 Agent 发起信息检查微服务。关注微信公众号：Java技术栈，在后台回复：架构，可以获取我整理的 N 篇最新架构干货。</p>
<figure data-type="image" tabindex="13"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/874502.png" alt="img" loading="lazy"></figure>
<p><strong>②调用链监控 APM</strong></p>
<p>很多公司都有调用链监控，就譬如阿里有鹰眼监控，点评的 Cat，大部分调用链监控（没错，我指的 Zipkin）架构是这样的：</p>
<figure data-type="image" tabindex="14"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/055502.jpg" alt="055502" loading="lazy"></figure>
<p>当请求进入 Web 容器的时候，会经过创建 Tracer，连接 Spans（模拟潜在的分布式工作的延迟，该模块还包含在系统网络间传递跟踪上下文信息的工具包，如通过 HTTP Headers）。</p>
<p>Spans 有一个上下文，其中包含 Tracer 标识符，将其放在表示分布式操作的树的正确位置。</p>
<p>当我们把图中的各种 Span 放到后端的时候，我们的服务调用链会动态的生成调用链。</p>
<p>下面是一些市场上用的比较多的调用链监控对比：</p>
<figure data-type="image" tabindex="15"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/193502.jpg" alt="193502" loading="lazy"></figure>
<h3 id="熔断-隔离-限流-降级">熔断、隔离、限流、降级</h3>
<p>面对巨大的突发流量下，大型公司一般会采用一系列的熔断（系统自动将服务关闭防止让出现的问题最大化）、隔离（将服务和服务隔离，防止一个服务挂了其他服务不能访问）、限流（单位时间内之允许一定数量用户访问）、降级（当整个微服务架构整体的负载超出了预设的上限阈值或即将到来的流量预计将会超过预设的阈值时，为了保证重要或基本的服务能正常运行，我们可以将一些不重要或不紧急的服务或任务进行服务的延迟使用或暂停使用）措施。</p>
<p>下面介绍一下 Hystrix 的运行流程：</p>
<figure data-type="image" tabindex="16"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/492502.png" alt="img" loading="lazy"></figure>
<p>Hystrix 停止开发，Spring Cloud 何去何从？</p>
<p>每一个微服务调用时，都会使用 Hystrix 的 Command 方式（上图的左上角那个），然后使用 Command 同步的，或者是响应式的，或者是异步的，判断电路是否熔断（顺着图从左往右看），如果断路则走降级 Fallback。</p>
<p>如果这个线闭合着，但是线程资源没了，队列满了，则走限流措施（看图的第 5 步）。</p>
<p>如果走完了，执行成功了，则走 run() 方法，获取 Response，但是这个过程如果出错了，则继续走降级 Fallback。</p>
<p>同时，看图最上面有一个后缀是 Health 的，这是一个计算整个链路是否健康的组件，每一步操作都被它记录着。</p>
<h3 id="容器与服务编排引擎">容器与服务编排引擎</h3>
<p>从物理机到虚拟机，从虚拟机到容器；从物理集群到 OpenStack，OpenStack 到 Kubernetes；科技不断的变化，我们的认知也没刷新。</p>
<p>我们从容器开始说起，它首先是一个相对独立的运行环境，在这一点有点类似于虚拟机，但是不像虚拟机那样彻底。</p>
<p>虚拟机会将虚拟硬件、内核（即操作系统）以及用户空间打包在新虚拟机当中，虚拟机能够利用“虚拟机管理程序”运行在物理设备之上。</p>
<p>虚拟机依赖于 Hypervisor，其通常被安装在“裸金属”系统硬件之上，这导致 Hypervisor 在某些方面被认为是一种操作系统。</p>
<p>一旦 Hypervisor 安装完成， 就可以从系统可用计算资源当中分配虚拟机实例了，每台虚拟机都能够获得唯一的操作系统和负载（应用程序）。</p>
<p>简言之，虚拟机先需要虚拟一个物理环境，然后构建一个完整的操作系统，再搭建一层 Runtime，然后供应用程序运行。</p>
<p>对于容器环境来说，不需要安装主机操作系统，直接将容器层（比如 LXC 或 Libcontainer）安装在主机操作系统（通常是 Linux 变种）之上。</p>
<p>在安装完容器层之后，就可以从系统可用计算资源当中分配容器实例了，并且企业应用可以被部署在容器当中。</p>
<p>但是，每个容器化应用都会共享相同的操作系统(单个主机操作系统)。容器可以看成一个装好了一组特定应用的虚拟机，它直接利用了宿主机的内核，抽象层比虚拟机更少，更加轻量化，启动速度极快。</p>
<p>相比于虚拟机，容器拥有更高的资源使用效率，因为它并不需要为每个应用分配单独的操作系统——实例规模更小、创建和迁移速度也更快。这意味着相比于虚拟机，单个操作系统能够承载更多的容器。</p>
<p>云提供商十分热衷于容器技术，因为在相同的硬件设备当中，可以部署数量更多的容器实例。</p>
<p>此外，容器易于迁移，但是只能被迁移到具有兼容操作系统内核的其他服务器当中，这样就会给迁移选择带来限制。</p>
<p>因为容器不像虚拟机那样同样对内核或者虚拟硬件进行打包，所以每套容器都拥有自己的隔离化用户空间，从而使得多套容器能够运行在同一主机系统之上。</p>
<p>我们可以看到全部操作系统层级的架构都可实现跨容器共享，惟一需要独立构建的就是二进制文件与库。</p>
<p>正因为如此，容器才拥有极为出色的轻量化特性。我们最常用的容器是 Docker。</p>
<p><strong>①容器编排</strong></p>
<p>过去虚拟机可以通过云平台 OpenStack 管理虚拟化，容器时代如何管理容器呢？这就要看看容器编排引擎了。</p>
<p>Apache Mesos：Mesos 是基于 Master，Slave 架构，框架决定如何利用资源，Master 负责管理机器，Slave 会定期的将机器情况报告给 Master，Master 再将信息给框架。Master 是高可用的，因为 ZK，也有 Leader 的存在。</p>
<p>下面是架构图：</p>
<figure data-type="image" tabindex="17"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/731502.jpg" alt="731502" loading="lazy"></figure>
<p>Kubernetes：Kubernetes 是最近十分火热的开源容器编排引擎</p>
<figure data-type="image" tabindex="18"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/981502.jpg" alt="981502" loading="lazy"></figure>
<p>Kubernetes 设计理念和功能其实就是一个类似 Linux 的分层架构，先说说每一个 Kubernetes 节点内部，kubelet 管理全局全局 pod，而每一个 pod 承载着一个或多个容器，kube-proxy 负责网络代理和负载均衡。</p>
<p>Kubernetes 节点外部，则是对应的控制管理服务器，负责统一管理各个节点调度分配与运行。</p>
<p><strong>②服务网格化</strong></p>
<p>关于服务网络化，后面会更加深入的为大家进行讲解。</p>
]]></content>
    </entry>
</feed>