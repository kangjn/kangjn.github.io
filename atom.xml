<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://kangjn.github.io/</id>
    <title>MyBlog</title>
    <updated>2021-04-21T07:39:14.392Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://kangjn.github.io/"/>
    <link rel="self" href="https://kangjn.github.io/atom.xml"/>
    <subtitle>我的博客</subtitle>
    <logo>https://kangjn.github.io/images/avatar.png</logo>
    <icon>https://kangjn.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, MyBlog</rights>
    <entry>
        <title type="html"><![CDATA[了解Java异步编程]]></title>
        <id>https://kangjn.github.io/post/liao-jie-java-yi-bu-bian-cheng/</id>
        <link href="https://kangjn.github.io/post/liao-jie-java-yi-bu-bian-cheng/">
        </link>
        <updated>2021-04-21T07:14:33.000Z</updated>
        <content type="html"><![CDATA[<h3 id="了解java异步编程">了解Java异步编程</h3>
<p>随着<code>RxJava</code>、<code>Reactor</code>等异步框架的流行，异步编程受到了越来越多的关注，尤其是在IO密集型的业务场景中，相比传统的同步开发模式，异步编程的优势越来越明显。</p>
<p>那到底什么是异步编程？异步化真正的好处又是什么？如何选择适合自己团队的异步技术？在实施异步框架落地的过程中有哪些需要注意的地方？</p>
<ol>
<li>使用RxJava异步改造后的效果</li>
<li>什么是异步编程？异步实现原理</li>
<li>异步技术选型参考</li>
<li>异步化真正的好处是什么？</li>
<li>异步化落地的难点及解决方案</li>
<li>扩展:异步其他解决方案-协程</li>
</ol>
<h2 id="使用rxjava异步改造后的效果">使用RxJava异步改造后的效果</h2>
<p>下图是我们后端java项目使用RxJava改造成异步前后的RT(响应时长)效果对比：</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/164025.png" alt="img" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/164040.png" alt="img" loading="lazy"></figure>
<p>统计数据基于App端的gateway，以75线为准，还有80、85、90、99线，从图中可以看出改成异步后接口整体的平均响应时长降低了**40%**左右。</p>
<p>(响应时间是以发送请求到收到后端接口响应数据的时长，上图改造的这个后端java接口内部流程比较复杂，因为公司都是微服务架构，该接口内部又调用了6个其他服务的接口，最后把这些接口的数据汇总在一起返回给前端)</p>
<p>这张图是同步接口和改造成异步接口前后的CPU负载情况对比</p>
<p>改造前cpu load : 35.46</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/165003.png" alt="img" loading="lazy"></figure>
<p>改造后cpu load : 14.25</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/165002.png" alt="img" loading="lazy"></figure>
<p>改成异步后CPU的负载情况也有明显下降，但CPU使用率并无影响(一般情况下异步化后cpu的利用率会有所提高，但要看具体的业务场景)</p>
<p>CPU LoadAverage是指：一段时间内处于可运行状态和不可中断状态的进程平均数量。(可运行分为正在运行进程和正在等待CPU的进程；<strong>不可中断则是它正在做某些工作不能被中断比如等待磁盘IO、网络IO等</strong>)</p>
<p>而我们的服务业务场景大部分都是IO密集型业务，功能实现很多需要依赖底层接口，会进行频繁的IO操作。</p>
<p>下图是2019年在全球架构师峰会上<strong>阿里</strong>分享的异步化改造后的RT和QPS效果：</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/170052.png" alt="img" loading="lazy"></figure>
<h2 id="什么是异步编程">什么是异步编程？</h2>
<h3 id="响应式编程-nio">响应式编程 + NIO</h3>
<h3 id="1-异步和同步的区别">1. 异步和同步的区别：</h3>
<p>我们先从<strong>I/O</strong>的角度看下同步模式下接口A调用接口B的交互流程:</p>
<p>下图是传统的同步模式下io线程的交互流程，可以看出io是阻塞的，即bio的运行模式</p>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/171309.png" alt="img" loading="lazy"></figure>
<p>接口A发起调用接口B后，这段时间什么事情也不能做，主线程阻塞一直等到接口B数据返回，然后才能进行其他操作，可想而知如果接口A调用的接口不止B的话(A-&gt;B-&gt;C-&gt;D-&gt;E。。。)，那么等待的时间也是递增的，而且<strong>这期间CPU也要一直占用着</strong>，白白浪费资源，也就是上图看到的 cpu load 高的原因。</p>
<p>而且还有一个隐患就是如果调用的其他服务中的接口比如C超时，或接口C挂掉了，那么对调用方服务A来说，剩余的接口比如D、E都会无限等待下去。。。</p>
<p>其实大部分情况下我们收到数据后内部的处理逻辑耗时都很短，这个可以通过埋点执行时间统计，<strong>大部分时间都浪费在了IO等待上</strong>。</p>
<p>下面这个视频演示了同步模式下我们线上环境真实的接口调用情况，即接口调用的线程执行和变化情况，(使用的工具是JDK自带的jvisual来监控线程变化情况)</p>
<p>这里先交代下大致背景：服务端api接口A内部一共调用了6个其他服务的接口，大致交互是这样的：</p>
<p>A接口（B -&gt; C -&gt; D -&gt; E -&gt; F -&gt; G）返回聚合数据</p>
<p>背景：使用Jemter测试工具压测100个线程并发请求接口，以观察线程的运行情况（可以全屏观看）：</p>
<p><code>http-nio-8080-exec*</code>开头的是tomcat线程池中的线程，即前端请求我们后端接口时要通过tomcat服务器接收和转发的线程，因为我们后端api接口内部又调用了其他服务的6个接口（B、C、D、E、F、G），同步模式下需要等待上一个接口返回数据才能继续调用下一个接口，所以可以从视频中看出，大部分的http线程耗时都在8秒以上(绿色线条代表线程是”运行中”状态，8秒包括等待接口返回的时间和我们内部逻辑处理的总时间，因为是本地环境测试，受机器和网络影响较大)</p>
<p>然后我们再看下异步模式的交互流程，即nio方式：</p>
<figure data-type="image" tabindex="7"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/182257.png" alt="img" loading="lazy"></figure>
<p>大致流程就是接口A发起调用接口B的请求后就立即返回，而不用阻塞等待接口B响应，这样的好处是<code>http-nio-8080-exec*</code>线程可以<strong>马上得到复用，接着处理下一个前端请求的任务</strong>，如果接口B处理完返回数据后，会有一个回调线程池处理真正的响应，即这种模式下我们的业务流程是<strong>http线程只处理请求，回调线程处理接口响应</strong>。</p>
<p>nio模式下虽然<code>http-nio-8080-exec*</code>线程和回调线程<code>AsfThread-executor-*</code>的运行时间都很短，但是从http线程开始到asf回调处理完返回给前端结果的时间和bio即同步模式下的时间差异不大（在相同的逻辑流程下），并不是nio模式下服务响应的整体时间就会缩短，而是<strong>会提升****CPU的利用率</strong>，因为CPU不再会阻塞等待（不可中断状态减少），这样<strong>CPU就能有更多的资源来处理其他的请求任务</strong>，相同单位时间内能处理更多的任务，所以nio模式带来的好处是：</p>
<ul>
<li><strong>提升QPS（用更少的线程资源实现更高的并发能力）</strong></li>
<li><strong>降低CPU负荷,提高利用率</strong></li>
</ul>
<h3 id="2-nio原理">2. Nio原理</h3>
<figure data-type="image" tabindex="8"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/161708.png" alt="img" loading="lazy"></figure>
<p>结合上面的接口交互图可知，接口B通过网络返回数据给调用方(接口A)这一过程，对应底层实现就是网卡接收到返回数据后，通过自身的DMA（直接内存访问）将数据拷贝到内核缓冲区，这一步不需要CPU参与操作，也就是把原先CPU等待的事情交给了底层网卡去处理，这样<strong>CPU就可以专注于我们的应用程序即接口内部的逻辑运算</strong>。</p>
<h3 id="3-nio-in-java">3. Nio In Java</h3>
<figure data-type="image" tabindex="9"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/212141.png" alt="img" loading="lazy"></figure>
<p>nio在java里的实现主要是上图中的几个核心组件：<code>channel</code>、<code>buffer</code>、<code>selector</code>，这些组件组合起来即实现了上面所讲的<strong>多路复用机制</strong>，如下图所示：</p>
<figure data-type="image" tabindex="10"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/212733.png" alt="img" loading="lazy"></figure>
<h2 id="响应式编程">响应式编程</h2>
<h3 id="1-什么是响应式编程它和传统的编程方式有什么区别">1. 什么是响应式编程？它和传统的编程方式有什么区别？</h3>
<p>响应式可以简单的理解为收到某个事件或通知后采取的一系列动作，如上文中所说的响应操作系统的网络数据通知，然后以<strong>回调的方式</strong>处理数据。</p>
<p>传统的命令式编程主要由：顺序、分支、循环 等控制流来完成不同的行为</p>
<p>响应式编程的特点是：</p>
<ul>
<li><strong>以逻辑为中心转换为以数据为中心</strong></li>
<li><strong>从命令式到声明式的转换</strong></li>
</ul>
<h3 id="2-javautilconcurrentfuture">2. Java.Util.Concurrent.Future</h3>
<p>在Java使用nio后无法立即拿到真实的数据，而且先得到一个”<code>future</code>“，可以理解为邮戳或快递单，为了获悉真正的数据我们需要不停的通过快递单号查询快递进度，所以 <strong>J.U.C 中的 Future 是Java对异步编程的第一个解决方案</strong>，通常和线程池结合使用，伪代码形式如下：</p>
<pre><code>ExecutorService executor = Executors.newCachedThreadPool(); // 线程池
Future&lt;String&gt; future = executor.submit(() -&gt;{
    Thread.sleep(200); // 模拟接口调用，耗时200ms
    return &quot;hello world&quot;;
});
// 在输出下面异步结果时主线程可以不阻塞的做其他事情
// TODO 其他业务逻辑

System.out.println(&quot;异步结果:&quot;+future.get()); //主线程获取异步结果
</code></pre>
<p><code>Future</code>的缺点很明显：</p>
<ul>
<li>无法方便得知任务何时完成</li>
<li>无法方便获得任务结果</li>
<li>在主线程获得任务结果会导致主线程阻塞</li>
</ul>
<h3 id="3-listenablefuture">3. ListenableFuture</h3>
<p>Google并发包下的<code>listenableFuture</code>对Java原生的future做了扩展，顾名思义就是使用监听器模式实现的<strong>回调机制</strong>，所以叫可监听的future。</p>
<pre><code>Futures.addCallback(listenableFuture, new FutureCallback&lt;String&gt;() {
    @Override
    public void onSuccess(String result) {
        System.out.println(&quot;异步结果:&quot; + result);
    }

    @Override
    public void onFailure(Throwable t) {
        t.printStackTrace();
    }
}, executor);
</code></pre>
<p>回调机制的最大问题是：<strong>Callback Hell（回调地狱）</strong></p>
<ul>
<li>代码的字面形式和其所表达的业务含义不匹配</li>
<li>业务的先后关系在代码层面变成了包含和被包含的关系</li>
<li>大量使用 Callback 机制，使应该是先后的业务逻辑在代码形式上表现为层层嵌套,这会导致代码难以理解和维护。</li>
</ul>
<p>那么如何解决 Callback Hell 问题呢？</p>
<p><strong>响应式编程</strong></p>
<p>其实主要是以下两种解决方式：</p>
<ul>
<li>事件驱动机制</li>
<li>链式调用(Lambda)</li>
</ul>
<h3 id="4-completablefuture">4. CompletableFuture</h3>
<p>Java8里的<code>CompletableFuture</code>和Java9的<code>Flow Api</code>勉强算是上面问题的解决方案：</p>
<pre><code>CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt;
    &quot;hello&quot;
);
// f2依赖f1的结果做转换
CompletableFuture&lt;String&gt; f2 = f1.thenApplyAsync(t -&gt;
    t + &quot; world&quot;
);
System.out.println(&quot;异步结果:&quot; + f2.get());
</code></pre>
<p>但<code>CompletableFuture</code>处理简单的任务可以使用，但并不是一个完整的反应式编程解决方案，在服务调用复杂的情况下，存在服务编排、上下文传递、柔性限流(背压)方面的不足</p>
<p>如果使用<code>CompletableFuture</code>面对这些问题可能需要自己额外造一些轮子，Java9的<code>Flow</code>虽然是基于 <strong>Reactive Streams</strong> 规范实现的，但没有RxJava、Project Reactor这些异步框架丰富和强大和完整的解决方案。</p>
<p>当然如果接口逻辑比较简单，完全可以使用<code>listenableFuture</code>或<code>CompletableFuture</code></p>
<h3 id="5-reactive-streams">5. Reactive Streams</h3>
<p>在网飞推出RxJava1.0并在Android端普及流行开后，响应式编程的规范也呼之欲出：</p>
<p>包括后来的RxJava2.0、Project Reactor都是基于Reactive Streams规范实现的。</p>
<p>关于他们和<code>listenableFuture</code>、 <code>CompletableFuture</code>的区别通过下面的例子大家应该就会清楚。</p>
<p>比如下面的基于回调的代码示例：获取用户的5个收藏列表功能</p>
<figure data-type="image" tabindex="11"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/225236.png" alt="img" loading="lazy"></figure>
<p>图中标注序号的步骤对应如下：</p>
<ol>
<li>根据uid调用用户收藏列表接口<code>userService.getFavorites</code></li>
<li>成功的回调逻辑</li>
<li>如果用户收藏列表为空</li>
<li>调用推荐服务<code>suggestionService.getSuggestions</code></li>
<li>推荐服务成功后的回调逻辑</li>
<li>取前5条推荐并展示(<code>Java8 Stream api</code>)</li>
<li>推荐服务失败的回调,展示错误信息</li>
<li>如果用户收藏列表有数据返回</li>
<li>取前5条循环调用详情接口<code>favoriteService.getDetails</code> 成功回调则展示详情,失败回调则展示错误信息</li>
</ol>
<p>可以看出主要逻辑都是在回调函数（<code>onSuccess()</code>、<code>onError()</code>）中处理的，在可读性和后期维护成本上比较大。</p>
<p>基于Reactive Streams规范实现的响应式编程解决方案如下：</p>
<figure data-type="image" tabindex="12"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/225814.png" alt="img" loading="lazy"></figure>
<ol>
<li>调用用户收藏列表接口</li>
<li>压平数据流调用详情接口</li>
<li>如果收藏列表为空调用推荐接口</li>
<li>取前5条</li>
<li>切换成异步线程处理上述声明接口返回结果)</li>
<li>成功则展示正常数据,错误展示错误信息</li>
</ol>
<p>可以看出因为这些异步框架提供了丰富的api，所以我们可以把主要精力<strong>放在数据的流转上，而不是原来的逻辑控制上。这也是异步编程带来的思想上的转变。</strong></p>
<p>下图是RxJava的<code>operator api</code>：</p>
<figure data-type="image" tabindex="13"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/230605.png" alt="img" loading="lazy"></figure>
<p>（如果这些操作符满足不了你的需求，你也可以自定义操作符）</p>
<p>所以说<strong>异步最吸引人的地方在于资源的充分利用，不把资源浪费在等待的时间上(nio)，代价是增加了程序的复杂度，而Reactive Program封装了这些复杂性，使其变得简单。</strong></p>
<p>所以我们无论使用哪种异步框架，尽量使用框架提供的api，而不是像上图那种基于回调业务的代码，把业务逻辑都写在onSuccess、onError等回调方法里，这样无法发挥异步框架的真正作用：</p>
<blockquote>
<p>Codes Like Sync，Works Like Async</p>
</blockquote>
<p>即以<strong>同步的方式编码，达到异步的效果与性能,兼顾可维护性与可伸缩性</strong>。</p>
<h2 id="异步框架技术选型">异步框架技术选型</h2>
<figure data-type="image" tabindex="14"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/231752.png" alt="img" loading="lazy"></figure>
<p>如果是我个人更愿意选择Project Reactor作为首选异步框架，，还有一点是因为Netflix推出的开源产品渐渐都不维护了，而且Project Reactor提供了<code>reactor-adapter</code>组件，可以方便的和RxJava的api转换。</p>
<p>其实还有<strong>Vert.x</strong>也算异步框架 (底层使用netty实现nio, 最新版已支持reactive stream规范)</p>
<h2 id="异步化真正的好处">异步化真正的好处</h2>
<h3 id="scalability">Scalability</h3>
<p>伸缩性主要体现在以下两个方面：</p>
<ul>
<li><strong>elastic 弹性</strong></li>
<li><strong>resilient 容错性</strong></li>
</ul>
<p>（异步化在平时<strong>不会明显降低 RT、提高 QPS</strong>，文章开头的数据也是在大促这种流量高峰下的体现出的异步效果）</p>
<p>从架构和应用等更高纬度看待异步带来的好处则会提升系统的两大能力：<strong>弹性</strong> 和 <strong>容错性</strong></p>
<p>前者反映了系统应对压力的表现，后者反映了系统应对故障的表现</p>
<h4 id="1-容错性">1. 容错性</h4>
<p>像RxJava，Reactor这些异步框架处理回调数据时一般会切换线程上下文，其实就是使用不同的线程池来隔离不同的数据流处理逻辑，下图说明了这一特性的好处：</p>
<figure data-type="image" tabindex="15"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/225922.png" alt="img" loading="lazy"></figure>
<p>即利用异步框架支持线程池切换的特性实现<strong>服务/接口隔离</strong>，进而提高系统的<strong>高可用</strong>。</p>
<h4 id="2-弹性">2. 弹性</h4>
<figure data-type="image" tabindex="16"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/134231.png" alt="img" loading="lazy"></figure>
<p>back-pressure是一种重要的反馈机制，相比于传统的熔断限流等方式，是一种更加<strong>柔性的自适应限流</strong>。使得系统得以优雅地响应负载，而不是在负载下崩溃。</p>
<h2 id="异步化落地的难点及解决方案">异步化落地的难点及解决方案</h2>
<p>还是先看下淘宝总结的异步改造中难点问题：</p>
<figure data-type="image" tabindex="17"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/130202.png" alt="img" loading="lazy"></figure>
<p>中间件全异步牵涉到到公司中台化战略或框架部门的支持，包括公司内部常用的中间件比如MQ、redis、dal等。</p>
<p>这里主要说下上下文传递和阻塞检测的问题：</p>
<h3 id="1-上下文传递">1. 上下文传递</h3>
<p>改造成异步服务后，不能再使用<code>ThreadLocal</code>传递上下文context，因为异步框架比如RxJava一般在收到通知后会先调用<code>observeOn()</code>方法切换成另外一个线程处理回调，比如我们在请求接口时在<code>ThreadLocal</code>的context里设置了一个值，在回调线程里从context里取不到这个值的，因为此时已经不是同一个<code>ThreadLocal</code>了，所以需要我们手动在切换上下文的时候传递context从一个线程到另一个线程环境，伪代码如下：</p>
<pre><code>Context context = ThreadLocalUtils.get(); // 获取当前线程的上下文
single.observeOn(scheduler).doOnEvent((data, error) -&gt; ThreadLocalUtils.set(context)); // 切换线程后在doOnEvent里重新给新的线程赋值context
</code></pre>
<p>在<code>observeOn()</code>方法切换成另外一个线程后调用<code>doOnEvent</code>方法将原来的context赋给新的线程<code>ThreadLocal</code></p>
<p><strong>注意</strong>：这里的代码只是提供一种解决思路，实际在使用前和使用后还要考虑清空<code>ThreadLocal</code>，因为线程有可能会回收到线程池下次复用，而不是立即清理，<strong>这样就会污染上下文环境</strong>。</p>
<p>可以将传递上下文的方法封装成公共方法，不需要每次都手动切换。</p>
<h3 id="2-阻塞检测">2. 阻塞检测</h3>
<p>阻塞检测主要是要能及时发现我们某个异步任务长时间阻塞的发生，比如异步线程执行时间过长进而影响整个接口的响应，原来同步场景下我们的日志都是串行记录到ES或Cat上的，现在改成异步后，每次处理接口数据的逻辑可能在不同的线程中完成，这样记录的日志就需要我们主动去合并（依据具体的业务场景而定），如果日志无法关联起来，对我们排查问题会增加很多难度。所幸的是随着异步的流行，现在很多日志和监控系统都已支持异步了。</p>
<p>Project Reactor 自己也有阻塞检测功能</p>
<h3 id="3-其他问题">3. 其他问题</h3>
<p>除了上面提到的两个问题外，还有一些比如RxJava2.0之后不支持返回null，如果我们原来的代码或编程习惯所致返回结果有null的情况，可以考虑使用java8的<code>Optional.ofNullable()</code>包装一下，然后返回的RxJava类型是这样的：<code>Single&lt;Optional&gt;</code>，其他异步框架如果有类似的问题同理。</p>
<h2 id="异步其他解决方案纤程协程">异步其他解决方案：纤程/协程</h2>
<ul>
<li>Quasar</li>
<li>Kilim</li>
<li>Kotlin</li>
<li>Open JDK Loom</li>
<li>AJDK wisp2</li>
</ul>
<p>协程并不是什么新技术，它在很多语言中都有实现，比如 <code>Python</code>、<code>Lua</code>、<code>Go</code> 都支持协程。</p>
<p>协程与线程不同之处在于，<strong>线程由内核调度，而协程的调度是进程自身完成的</strong>。这样就可以不受操作系统对线程数量的限制，一个线程内部可以创建成千上万个协程。因为上文讲到的异步技术都是基于线程的操作和封装，Java中的线程概念对应的就是操作系统的线程。</p>
<h3 id="1-quasar-kilim">1. Quasar、Kilim</h3>
<p>开源的Java轻量级线程（协程）框架，通过利用<code>Java instrument</code>技术对字节码进行修改，使方法挂起前后可以保存和恢复JVM栈帧，方法内部已执行到的字节码位置也通过增加状态机的方式记录，在下次恢复执行可直接跳转至最新位置。</p>
<h3 id="2-kotlin">2. Kotlin</h3>
<p>Kotlin Coroutine 协程库，因为 Kotlin 的运行依赖于 JVM，不能对 JVM  进行修改，因此Kotlin不能在底层支持协程。同时Kotlin 是一门编程语言，需要在语言层面支持协程，所以Kotlin  对协程支持最核心的部分是在编译器中完成，这一点其实和Quasar、Kilim实现原理类似，都是在<strong>编译期通过修改字节码</strong>的方式实现协程</p>
<h3 id="3-project-loom">3. Project Loom</h3>
<p>Project Loom 发起的原因是因为长期以来Java 的线程是与操作系统的线程一一对应的，这限制了 Java 平台并发能力提升，Project Loom 是<strong>从 JVM 层面对多线程技术进行彻底的改变</strong>。</p>
<p>OpenJDK 在2018年创建了 Loom 项目，目标是在JVM上实现轻量级的线程，并解除JVM线程与内核线程的映射。其实 Loom  项目的核心开发人员正是从Quasar项目过来的，目的也很明确，就是要将这项技术集成到底层JVM里，所以Quasar项目目前已经不维护了。。。</p>
<h3 id="4-ajdk-wisp2">4. AJDK Wisp2</h3>
<p>Alibaba Dragonwell 是阿里巴巴的 Open JDK 发行版，提供长期支持。dragonwell8已开源协程功能（之前的版本是不支持的），开启jvm命令：<code>-XX:+UseWisp2</code> 即支持协程。</p>
<h2 id="总结">总结</h2>
<ul>
<li>Future 在异步方面支持有限</li>
<li>Callback 在编排能力方面有 Callback Hell 的短板</li>
<li>Project Loom 最新支持的Open JDK版本是16，目前还在测试中</li>
<li>AJDK wisp2 需要换掉整个JVM，需要考虑改动成本和收益比</li>
</ul>
<p>所以目前实现异步化比较成熟的方案是 <strong>Reactive Streams</strong></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[解析springcloud分布式微服务的实现]]></title>
        <id>https://kangjn.github.io/post/jie-xi-springcloud-fen-bu-shi-wei-fu-wu-de-shi-xian/</id>
        <link href="https://kangjn.github.io/post/jie-xi-springcloud-fen-bu-shi-wei-fu-wu-de-shi-xian/">
        </link>
        <updated>2021-04-21T05:59:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="分布式系统">分布式系统</h2>
<p>微服务就是原来臃肿的项目拆分为多个模块互不关联。如：按照子服务拆分、数据库、接口，依次往下就更加细粒度，当然运维也就越来越难受了。</p>
<p>分布式则是偏向与机器将诺大的系统划分为多个模块部署在不同服务器上。</p>
<p>微服务和分布式就是作用的“目标不一样”。</p>
<h2 id="微服务与cloud">微服务与Cloud</h2>
<p>微服务是一种概念，spring-cloud是微服务的实现。</p>
<p>微服务也不一定必须使用cloud来实现，只是微服务中有许多问题，如：负载均衡、服务注册与发现、路由等等。</p>
<p>而cloud则是将这些处理问题的技术整合了。</p>
<h2 id="spring-cloud-组件">Spring-Cloud 组件</h2>
<p><strong>Eureka</strong></p>
<p>Eureka是Netifix的子模块之一，Eureka有2个组件，一个EurekaServer 实现中间层服务器的负载均衡和故障转移，一个EurekaClient它使得与server交互变得简单。</p>
<p>Spring-Cloud封装了Netifix公司开发的Eureka模块来实现服务注册和发现。</p>
<p>通过Eureka的客户端 Eureka Server维持心跳连接，维护可以更方便监控各个微服务的运行。</p>
<p><strong>角色关系图</strong></p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/720w.jpeg" alt="img" loading="lazy"></figure>
<p><strong>Eureka使用</strong></p>
<p>客户端</p>
<pre><code>&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
server:
port: 4001
eureka:
client:
serviceUrl:
defaultZone: http://localhost:3000/eureka/ #eureka服务端提供的注册地址 参考服务端配置的这个路径
instance:
instance-id: admin-1 #此实例注册到eureka服务端的唯一的实例ID
prefer-ip-address: true #是否显示IP地址
leaseRenewalIntervalInSeconds: 10 #eureka客户需要多长时间发送心跳给eureka服务器，表明它仍然活着,默认为30 秒 (与下面配置的单位都是秒)
leaseExpirationDurationInSeconds: 30 #Eureka服务器在接收到实例的最后一次发出的心跳后，需要等待多久才可以将此实例删除，默认为90秒

spring:
application:
name: server-admin #此实例注册到eureka服务端的name
</code></pre>
<p>服务端</p>
<pre><code>&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-
netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;
yml文件声明 
server:
port: 3000
eureka:
server:
enable-self-preservation: false #关闭自我保护机制
eviction-interval-timer-in-ms: 4000 #设置清理间隔
（单位：毫秒 默认是60*1000）
instance:
hostname: localhost 
client:
registerWithEureka: false #不把自己作为一个客户端注册到自己身上
fetchRegistry: false #不需要从服务端获取注册信息
（因为在这里自己就是服务端，而且已经禁用自己注册了）
serviceUrl:
defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka
在SpringBoot 启动项目中加入注解:@EnableEurekaServer 
就可以启动项目了，访问对应地址就可以看到界面。
</code></pre>
<p><strong>Eureka 集群</strong></p>
<p>服务启动后Eureka Server会向其他服务server 同步，当消费者要调用服务提供者，则向服务注册中心获取服务提供者的地址，然后将提供者的地址缓存到本地，下次调用时候直接从本地缓存中获取</p>
<p>yml 服务端</p>
<pre><code>server:
port: 3000
eureka:
server:
enable-self-preservation: false #关闭自我保护机制
eviction-interval-timer-in-ms: 4000 #设置清理间隔
（单位：毫秒 默认是60*1000）
instance:
hostname: eureka3000.com 
client:
registerWithEureka: false #不把自己作为一个客户端
注册到自己身上
fetchRegistry: false #不需要从服务端获取注册信息
（因为在这里自己就是服务端，而且已经禁用自己注册了）
serviceUrl:
defaultZone: http://eureka3001.com:3001/eureka,
http://eureka3002.com:3002/eureka
(这里不注册自己，注册到其他服务上面以为会同步。)
</code></pre>
<p><strong>yml 客户端</strong></p>
<pre><code>server:
port: 4001
eureka:
client:
serviceUrl:
defaultZone:http://localhost:3000/eureka/,http://
eureka3001.com:3001/eureka,http://eureka3002.com:3 002
/eureka #eureka服务端提供的注册地址 参考服务端配置的这个路径
instance:
instance-id: admin-1 #此实例注册到eureka服务端的唯一的实例ID
prefer-ip-address: true #是否显示IP地址
leaseRenewalIntervalInSeconds: 10 #eureka客户需要多长时间发
送心跳给eureka服务器，表明它仍然活着,默认为30 秒 (与下面配置的单位都是秒)
leaseExpirationDurationInSeconds: 30 #Eureka服务器在
接收到实例的最后一次发出的心跳后，需要等待多久才可以将此实例删除，默认为90秒

spring:
application:
name: server-admin #此实例注册到eureka服务端的name
</code></pre>
<p><strong>CAP定理</strong></p>
<pre><code>C：Consistency 一致性
A：Availability 可用性
P：Partition tolerance 分区容错性
这三个指标不能同时达到
</code></pre>
<p><strong>Partition tolerance</strong></p>
<p>分区容错性，大多数分布式系统都部署在多个子网络。每一个网络是一个区。区间的通信是可能失败的如一个在本地，一个在外地，他们之间是无法通信的。分布式系统在设计的时候必须要考虑这种情况。</p>
<p><strong>Consistency</strong></p>
<p>一致性，写操作后的读取，必须返回该值。如：服务器A1和服务器A2，现在发起操作将A1中V0改为V1，用户去读取的时候读到服务器A1得到V1，如果读到A2服务器但是服务器</p>
<p>还是V0，读到的数据就不对，这就不满足一致性。</p>
<p>所以让A2返回的数据也对，的让A1给A2发送一条消息，把A2的V0变为V1，这时候不管从哪里读取都是修改后的数据。</p>
<p><strong>Availability</strong></p>
<p>可用性就是用户只要给出请求就必须回应，不管是本地服务器还是外地服务器只要接收到就必须做出回应，不管数据是否是最新必须做出回应，负责就不是可用性。</p>
<p><strong>C与A矛盾</strong></p>
<p>一致性和可用性不能同时成立，存在分区容错性，通信可能失败。</p>
<p>如果保证一致性，A1在写操作时，A2的读写只能被锁定，只有等数据同步了才能读写，在锁定期间是不能读写的就不符合可用性。</p>
<p>如果保持可用性，那么A2就不会被锁定，所以一致性就不能成立。</p>
<p>综上 无法做到一致性和可用性，所以系统在设计的时候就只能选其一。</p>
<p><strong>Eureka与Zookeeper</strong></p>
<p>Zookeeper遵循的是CP原则保持了一致性，所以在master节点因为网络故障与剩余“跟随者”接点失去联系时会重新选举“领导者”，选取“领导者”大概会持续30-120s的时间，且选举的时候整个zookeeper是不可用的。导致在选举的时候注册服务瘫痪。</p>
<p>Eureka在设计的时候遵循AP可用性。Eureka各个接点是公平的，没有主从之分，down掉几个几点也没问题，其他接点依然可以支持注册，只要有一台Eureka在，注册就可以用，只不过查询到的数据可能不是最新的。Eureka有自我保护机制，如果15分钟之内超过85%接点都没有正常心跳，那么Eureka认为客户端与注册中心出现故障，此时情况可能是</p>
<p>Eureka不在从注册列表移除因为长时间没有瘦到心跳而过期的服务。</p>
<p>Eureka仍然能够接收注册和查询，但不会同步到其他接点。</p>
<p>当网络稳定后，当前的 实例注册信息会更新到其他接点。</p>
<p><strong>Ｒibbon</strong></p>
<p>rebbon主要提供客户端的负载均衡，提供了一套完善的客户端的配置。Rebbin会自动帮助你基于某种规则（如：简单的轮询，随机链接等）。</p>
<p>服务端的负载均衡是一个url通过一个代理服务器，然后通过代理服务器（策略：轮询，随机 ，权重等等），反向代理到你的服务器。</p>
<p>客户端负载均衡是通过一个请求在客户端已经声明了要调用那个服务，然后通过具体算法来完成负载均衡。</p>
<p><strong>Ｒibbon使用</strong></p>
<p>引入依赖，Eureka以及把Ribbon集成在里面。</p>
<p>使用Ribbon只有在RestTemplate上面加入@LoadBalanced注解。</p>
<p><strong>Feign负载均衡</strong></p>
<p>feign是一个声明式的webService客户端，使用feign会让编写webService更简单，就是定义一个接口加上注解。</p>
<p>feign是为了编写java http客户端更加简单，在Ribbon+RestTemplate此基础上进一步封装，简化了使用Spring Cloud Ribbon时，自动封装服务调用客户端的开发量。</p>
<p><strong>Feign使用</strong></p>
<pre><code>引入依赖
&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;
&lt;/dependency&gt;
在启动类上加@EnableFeignClients
然后在接口上加@FeignClient(&quot;SERVER-POWER&quot;)注解其中参数就是服务的名字。
</code></pre>
<p><strong>Feign集成Ribbon</strong></p>
<p>利用Ribbon维护服务列表信息，融合了Ribbon的负载均衡配置，与Ribbon不同的是Feign只需要定义服务绑定接口以声明的方式，实现简答的服务调用。</p>
<h2 id="hystrix断路器">hystrix断路器</h2>
<p>是一种用于处理分布式系统延迟和容错的开源库。在分布式系统中许多依赖不可避免的会调用失败，比如超时、异常等，断路器保证出错不会导致整体服务失败，避免级联故障。</p>
<p>断路器其实就是一种开关设置，类似保险丝，像调用方返回一个符合预期的、可处理的备选响应，而不是长时间等待或者抛出无法处理的异常，保证服务调用方线程不会被长时间 不必要占用，从而避免了在分布式系统中蔓延，乃至雪崩。</p>
<p>微服务中 client-&gt;微服务A-&gt;微服务B-&gt;微服务C-&gt;微服务D,其中微服务B异常了，所有请求微服务A的请求都会卡在B这里，就会导致线程一直累积在这里，那么其他微服务就没有可用线程，导致整个服务器雪崩。</p>
<p>针对这方案有 服务限流、超时监控、服务熔断、服务降级</p>
<p><strong>降级 超时</strong></p>
<p>降级就是服务响应过长 ，或者不可用了，就是服务调用不了了，我们不能把错误信息返回出来，或者长时间卡在哪里，所以要准备一个策略当发生这种问题我们直接调用这个方法快速返回这个请求，不让他一直卡在那。</p>
<p>要在调用方做降级（要不然那个微服务都down掉了在做降级就没有意义）。</p>
<p>引入hystrix依赖</p>
<pre><code>&lt;dependency&gt; 
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt; 
&lt;/dependency&gt;
在启动类上加入@EnableHystrix 或者@EnableCircuitBreaker。
@RequestMapping(&quot;/feignPower.do&quot;) 
@HystrixCommand(fallbackMethod = &quot;fallbackMethod&quot;) 
public Object feignPower(String name){ 
return powerServiceClient.power(); 
} 
fallbackMethod：
public Object fallbackMethod(String name){ 
System.out.println(name); 
return R.error(&quot;降级信息&quot;); 
}
这里的降级信息具体内容根据业务需求来，比如返回一个默认的查询信息等等。
hystrix有超时监听，当你请求超过1秒 就会超时，这个是可以配置的
</code></pre>
<p>这里的降级信息具体内容根据业务需求来，比如返回一个默认的查询信息等等。</p>
<p>hystrix有超时监听，当你请求超过1秒 就会超时，这个是可以配置的</p>
<p><strong>降级什么用</strong></p>
<p>第一他可以监听服务有没有超时。第二报错了他这里直接截断了没有让请求一直卡在这个。</p>
<p>其实降级，当你系统迎来高并发的时候，这时候发现系统马上承载不了这个大的并发 ，可以先关闭一些不重要 的微服务（就是在降级方法返回一个比较友好的信息）把资源让出来给主服务，其实就是整体资源不够用了，忍痛关闭某些服务，待过渡后再打开。</p>
<p><strong>熔断限流</strong></p>
<p>熔断就像生活中的跳闸，比如电路故障了，为了防止事故扩大，这里切断你的电源以免意外发生。当一个微服务调用多次，hystrix就会采取熔断  机制，不在继续调用你的方法，会默认短路，5秒后试探性的先关闭熔断机制，如果在这时候失败一次会直接调用降级方法，一定程度避免雪崩，</p>
<p>限流，限制某个微服务使用量，如果线程占用超过了，超过的就会直接降级该次调用。</p>
<p><strong>Feign整合hystrix</strong></p>
<pre><code>feign默认支持hystrix，需要在yml配置中打开。
feign: 
hystrix: 
enabled: true

降级方法
@FeignClient(value = &quot;SERVER-POWER&quot;, fallback = PowerServiceFallBack.class)
public interface PowerServiceClient {

@RequestMapping(&quot;/power.do&quot;)
public Object power(@RequestParam(&quot;name&quot;) String name);
}

在feign客户端的注解上 有个属性叫fallback 然后指向一个类 PowerServiceClient 
@Component
public class PowerServiceFallBack implements PowerServiceClient {
@Override
public Object power(String name) {
return R.error(&quot;测试降级&quot;);
}
}
</code></pre>
<h2 id="zuul-网关">Zuul 网关</h2>
<p>zuul包含了对请求的路由和过滤两个主要功能</p>
<p>路由是将外部请求转发到具体的微服务实例上。是实现统一入口基础而过滤器功能负责对请求的处理过程干预，是实现请求校验等功能。</p>
<p>Zuul与Eureka进行整合，将zuul注册在Eureka服务治理下，同时从Eureka获取其他服务信息。（zuul分服务最终还是注册在Eureka上）</p>
<p><strong>路由</strong></p>
<pre><code>&lt;dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt;
&lt;/dependency&gt;
dependency&gt;
&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
&lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;
&lt;/dependency&gt;
最后要注册在Eureka上所以需要引入eureka依赖
YML
server:
port: 9000
eureka:
client:
serviceUrl:
defaultZone: http://localhost:3000/eureka/ #eureka服务端提供的注册地址 参考服务端配置的这个路径
instance:
instance-id: zuul-0 #此实例注册到eureka服务端的唯一的实例ID
prefer-ip-address: true #是否显示IP地址
leaseRenewalIntervalInSeconds: 10 #eureka客户需要多长时间发送心跳给eureka服务器，表明它仍然活着,默认为30 秒 (与下面配置的单位都是秒)
leaseExpirationDurationInSeconds: 30 #Eureka服务器在接收到实例的最后一次发出的心跳后，需要等待多久才可以将此实例删除，默认为90秒

spring:
application:
name: zuul #此实例注册到eureka服务端的name 
启动类 @EnableZuulProxy

在实际开发当中我们肯定不会/server-power这样通过微服务调用，
可能只要一个/power就好了 
zuul: 
routes:
mypower: 
serviceId: server-power 
path: /power/** 
myorder: 
serviceId: server-order 
path: /order/**
注意/**代表是所有层级 /* 是代表一层。
一般我们会禁用服务名调用
ignored-services：server-order 这样就不能通过此服务名调用，
不过这个配置如果一个一个通微服务名字设置太复杂
一般禁用服务名 ignored-services：“*”
有时候要考虑到接口调用需要一定的规范，比如调用微服务URL需要前缀/api，可以加上一个prefix
prefix：/api 在加上strip-prefix: false /api前缀是不会出现在路由中
zuul:
prefix: /api
ignored-services: &quot;*&quot;
stripPrefix: false
routes:
product:
serviceId: server-product
path: /product/**
order:
serviceId: server-order
path: /order/**
</code></pre>
<p><strong>过滤器</strong></p>
<p>过滤器(filter)是zuul的核心组件，zuul大部分功能是通过过滤器实现的，zuul中定义了4种标准过滤器类型，这些过滤器类型对应与请求的生命周期，</p>
<p>PRE：这种过滤器在请求路由前被调用，可利用过滤器进行身份验证，记录请求微服务的调试信息等。</p>
<p>ROUTING：这种过滤器将请求路由到微服务，这种过滤器用于构建发送给微服务请求，并使用 Apache HttpClient或Netfix Ribbon请求微服务。</p>
<p>POST：这种过滤器在路由微服务后执行，可用来相应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端。</p>
<p>ERROR：在其他阶段发送错误时执行过滤器</p>
<p><strong>继承ZuulFilter</strong></p>
<pre><code>@Component
public class LogFilter extends ZuulFilter { 
@Override
public String filterType() {
return FilterConstants.PRE_TYPE;
}

@Override
public int filterOrder() {
return FilterConstants.PRE_DECORATION_FILTER_ORDER+1;
}

@Override
public boolean shouldFilter() {
return true;
}

@Override
public Object run() throws ZuulException {
RequestContext ctx = RequestContext.getCurrentContext();
//被代理到的微服务
String proxy = (String)ctx.get(&quot;proxy&quot;);
//请求的地址
String requestURI = (String)ctx.get(&quot;requestURI&quot;);
//zuul路由后的url
System.out.println(proxy+&quot;/&quot;+requestURI);
HttpServletRequest request = ctx.getRequest();
String loginCookie = CookieUtil.getLoginCookie(request);
ctx.addZuulRequestHeader(&quot;login_key&quot;,loginCookie);
return null;
}
}
</code></pre>
<p>由此可知道自定义zuul Filter要实现以下几个方法。</p>
<p>filterType：返回过滤器类型，有pre、route、post、erro等几种取值</p>
<p>filterOrder：返回一个int值指定过滤器的顺序，不同过滤器允许返回相同数字。</p>
<p>shouldFilter：返回一个boolean判断过滤器是否执行，true执行，false不执行。</p>
<p>run：过滤器的具体实现。</p>
<p>Spting-Cloud默认为zuul编写并开启一些过滤器。如果要禁用部分过滤器，只需在application.yml里设置zuul…disable=true，例如zuul.LogFilter.pre.disable=true</p>
<p>zuul也整合了了hystrix和ribbon的， 提供降级回退，继承FallbackProvider 类 然后重写里面的方法。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入理解Java8]]></title>
        <id>https://kangjn.github.io/post/shen-ru-li-jie-java8/</id>
        <link href="https://kangjn.github.io/post/shen-ru-li-jie-java8/">
        </link>
        <updated>2021-04-21T03:27:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="lambda的基本语法">Lambda的基本语法</h3>
<p>(parm1,parm1,parm1) -&gt;{<br>
};</p>
<blockquote>
<p>lambda表达式结构</p>
</blockquote>
<ul>
<li>一个lambda表达式可以有零个或多个参数</li>
<li>参数的类型既可以明确声明，也可以根据上下文来推断</li>
<li>所有参数需包含在圆括号内，参数之间用逗号相隔</li>
<li>空圆括号代表参数集为空</li>
<li>当只有一个参数，且其类型可推导时，圆括号()可省略</li>
<li>Lambda表达式的主体可包含零条或多条语句</li>
<li>如果Lambda表达式的主题只有一条语句，花括号{}可以省略。匿名函数的返回类型与该主体表达式一致</li>
<li>如果Lambda表达式的主题包含一条以上语句，则表达式必须包含再花括号{}中。匿名函数的返回类型与代码块的返回类型一致，若没有则返回为空</li>
</ul>
<blockquote>
<p>函数式接口</p>
</blockquote>
<ul>
<li>一个接口中只有一个抽象的方法</li>
<li>声明函数式接口时，在接口上添加<code>@FunctionalInterface</code>注解，这样编译器会按照函数式接口去验证</li>
<li>一个接口中只有一个抽象方法时，编译器会默认这个接口为函数式接口</li>
<li>接口中定义的方法为定级父类Object类中的方法时，接口可以拥有两个及以上的方法。因为接口的实现类也会继承Object,所以编译器会认为接口中只有一个方法</li>
</ul>
<blockquote>
<p>注意点</p>
</blockquote>
<ul>
<li>在Python、JavaScript等语言中lambda为函数，在java中lambda为对象</li>
<li>在java8中，接口中可以有具体方法的实现，必须是<code>default meathod</code></li>
<li>在java中可以使用静态方法</li>
</ul>
<h3 id="函数式接口如何实例">函数式接口如何实例</h3>
<blockquote>
<p>函数式方法的声明</p>
</blockquote>
<ol>
<li>采用lambda表达式的方式进行声明一个接口实例<br>
package funcationdemo;</li>
</ol>
<p>import java.util.Arrays;<br>
import java.util.List;</p>
<p>/**</p>
<ul>
<li>
<p>描述:</p>
</li>
<li>
<p>lambda表达式练习<br>
*/<br>
public class Test01 {<br>
public static void main(String[] args) {<br>
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 7);<br>
MyInterface myInterface = i -&gt; {<br>
return i;<br>
};<br>
list.forEach(i -&gt; System.out.println(myInterface.printElement(i)));</p>
<p>}<br>
}<br>
@FunctionalInterface<br>
interface MyInterface{<br>
Integer printElement(Integer i);<br>
}</p>
</li>
</ul>
<ol>
<li>采用方法引用的方式进行声明<br>
public class Test01 {<br>
public static void main(String[] args) {<br>
List<String> list2 = Arrays.asList(&quot;hello&quot;,&quot;world&quot;,&quot;hello world&quot;);<br>
list2.forEach(String::toUpperCase);<br>
}<br>
}</li>
<li>采用构造方法的方式进行声明<br>
package funcationdemo;</li>
</ol>
<p>/**</p>
<ul>
<li>描述:</li>
<li>lambda表达式练习<br>
*/<br>
public class Test01 {<br>
public static void main(String[] args) {<br>
MyInterface myInterface = Person::new;<br>
System.out.println(myInterface.getPerson(&quot;李华&quot;));<br>
}<br>
}</li>
</ul>
<p>@FunctionalInterface<br>
interface MyInterface {<br>
Person getPerson(String name);<br>
}</p>
<p>class Person {<br>
private String name;</p>
<pre><code>public Person(String name) {
    this.name = name;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

@Override
public String toString() {
    return &quot;Person{&quot; +
        &quot;name='&quot; + name + '\'' +
        '}';
}
</code></pre>
<p>}</p>
<h3 id="函数式接口四种类型">函数式接口四种类型</h3>
<p>函数式接口	方法	参数类型	返回类型	作用<br>
Consumer消费型接口	void accept(T t)	T	void	对T类型的参数进行操作<br>
Supplier供给型接口	T get()	无	T	操作数据，返回T类型的结果<br>
Function函数型接口	R apply(T t)	T	R	对T类型参数进行操作，并返回R类型的结果<br>
Predicate 断定型接口	boolean test(T t)	T	boolean	确定T类型参数是否满足某约束，并返回boolean值</p>
<h3 id="lambda表达式的作用">Lambda表达式的作用</h3>
<ul>
<li>传递行为，而不仅仅是值</li>
<li>提升抽象层次</li>
<li>API重用性更好</li>
<li>更加灵活</li>
</ul>
<h3 id="function接口">Function接口</h3>
<blockquote>
<p><strong>函数式接口中，可以进行传值，也可以进行行为的传递，可以让方法的使用者传递方法所需要实现的行为，方法本身做更加抽象的逻辑实现</strong><br>
package funcationdemo;</p>
</blockquote>
<p>import java.util.function.Function;</p>
<p>/**</p>
<ul>
<li>
<p>描述:</p>
</li>
<li>
<p>function 函数实现*<br>
*/<br>
public class FunctionTest {<br>
public static void main(String[] args) {<br>
FunctionTest functionTest = new FunctionTest();<br>
System.out.println(functionTest.compute(3, value -&gt; value * value));<br>
}</p>
<p>public int compute(int a, Function&lt;Integer, Integer&gt; function) {<br>
return function.apply(a);<br>
}<br>
}</p>
</li>
</ul>
<h4 id="bifunction接口">BiFunction接口</h4>
<p>package funcationdemo;</p>
<p>import java.util.function.BiFunction;<br>
import java.util.function.Function;</p>
<p>/****************************************</p>
<ul>
<li>描述:</li>
<li>BiFunction函数接口练习</li>
<li>Interface BiFunction&lt;T,U,R&gt;</li>
<li>
<pre><code> T - 函数的第一个参数类型
</code></pre>
</li>
<li>
<pre><code> U - 函数的第二个参数类型
</code></pre>
</li>
<li>
<pre><code> R - 函数结果的类型
</code></pre>
</li>
<li></li>
<li>
<pre><code> 表示接受两个参数并产生结果的函数。
</code></pre>
</li>
<li>
<pre><code> 是Function函数有两个参数的展现方式
</code></pre>
</li>
<li></li>
</ul>
<p>****************************************/<br>
public class BiFunctionTest {<br>
public static void main(String[] args) {<br>
BiFunctionTest test = new BiFunctionTest();<br>
//        求两个数之和<br>
System.out.println(test.compute(3, 4, Integer::sum));</p>
<p>//        System.out.println(test.compute2(3, 4, Integer::sum, item -&gt; item * item));<br>
//        等价于<br>
System.out.println(test.compute2(3, 4, (num1, num2) -&gt; num1 * num2, value -&gt; value * value));</p>
<pre><code>}

/**
 * public interface BiFunction&lt;T, U, R&gt; {
 * &lt;p&gt;
 * R apply(T t, U u);
 * &lt;p&gt;
 * &lt;p&gt;
 * }
 */
public int compute(int num1, int num2, BiFunction&lt;Integer, Integer, Integer&gt; function) {
    return function.apply(num1, num2);
}


/****
 *  default &lt;V&gt; BiFunction&lt;T, U, V&gt; andThen(Function&lt;? super R, ? extends V&gt; after) {
 *         Objects.requireNonNull(after);
 *         return (T t, U u) -&gt; after.apply(apply(t, u));
 *     }
 * @param num1 计算的值
 * @param num2 计算的值
 * @param function 需要求和函数参数（函数参数指的是需要函数执行的行为）
 * @param function2 需要返回函数参数
 * @return 计算后返回的值
 */
public int compute2(int num1, int num2,
                    BiFunction&lt;Integer, Integer, Integer&gt; function,
                    Function&lt;Integer, Integer&gt; function2) {
    return function.andThen(function2).apply(num1, num2);
}
</code></pre>
<p>}</p>
<h4 id="binaryoperator接口">BinaryOperator接口</h4>
<p>package funcationdemo;</p>
<p>import java.util.Comparator;<br>
import java.util.function.BinaryOperator;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>BinaryOperator</li>
<li>表示对同一类型的两个操作数的操作，产生与操作数相同的结果。</li>
<li>对于操作数和结果都是相同类型的情况</li>
<li>是BiFunction的专业化</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class BinaryOperatorTest {<br>
public static void main(String[] args) {<br>
BinaryOperatorTest test = new BinaryOperatorTest();<br>
System.out.println(test.compute(3, 4, Integer::sum));<br>
System.out.println(test.minByComparator(5, 6, Comparator.comparingInt(num -&gt; num)));<br>
}</p>
<pre><code>/****
 *
 * 继承 BiFunction&lt;T,T,T&gt; ,也拥有 apply()方法
 * 三个参数必须是同类型的
 *
 * public interface BinaryOperator&lt;T&gt; extends BiFunction&lt;T,T,T&gt; {
 *
 * }
 *
 *
 * @param num1
 * @param num2
 * @param function
 * @return
 */
public int compute(int num1, int num2, BinaryOperator&lt;Integer&gt; function) {
    return function.apply(num1, num2);
}

/***
 *
 *     public static &lt;T&gt; BinaryOperator&lt;T&gt; minBy(Comparator&lt;? super T&gt; comparator) {
 *         Objects.requireNonNull(comparator);
 *         return (a, b) -&gt; comparator.compare(a, b) &lt;= 0 ? a : b;
 *     }
 *
 * @param num1 比较参数1
 * @param num2 比较数字2
 * @param comparator 比较器
 * @return 返回比较的结果
 */

public int minByComparator(int num1, int num2, Comparator&lt;Integer&gt; comparator) {
    return BinaryOperator.minBy(comparator).apply(num1, num2);
}
</code></pre>
<p>}</p>
<h3 id="consumer接口">Consumer接口</h3>
<p>package funcationdemo;</p>
<p>import java.util.Arrays;<br>
import java.util.List;<br>
import java.util.Optional;<br>
import java.util.function.Consumer;</p>
<p>/*********************************************************</p>
<ul>
<li>描述:</li>
<li>Consumer函数</li>
<li>表示接受单个输入参数并且不返回结果的操作</li>
<li></li>
</ul>
<p>********************************************************/<br>
public class ConsumerTest {<br>
public static void main(String[] args) {<br>
List<String> list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;);<br>
list.forEach(str-&gt;{<br>
String strParam = str;<br>
Optional<String> optional = Optional.ofNullable(strParam);<br>
String rtn = optional.map(strParam1 -&gt; strParam1.toUpperCase()).orElse(&quot;&quot;);<br>
System.out.println(rtn);<br>
});</p>
<pre><code>}
</code></pre>
<p>}</p>
<h3 id="predicate接口">Predicate接口</h3>
<h4 id="结合stream流使用">结合Stream流使用</h4>
<p>package funcationdemo;</p>
<p>import java.util.Arrays;<br>
import java.util.List;<br>
import java.util.Optional;<br>
import java.util.function.Consumer;<br>
import java.util.function.Function;<br>
import java.util.function.Predicate;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>Predicate</li>
<li>
<pre><code> 表示一个参数的谓词
</code></pre>
</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class PredicateTest {<br>
public static void main(String[] args) {<br>
PredicateTest test = new PredicateTest();<br>
System.out.println(test.isTrueOfStr(&quot;hell0&quot;, str -&gt; str.length() &gt; 4));<br>
List<Integer> list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);<br>
//      Predicate 接口使用<br>
Predicate<Integer> predicate = i -&gt; i % 2 == 0;<br>
//       Optional 使用的函数<br>
Function&lt;Integer, Integer&gt; function = integer -&gt; {<br>
Optional<Integer> integerOptional = Optional.of(integer);<br>
Integer rtn = integerOptional.map(ele -&gt; 2 * ele).get();<br>
return rtn;<br>
};<br>
//      输出参数<br>
Consumer<Integer> consumer = param -&gt; {<br>
Optional<Integer> integer = Optional.ofNullable(param);<br>
Integer rtn = integer.map(function).get();<br>
System.out.println(rtn);<br>
};<br>
test.conditionFilter(list, predicate, consumer);<br>
}</p>
<pre><code>public boolean isTrueOfStr(String str, Predicate&lt;String&gt; funciton) {
    return funciton.test(str);
}

public void conditionFilter(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate, Consumer&lt;Integer&gt; consumer) {
    list.stream().filter(predicate).forEach(consumer);
}
</code></pre>
<p>}</p>
<h3 id="supplier接口">Supplier接口</h3>
<p>package funcationdemo;</p>
<p>import java.util.function.Supplier;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>Supplier</li>
<li>代表结果供应商，没有要求每次调用供应商时都会返回新的或不同的结果</li>
<li>不接受参数，返回一个结果。泛型就是需要返回结果的类型</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class SupplierTest {<br>
public static void main(String[] args) {<br>
Supplier<String> supplier = String::new;<br>
String str = supplier.get();<br>
str = &quot;hello world&quot;;<br>
System.out.println(str);<br>
}<br>
}</p>
<h3 id="methodreference">MethodReference</h3>
<blockquote>
<p><strong>方法引用是用来直接访问类或者实例的已经存在的方法或者构造方法。<code>方法引用提供了一种引用而不执行方法的方式</code>，它需要由兼容的函数式接口构成的目标类型上下文。计算时，方法引用会创建函数式接口的一个实例。</strong></p>
</blockquote>
<h4 id="引用静态方法containingclassstaticmethodname">引用静态方法：ContainingClass::staticMethodName</h4>
<p>package methodreference;</p>
<p>import java.util.Arrays;<br>
import java.util.List;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>MethodReference</li>
<li>方法引用</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class MethodReferenceTest {</p>
<pre><code>static void toUpperCaseByStr(String str) {
    System.out.println(str.toUpperCase());
}

public static void main(String[] args) {
    List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;);
</code></pre>
<p>//        ContainingClass::staticMethodName 引用静态方法<br>
list.forEach(MethodReferenceTest::toUpperCaseByStr);<br>
}<br>
}</p>
<h4 id="引用某个对象的实例方法containingobjectinstancemethodname">引用某个对象的实例方法：containingObject::instanceMethodName</h4>
<p>package methodreference;</p>
<p>import java.util.Arrays;<br>
import java.util.List;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>MethodReference</li>
<li>方法引用</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class MethodReferenceTest {</p>
<pre><code>void toUpperCaseByStr(String str) {
    System.out.println(str.toUpperCase());
}

public static void main(String[] args) {
    List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;);
    //      引用某个对象的实例方法
    MethodReferenceTest test = new MethodReferenceTest();
    list.forEach(test::toUpperCaseByStr);
}
</code></pre>
<p>}</p>
<h4 id="引用某个类型的任意对象的实例方法containingtypemethodname">引用某个类型的任意对象的实例方法：ContainingType::methodName</h4>
<p>package methodreference;</p>
<p>import java.util.Arrays;<br>
import java.util.List;<br>
import java.util.function.Consumer;</p>
<p>/**************************************************************</p>
<ul>
<li>描述:</li>
<li>MethodReference</li>
<li>方法引用</li>
<li></li>
</ul>
<p>**************************************************************/<br>
public class MethodReferenceTest{</p>
<pre><code>public static void main(String[] args) {
    /*引用某个类型的任意对象的实例方法*/
    List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;, &quot;world&quot;, &quot;hello world&quot;);
    list.sort(String::compareTo);
    list.forEach(System.out::println);
}
</code></pre>
<p>}</p>
<h4 id="引用构造方法classnamenew">引用构造方法：ClassName::new</h4>
<pre><code>package methodreference;

import java.util.function.Supplier;

/**************************************************************
 * 描述:
 *    MethodReference
 *    方法引用
 *
 **************************************************************/
public class MethodReferenceTest{

    public MethodReferenceTest() {
    }

    public String getString(Supplier&lt;String&gt; supplier){
        return supplier.get() +&quot;test&quot;;
    }
    public static void main(String[] args) {
        MethodReferenceTest test = new MethodReferenceTest();
        System.out.println(test.getString(String::new));
    }
}
</code></pre>
<h4 id="超类上的实例方法引用">超类上的实例方法引用</h4>
<p>**组成语法格式：super::methodName</p>
<p>方法的名称由methodName指定，通过使用<strong>super</strong>，可以引用方法的超类版本。</p>
<p>还可以捕获this 指针，this :: equals 等价于lambda表达式 x -&gt; this.equals(x);</p>
<h4 id="数组构造方法引用">数组构造方法引用</h4>
<p>**组成语法格式：TypeName[]::new</p>
<p>例子：</p>
<p>int[]::new 是一个含有一个参数的构造器引用，这个参数就是数组的长度。等价于lambda表达式 x -&gt; new int[x]。</p>
<p>假想存在一个接收int参数的数组构造方法</p>
<p>IntFunction arrayMaker =int[]::new;int[] array = arrayMaker.apply(10)// 创建数组 int[10]</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 教程（三）：Docker 命令]]></title>
        <id>https://kangjn.github.io/post/docker-jiao-cheng-san-docker-ming-ling/</id>
        <link href="https://kangjn.github.io/post/docker-jiao-cheng-san-docker-ming-ling/">
        </link>
        <updated>2021-04-21T03:10:11.000Z</updated>
        <content type="html"><![CDATA[<p>我们通过 Docker 命令与操作 Docker 服务，可以构建 Docker 镜像、运行 Docker 容器、将 Docker 镜像推送到远程等。本文主要介绍一些常用的 Docker 命令。</p>
<p>请注意，根据在 Linux 系统上安装 Docker 的方式，可能需要在所有命令前面加上sudo，使用 root 权限运行他们。比如：</p>
<p>sudo docker build .</p>
<p>… 而不仅仅是：</p>
<p>docker build .</p>
<p>Docker 命令行工具</p>
<p>在 Linux 系统中安装 Docker 时，会安装一个名为docker的命令行工具，可以在 Linux 命令行执行。</p>
<p>docker有很多的参数，不同的参数作用不同，可以指挥 Docker 做出不同的行为，可以认为是给 Docker 的命令。以下是docker命令示例：</p>
<p>docker build .</p>
<p>这个示例中包含三部分：docker命令、参数build、参数.。</p>
<p>参数build是一个 Docker 命令，换句话说，是一个给 docker 可执行命令行的命令。通常，docker 命令行的第一个参数都是 Docker 命令。</p>
<p>参数.是build命令的参数。<br>
docker build</p>
<p>docker build命令是调用 Docker 从 Dockerfile 文件构建 docker 镜像，要使用docker build命令，必须告诉它从哪个 Dockerfile 文件生成镜像。关于 Dockerfile 的内容，可以查看 这里。以下是docker build命令示例：</p>
<p>docker build .</p>
<p>参数.表示从当前目录找到 Dockerfile 文件。<br>
docker images</p>
<p>docker images命令是列出本机的 Docker 镜像，以下是docker images命令示例：</p>
<p>docker images</p>
<p>运行上述命令会输出类似下面的内容：</p>
<p>REPOSITORY       TAG        IMAGE ID        CREATED          SIZE<br>
hello-world      latest     fce289e99eb9    9 months ago     1.84kB</p>
<p>docker run</p>
<p>docker run命令用来基于给定的 Docker 镜像运行 Docker 容器，docker run的参数，可以是 Docker 镜像的名称或 ID，以下是运行 Docker 容器的示例：</p>
<p>docker run hello-world</p>
<p>这个例子会基于hello-world镜像运行 Docker 容器。</p>
<p>我们还可以通过 Docker 镜像 ID 运行 Docker 容器，命令如下：</p>
<p>docker run fce289e99eb9</p>
<p>docker ps</p>
<p>docker ps命令用于显示当前系统中正在运行的 Docker 容器，示例如下：</p>
<p>docker ps</p>
<p>注意，一些 Docker 容器会在完成任务后立即关闭，在docker ps的结果列表中，这种 Docker 容器很有可能会很长时间都不可见。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 教程（二）：Dockerfile]]></title>
        <id>https://kangjn.github.io/post/lesslessdocker-jiao-cheng-greatergreater-er-dockerfile/</id>
        <link href="https://kangjn.github.io/post/lesslessdocker-jiao-cheng-greatergreater-er-dockerfile/">
        </link>
        <updated>2021-04-21T03:07:15.000Z</updated>
        <content type="html"><![CDATA[<p>Dockerfile包含一组关于如何构建Docker镜像的说明，通过<code>docker build</code>命令执行Dockerfile文件，可以构建一个Docker镜像，本文介绍了如何编写Dockerfile文件以及构建一个Docker镜像。</p>
<h2 id="dockerfile的好处">Dockerfile的好处</h2>
<p>Dockerfile文件以书面形式说明了如何构建一个Docker镜像，Docker镜像通常包含如下内容：</p>
<ul>
<li>首先需要一个基本的Docker镜像，在这个基础Docker镜像上构建自己的Docker镜像。</li>
<li>一组需要安装在Docker镜像中的工具和应用。</li>
<li>一组需要复制到Docker镜像中的文件（比如配置文件）。</li>
<li>可能需要在防火墙中打开的网络（TPC/UDP）端口或其他。</li>
<li>等等。。。</li>
</ul>
<p>首先，在Dockerfile文件中以书面形式说明这些，就意味着，我们不用特意记住应用程序如何安装，包括操作系统什么要求、需要安装的应用程序、需要赋值的文件、需要打开的网络端口等，这些内容都被记录在Dockerfile中。</p>
<p>另外，通过Dockerfile文件构建Docker镜像，我们不需要手动执行这些繁琐重复且容易出错的工作。Docker会自动做这些事情，简单、快速、且不容易出错。</p>
<p>第三，我们很容易和其他人分享Dockerfile文件，并且他们可以自己构建Docker镜像。</p>
<p>第四，Dockerfile很容易存储在Git这样的版本控制器中，这样就可以跟踪Dockerfile（服务器、应用配置）的变更记录。版本控制器也可以很容易的让人们协同合作，比如在Dockerfile上，以及分享Dockerfile。</p>
<h2 id="dockerfile的结构">Dockerfile的结构</h2>
<p>Dockerfile包含一组指令，每个指令有一个命令和参数组成，类似于命令行可执行文件。下面是一个Dockerfile简单示例：</p>
<pre><code class="language-dockerfile"># 基础镜像
FROM ubuntu:latest

# 这里可以有更多安装软件和复制文件到镜像中的说明。
COPY    /myapp/target/myapp.jar    /myapp/myapp.jar

# 在Docker容器中执行的命令。
CMD echo Starting Docker Container
</code></pre>
<h2 id="docker基础镜像">Docker基础镜像</h2>
<p>Docker镜像是由层组成，每一层都会为最终的Docker镜像添加一些内容。每一个层实际上都是一个单独的Docker镜像，所以说，Docker镜像是由一个或多个层镜像组成，我们可以在其上添加自己的层。</p>
<p>当通过Dockerfile文件指定自己的Docker镜像时，通常是从一个Docker基础镜像开始。这是另一个Docker镜像，可以在其上构建自己的Docker镜像。这个Docker基础镜像本身可能也包含多个层，并且是基于另一个基础镜像构建的。</p>
<p>我们可以使用<code>From</code>命令在Dockerfile文件中指定Docker镜像作为基础镜像，如下节所述。</p>
<h2 id="maintainer">MAINTAINER</h2>
<p><code>MAINTAINER</code>命令用于说明谁在维护这个Dockerfile文件。比如：</p>
<pre><code class="language-dockerfile">MAINTAINER   Joe Blocks &lt;joe@blocks.com&gt;
</code></pre>
<p><code>MAINTAINER</code>命令并不常用，因为这类信息在Git存储或其他地方有了。</p>
<h2 id="from">FROM</h2>
<p><code>FROM</code>命令用于指定Docker基础镜像，如果是从原始Linux镜像开始，可以使用如下命令：</p>
<pre><code class="language-dockerfile"># 基础镜像
FROM ubuntu:latest
</code></pre>
<h2 id="cmd">CMD</h2>
<p><code>CMD</code>命令用于指定启动Docker容器是需要执行的命令，该容器是基于此Dockerfile构建的Docker镜像，下面是一些Dockerfile的<code>CMD</code>示例：</p>
<pre><code class="language-dockerfile">CMD echo Docker container started.
</code></pre>
<p>本例是打印“Docker container started”这行文本。</p>
<p>下一个<code>CMD</code>示例是启动一个java应用：</p>
<pre><code class="language-dockerfile">CMD java -cp /myapp/myapp.jar com.jenkov.myapp.MainClass arg1 arg2 arg3
</code></pre>
<h2 id="copy">COPY</h2>
<p><code>COPY</code>命令将一个或多个文件从主机（从Dockerfile文件构建Docker镜像的机器）复制到Docker镜像中，可以复制的内容包括文件或目录，下面是一个示例：</p>
<pre><code class="language-dockerfile">COPY    /myapp/target/myapp.jar    /myapp/myapp.jar
</code></pre>
<p>这个例子是把主机的/myapp/target/myapp.jar文件复制到Docker进行中的/myapp/myapp.jar文件。第一个参数是主机路径（从哪里来），第二个参数是Docker镜像的路径（到哪里去）。</p>
<p>我们还可以复制一个目录到Docker镜像中，比如：</p>
<pre><code class="language-dockerfile">COPY    /myapp/config/prod    /myapp/config
</code></pre>
<p>这个例子是把主机的/myapp/config/prod目录复制到Docker镜像中的/myapp/config目录。</p>
<p>我们还可以复制多个文件到Docker镜像中的一个目录中，比如：</p>
<pre><code class="language-dockerfile">COPY    /myapp/config/prod/conf1.cfg   /myapp/config/prod/conf2.cfg   /myapp/config/
</code></pre>
<p>这个例子是将主机的/myapp/config/prod/conf1.cfg文件和/myapp/conig/prod/conf2.cfg文件复制到Docker镜像中的/myapp/config/目录中。注意，目标目录必须以/（斜杠）结束才能工作。</p>
<h2 id="add">ADD</h2>
<p><code>ADD</code>命令与<code>COPY</code>命令工作方式相同，只有一些细微的差别：</p>
<ul>
<li><code>ADD</code>命令可以复制并提取TAR文件到Docker镜像中。</li>
<li><code>ADD</code>命令可以通过HTTP下载文件，并复制到Docker镜像中。</li>
</ul>
<p>下是一些示例：</p>
<pre><code class="language-dockerfile">ADD    myapp.tar    /myapp/
</code></pre>
<p>这个例子是将指定的TAR文件解压缩并提取到Docker镜像的/myapp/目录中。</p>
<p>下面是另一个例子：</p>
<pre><code class="language-dockerfile">ADD    http://jenkov.com/myapp.jar    /myapp/
</code></pre>
<h2 id="env">ENV</h2>
<p><code>ENV</code>命令是在Docker镜像中设置环境变量，此环境变量可用于<code>CMD</code>命令在Docker镜像内部启动应用程序。举个例子：</p>
<pre><code class="language-dockerfile">ENV    MY_VAR   123
</code></pre>
<p>本例将环境变量<code>MY_VAR</code>设置为值123。</p>
<h2 id="run">RUN</h2>
<p><code>RUN</code>可以在Docker镜像中执行命令行指令，执行时机是Docker镜像构建过程中，所以<code>RUN</code>命令只会执行一次。<code>RUN</code>命令可用于在Docker镜像中安装应用程序、提取文件或其他命令行功能，这些操作只需要执行一次，以供Docker镜像后续使用。</p>
<pre><code class="language-dockerfile">RUN apt-get install some-needed-app
</code></pre>
<h2 id="arg">ARG</h2>
<p><code>ARG</code>命令允许定义一个参数，这个参数可以在通过Dockerfile文件构建Docker镜像时，通过命令参数传递给Docker。比如：</p>
<pre><code class="language-dockerfile">ARG tcpPort
</code></pre>
<p>当执行<code>docker build</code>命令执行Dockerfile构建Docker镜像时，可以指定<code>tcpPort</code>参数，比如：</p>
<pre><code class="language-dockerfile">docker build --build-arg tcpPort=8080 .
</code></pre>
<blockquote>
<p>注意，<code>--build-arg</code>后面的<code>tcpPort=8080</code>，是将<code>tcpPort</code>参数的值设置为8080。</p>
</blockquote>
<p>我们可以通过多个<code>ARG</code>命令定义多个参数，举个例子：</p>
<pre><code class="language-dockerfile">ARG tcpPort
ARG useTls
</code></pre>
<p>当构建Docker镜像时，必须为所有构建参数提供值。【译者注，1.13版本之前，不提供值会直接报错，1.13版本之后，不提供值不会报错，但是会弹出警告】。举个例子：</p>
<pre><code class="language-dockerfile">docker build --build-arg tcpPort=8080 --build-arg useTls=true .
</code></pre>
<p>我们可以为<code>ARG</code>设置默认值，当构建Docker镜像时，如果没有指定参数值，将使用默认值。举个例子：</p>
<pre><code class="language-dockerfile">ARG tcpPort=8080
ARG useTls=true
</code></pre>
<p>如果<code>tcpPort</code>和<code>useTls</code>在生成Docker镜像时，都没有设置参数，将使用默认值8080和true。</p>
<p><code>ARG</code>声明的参数通常在Dockerfile的其他地方引用，比如：</p>
<pre><code class="language-dockerfile">ARG tcpPort=8080
ARG useTls=true

CMD start-my-server.sh -port ${tcpPort} -tls ${useTls}
</code></pre>
<blockquote>
<p>注意：两个引用<code>${tcpPort}</code>和<code>${useTls}</code>，引用名是<code>tcpPort</code>和<code>useTls</code>这两个<code>ARG</code>声明的参数。</p>
</blockquote>
<pre><code class="language-dockerfile">docker build --build-arg tcpPort=8080
</code></pre>
<h2 id="workdir">WORKDIR</h2>
<p><code>WORKDIR</code>命令指明了Docker镜像中的工作目录，工作目录将对<code>WORKDIR</code>指令之后的所有命令生效，举个例子：</p>
<pre><code class="language-dockerfile">WORKDIR    /java/jdk/bin
</code></pre>
<h2 id="expose">EXPOSE</h2>
<p><code>EXPOSE</code>命令将对外开放Docker容器中的网络端口，比如，如果Docker容器运行一个web服务器，那么，该web服务器可能需要打开端口80，以便客户端链接到它。举个例子：</p>
<pre><code class="language-dockerfile">EXPOSE   8080
</code></pre>
<p>我们还可以指明打开端口的通信协议，比如：UDP和TCP。下面是设置允许通信协议的示例：</p>
<pre><code class="language-dockerfile">EXPOSE   8080/tcp 9999/udp
</code></pre>
<p>如果没有指定协议，将默认认定为TCP协议。</p>
<h2 id="volume">VOLUME</h2>
<p><code>VOLUME</code>命令会在Docker镜像中创建一个目录，这个目录可以挂载到Docker主机上。换句话说，可以在Docker镜像中创建目录，比如<code>/data</code>，这个目录可以在稍后挂载到Docker主机的<code>/container-data/container1</code>目录上。挂载成功后，容器会启动。下面是一个使用<code>VOLUME</code>命令在Dockerfile中定义装载目录的示例：</p>
<pre><code class="language-dockerfile">VOLUME   /data
</code></pre>
<h2 id="entrypoint">ENTRYPOINT</h2>
<p><code>ENTRYPOINT</code>命令为从该Docker镜像启动Docker容器提供入口点，入口点是Docker容器启动时执行的应用程序或命令。这样，<code>ENTRYPOINT</code>和<code>CMD</code>工作方式类似，不同之处在于，使用<code>ENTRYPOINT</code>时，当<code>ENTRYPOINT</code>执行的应用程序完成时，Docker容器将关闭。因此，<code>ENTRYPOINT</code>使Docker镜像本身成为一个可执行命令，可以启动，完成后关闭。以下是<code>ENTRYPOINT</code>示例：</p>
<pre><code class="language-dockerfile">ENTRYPOINT java -cp /apps/myapp/myapp.jar com.jenkov.myapp.Main
</code></pre>
<p>这个示例将在容器启动时执行Java应用程序的主类<code>com.jenkov.myapp.Main</code>，当应用程序关闭时，Docker容器也会关闭。</p>
<h2 id="healthcheck">HEALTHCHECK</h2>
<p><code>HEALTHCHECK</code>命令可以定期执行健康检查，以监视Docker容器中运行的应用程序的运行状况。如果命令返回0，Docker将认为应用程序和容器正常，如果命令返回1，Docker会认为应用程序和容器不正常。示例如下：</p>
<pre><code class="language-dockerfile">HEALTHCHECK java -cp /apps/myapp/healthcheck.jar com.jenkov.myapp.HealthCheck https://localhost/healthcheck
</code></pre>
<p>这个示例中使用了java应用程序的<code>com.jenkov.myapp.HealthCheck</code>作为健康检查的命令，我们可以使用任何有意义的健康检查命令。</p>
<h3 id="健康检查间隔时间">健康检查间隔时间</h3>
<p>默认情况下，Docker每30秒执行一次<code>HEALTHCHECK</code>命令。如果想修改时间间隔，我们可以自定义时间，通过<code>--interval</code>参数，可以指定健康检查的检查间隔时间。下面是一个将<code>HEALTHCHECK</code>间隔设置为60秒的示例：</p>
<pre><code class="language-dockerfile">HEALTHCHECK --interval=60s java -cp /apps/myapp/healthcheck.jar com.jenkov.myapp.HealthCheck https://localhost/healthcheck
</code></pre>
<h3 id="健康检查开始时间">健康检查开始时间</h3>
<p>默认情况下，Docker会立即检查Docker容器的监控状况。但是，有些应用程序可能需要一段时间启动，因此，只有经过某段时间后再进行健康检查才有意义。我们可以使用<code>--start-period</code>参数设置健康检查开始时间。下面是一个将健康检查设置为5分钟的示例，在Docker开始健康检查之前，为容器和应用程序提供300秒（5分钟）的启动时间：</p>
<pre><code class="language-dockerfile">HEALTHCHECK --start-period=300s java -cp /apps/myapp/healthcheck.jar com.jenkov.myapp.HealthCheck https://localhost/healthcheck
</code></pre>
<h3 id="健康检查超时时间">健康检查超时时间</h3>
<p>健康检查很有可能超时，如果<code>HEALTCHECK</code>命令需要超过给定时间限制才完成，Docker将认为健康检查超时。可以使用<code>--timeout</code>参数设置超时时间，如下是设置超时时间为5秒的示例：</p>
<pre><code class="language-dockerfile">HEALTHCHECK --timeout=5s java -cp /apps/myapp/healthcheck.jar com.jenkov.myapp.HealthCheck https://localhost/healthcheck
</code></pre>
<blockquote>
<p>注意，如果健康检查超时，Docker也会认为容器不健康。</p>
</blockquote>
<h3 id="健康检查重复次数">健康检查重复次数</h3>
<p>如果<code>HEALTHCHECK</code>命令执行失败，有可能是结果返回1，或者执行超时，Docker会在认定容器不健康前，重试3次<code>HEALTHCHECK</code>命令，用于检查Docker容器是否返回健康状态。可以通过<code>--retries</code>设置重试次数。下面是将重试次数设置为5的示例：</p>
<pre><code class="language-dockerfile">HEALTHCHECK --retries=5 java -cp /apps/myapp/healthcheck.jar com.jenkov.myapp.HealthCheck https://local
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker 教程（一）：Docker 是什么]]></title>
        <id>https://kangjn.github.io/post/docker-jiao-cheng-yi-docker-shi-shi-me/</id>
        <link href="https://kangjn.github.io/post/docker-jiao-cheng-yi-docker-shi-shi-me/">
        </link>
        <updated>2021-04-21T03:04:33.000Z</updated>
        <content type="html"><![CDATA[<p>Docker 是一种将应用程序和服务器配置打包成 Docker  镜像的方法，使用了一种称为 Dockerfile 的简单打包规范。Docker 镜像可以启动多个多个实例，这些运行的实例被称为 Docker  容器。这个系列的内容主要包括讲解什么是 Docker 镜像、什么是容器、什么是 Dockerfile，以及如何创建、运行和发布等。</p>
<h2 id="docker-的优势">Docker 的优势</h2>
<p>使用 Dockerfile 打包应用和服务器配置最大的好处是：</p>
<ul>
<li>不会忘记服务器是如何配置的，这些配置信息都记录在 Dockerfile 中。</li>
<li>很容易在一个全新啊的 Docker 主机上运行应用程序，只需要将应用程序的 Docker 镜像部署到这台 Docker 主机上，然后启动它即可。</li>
<li>可以使用 Kubernetes 和 Swarm 轻松管理集群中的 Docker 容器。</li>
<li>目前许多云服务器平台可以很轻松的部署 Docker 容器，Docker 已经成为让云更加独立的部署方案。</li>
<li>Docker 容器可以很简单的实现在客户自己的服务器上按照你的应用程序。</li>
</ul>
<h2 id="什么是-docker-容器">什么是 Docker 容器</h2>
<p>Linux  操作系统有几个特性：运行在操作系统上运行容器化的应用程序，这些容器化的特性，运行将文件系统和网络在各个容器化应用程序之间彼此分离。换句话说，一个容器化应用程序，不能访问另一个容器化应用程序的文件系统或网络，除非增加特殊配置，允许这种操作。Docker 使用 Linux 的容器化特性，并通过一组易于使用的工具公开这些特性。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/introduction1.png" alt="什么是 Docker 容器" loading="lazy"></figure>
<h2 id="docker-容器-vs-虚拟机">Docker 容器 vs. 虚拟机</h2>
<p>Docker 容器在本质上类似于虚拟机，两者的不同之处在于，虚拟机在总栈上有一个额外的操作系统。也就是说，虚拟机有完整的操作系统，然后这个虚拟机运行在一个有操作系统的主机上。</p>
<p>Docker 容器与虚拟机的实现不同，它没有自己单独的操作系统，直接运行在所在主机的操作系统中。所以，Docker 容器足够小，因为它不包含虚拟机操作系统。Docker 容器运行的也很好，因为它不需要虚拟机的虚拟化。</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/introduction2.png" alt="Docker 容器 vs. 虚拟机" loading="lazy"></figure>
<h2 id="dockerfile">Dockerfile</h2>
<p>如前所述，我们可以通过一个按规则定义的 Dockerfile 文件，指定要包含在 Docker 容器中的内容。Dockerfile  文件包含了一组有 Docker 命令行工具执行的 Docker 指令，按照 Dockerfile 执行的结果是 Docker 镜像。我们可以从 <a href="http://tutorials.jenkov.com/docker/dockerfile.html">Dockerfile 教程</a> 中得到更详细的解释。【译者注：后续翻译完成后，将替换此处链接。】</p>
<h2 id="docker-镜像">Docker 镜像</h2>
<p>Docker 命令行工具按照 Dockerfile 中定义的结构执行指令时，会生产一个可移植、可运行的 Docker 镜像。这个  Docker 镜像中包含了所有 Docker 容器需要的文件和指令，同一个 Docker 镜像可以启动多个 Docker 容器。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/introduction3.png" alt="Docker 镜像" loading="lazy"></figure>
<h2 id="docker-仓库">Docker 仓库</h2>
<p>Docker 镜像可以存储在 Docker 仓库中，一个可以将 Docker 镜像上传、下载的存储仓库。Docker  仓库可以是私有的，只能你或者你的组织或者你指定的人管理其中的镜像，也可以是公有的，任何人都可以管理其中的镜像，或者是从中下载 Docker  镜像。</p>
<p>一个公有的 Docker 仓库，是运行潜在用户下载、安装和运行软件的很好的方式，只需要将应用程序打包为 Docker 镜像，上传到公有的 Docker 仓库中，你的用户就可以访问并使用它。</p>
<p>Docker 公司已将 Docker 仓库作为一项托管服务，提供了私有和公有两种服务。一些云服务商，比如 AWS、AZure 和  Google，也提供了 Docker 仓库服务器，可以上传自己的 Docker 镜像。很容易的就能在云基础设施上的虚拟机或 Kubernetes 中使用这些镜像。</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/introduction4.png" alt="Docker 仓库" loading="lazy"></figure>
<h2 id="docker-命令行工具">Docker 命令行工具</h2>
<p>当在操作系统中安装 Docker 的时候，会同时安装 Docker 命令行工具。Docker 命令行工具可以通过 Dockerfile  构建 Docker 镜像，可以将 Docker 镜像上传到 Docker 仓库中，可以从 Docker 仓库中下载 Docker 镜像，可以操作 Docker 镜像启动或停止 Docker 容器。</p>
<h2 id="docker-compose">Docker Compose</h2>
<p>Docker Compose 提供一种功能，可以将多个 Docker  容器链接成一个组合中，这个组合中的所有容器，可以一次性全部部署或停止。比如，一个 Docker 容器中运行应用，一个 Docker  容器中运行数据库，应用依赖于数据库，同时启动或停止，可以实现应用依赖的数据库没有正常运行。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7安装使用Docker]]></title>
        <id>https://kangjn.github.io/post/centos7-an-zhuang-shi-yong-docker/</id>
        <link href="https://kangjn.github.io/post/centos7-an-zhuang-shi-yong-docker/">
        </link>
        <updated>2021-04-21T02:52:06.000Z</updated>
        <content type="html"><![CDATA[<h2 id="安装">安装</h2>
<p>Docker 官方为了简化安装流程，提供了一套安装脚本，CentOS 系统上可以使用这套脚本安装：</p>
<pre><code>curl -sSL https://get.docker.com/ | sh
</code></pre>
<p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 安装在系统中。</p>
<p>不过，由于伟大的墙的原因，在国内使用这个脚本可能会出现某些下载出现错误的情况。国内的一些云服务商提供了这个脚本的修改版本，使其使用国内的 Docker 软件源镜像安装，这样就避免了墙的干扰。</p>
<h3 id="阿里云安装脚本">阿里云安装脚本</h3>
<pre><code>curl -sSL http://acs-public-mirror.oss-cn-hangzhou.aliyuncs.com/docker-engine/internet | sh 
</code></pre>
<hr>
<h2 id="镜像">镜像</h2>
<h3 id="选择国内镜像">选择国内镜像</h3>
<ul>
<li>
<h4 id="官方中国区加速器">官方中国区加速器</h4>
</li>
</ul>
<pre><code>sudo echo &quot;DOCKER_OPTS=\&quot;--registry-mirror=https://registry.docker-cn.com\&quot;&quot; &gt;&gt; /etc/default/docker
</code></pre>
<p>推荐使用官方加速器。</p>
<ul>
<li>
<h4 id="网易163">网易163</h4>
</li>
</ul>
<pre><code>sudo echo &quot;DOCKER_OPTS=\&quot;--registry-mirror=http://hub-mirror.c.163.com\&quot;&quot; &gt;&gt; /etc/default/docker
</code></pre>
<p>目前网易镜像已经比较稳定。</p>
<p>修改完默认镜像仓库后需要重启docker才能生效：</p>
<pre><code>service docker restart
</code></pre>
<h3 id=""></h3>
<hr>
<h2 id="使用">使用</h2>
<h3 id="启动docker">启动Docker</h3>
<pre><code>service docker start
</code></pre>
<h3 id="开机自启动">开机自启动</h3>
<pre><code>sudo chkconfig docker on
</code></pre>
<h3 id="停止docker">停止Docker</h3>
<pre><code>service docker stop
</code></pre>
<h3 id="本地镜像列表">本地镜像列表</h3>
<pre><code>docker images
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/903154571.png" alt="img" loading="lazy"></figure>
<p>使用images命令查看发现当前本地没有任何镜像</p>
<h3 id="搜索">搜索</h3>
<pre><code>docker search hello
</code></pre>
<p>以下结果是我们搜索到的与&quot;hello&quot;相关的所有镜像</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/1217719435.png" alt="img" loading="lazy"></figure>
<h3 id="拉取镜像">拉取镜像</h3>
<pre><code>docker pull hello-world
</code></pre>
<p>我们尝试从仓库中拉取名为“hello-world”的镜像</p>
<p>拉取成功后使用docker images命令查看，发现该镜像已被拉取到本地。</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/234797084.png" alt="img" loading="lazy"></figure>
<h3 id="运行镜像">运行镜像</h3>
<pre><code>docker run hello-world
</code></pre>
<p>运行后该镜像会输出如下信息：</p>
<figure data-type="image" tabindex="4"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/78870000.png" alt="img" loading="lazy"></figure>
<h3 id="查看运行中的镜像">查看运行中的镜像</h3>
<pre><code>docker ps
</code></pre>
<h3 id="镜像重命名">镜像重命名</h3>
<pre><code>docker tag hello-world hw
</code></pre>
<p>我们将之前下载的“hello_world”镜像重命名为“hw”，使用images命令查看会发现列表中已经多了一个名为“hw”的镜像。</p>
<figure data-type="image" tabindex="5"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/1341420741.png" alt="img" loading="lazy"></figure>
<h3 id="删除镜像">删除镜像</h3>
<pre><code>docker rmi hello-world
</code></pre>
<p>我们删除了名为“hello_world”的镜像，rmi后面的参数也可以是 <code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要。</code></p>
<hr>
<h2 id="卸载">卸载</h2>
<ul>
<li>
<h4 id="列出安装包">列出安装包</h4>
</li>
</ul>
<pre><code>yum list installed | grep docker
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/214283262.png" alt="img" loading="lazy"></figure>
<ul>
<li>
<h4 id="删除安装包">删除安装包</h4>
</li>
</ul>
<pre><code>yum -y remove docker-engine.x86_64
yum -y remove docker-engine-selinux.noarch
</code></pre>
<ul>
<li>
<h4 id="删除镜像容器等">删除镜像/容器等</h4>
</li>
</ul>
<pre><code>rm -rf /var/lib/docker
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spring Boot与Docker部署]]></title>
        <id>https://kangjn.github.io/post/spring-boot-yu-docker-bu-shu/</id>
        <link href="https://kangjn.github.io/post/spring-boot-yu-docker-bu-shu/">
        </link>
        <updated>2021-04-21T02:44:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="开启docker远程访问">开启Docker远程访问</h2>
<p>首先需要开启docker远程访问功能，以便可以进行远程操作。</p>
<ul>
<li>
<h4 id="centos-6">CentOS 6</h4>
</li>
</ul>
<p>修改/etc/default/docker文件，重启后生效（service docker restart）。</p>
<pre><code>DOCKER_OPTS=&quot;-H=unix:///var/run/docker.sock -H=0.0.0.0:2375&quot;
</code></pre>
<ul>
<li>
<h4 id="centos-7">CentOS 7</h4>
</li>
</ul>
<p>打开/usr/lib/systemd/system/docker.service文件，修改ExecStart这行。</p>
<pre><code>ExecStart=/usr/bin/dockerd  -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock
</code></pre>
<p>重启后生效</p>
<pre><code>  systemctl daemon-reload    
  systemctl restart docker.service 
</code></pre>
<p>测试是否生效</p>
<pre><code>curl http://127.0.0.1:2375/info
</code></pre>
<hr>
<h2 id=""></h2>
<h2 id="新建maven工程">新建Maven工程</h2>
<p>pom.xml配置如下:</p>
<pre><code>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;test.springboot.docker&lt;/groupId&gt;
    &lt;artifactId&gt;docker-springboot&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;

    &lt;parent&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
        &lt;version&gt;1.5.3.RELEASE&lt;/version&gt;
    &lt;/parent&gt;

    &lt;properties&gt;
        &lt;java.version&gt;1.8&lt;/java.version&gt;
    &lt;/properties&gt;

    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
        &lt;/dependency&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
            &lt;scope&gt;test&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

    &lt;build&gt;
        &lt;plugins&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
            &lt;/plugin&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;com.spotify&lt;/groupId&gt;
                &lt;artifactId&gt;docker-maven-plugin&lt;/artifactId&gt;
                &lt;version&gt;0.4.14&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;imageName&gt;${docker.image.prefix}/${project.artifactId}&lt;/imageName&gt;
                    &lt;dockerDirectory&gt;src/main/docker&lt;/dockerDirectory&gt;
                    &lt;dockerHost&gt;http://192.168.1.200:2375&lt;/dockerHost&gt;
                    &lt;resources&gt;
                        &lt;resource&gt;
                            &lt;targetPath&gt;/&lt;/targetPath&gt;
                            &lt;directory&gt;${project.build.directory}&lt;/directory&gt;
                            &lt;include&gt;${project.build.finalName}.jar&lt;/include&gt;
                        &lt;/resource&gt;
                    &lt;/resources&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
&lt;/project&gt;
</code></pre>
<p><code>imageName：</code>指定了镜像的名字</p>
<p><code>dockerDirectory：</code>指定Dockerfile的位置</p>
<p><code>dockerHost：</code>指定Docker远程API地址</p>
<p><code>resources：</code>指那些需要和Dockerfile放在一起，在构建镜像时使用的文件，一般应用jar包需要纳入</p>
<h4 id="创建java类">创建Java类</h4>
<pre><code>package hello;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@RestController
public class Application {

    @RequestMapping(&quot;/&quot;)
    public String home() {
        return &quot;Hello Docker World&quot;;
    }

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

}
</code></pre>
<h4 id="创建dockerfile">创建Dockerfile</h4>
<p>在src/main/docker目录下创建一个名为Dockerfile的文件，配置如下：</p>
<pre><code>FROM java
VOLUME /tmp
ADD docker-springboot-0.0.1-SNAPSHOT.jar app.jar
RUN bash -c 'touch /app.jar'
ENV JAVA_OPTS=&quot;&quot;
ENTRYPOINT [ &quot;sh&quot;, &quot;-c&quot;, &quot;java $JAVA_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar&quot; ]
</code></pre>
<p>**FROM java：**指Docker Hub上官方提供的java镜像，有了这个基础镜像后，Dockerfile可以通过<code>FROM</code>指令直接获取它的状态——也就是在容器中<code>java</code>是已经安装的，接下来通过自定义的命令来运行Spring Boot应用。</p>
<p>**VOLUME /tmp：**创建/tmp目录并持久化到Docker数据文件夹，因为Spring Boot使用的内嵌Tomcat容器默认使用<code>/tmp</code>作为工作目录。</p>
<p>**ADD docker-springboot-0.0.1-SNAPSHOT.jar app.jar：**将应用jar包复制到<code>/app.jar</code></p>
<p>**ENTRYPOINT：**表示容器运行后默认执行的命令</p>
<p><strong>完整目录结构如下所示：</strong></p>
<p><strong><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/291529205.png" alt="img" loading="lazy"></strong></p>
<p>运行以下命令创建Docker镜像：</p>
<pre><code>package docker:build
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/1205907397.png" alt="img" loading="lazy"></figure>
<hr>
<h2 id="docker启动镜像">Docker启动镜像</h2>
<p>查看项目是否上传成功</p>
<figure data-type="image" tabindex="2"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/1761674239.png" alt="img" loading="lazy"></figure>
<h4 id="启动镜像">启动镜像</h4>
<pre><code>docker run -p 8888:8080 springboot/docker-springboot
</code></pre>
<p>通过浏览器访问</p>
<figure data-type="image" tabindex="3"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/738880254.png" alt="img" loading="lazy"></figure>
<p></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MQTT简介]]></title>
        <id>https://kangjn.github.io/post/mqtt-jian-jie/</id>
        <link href="https://kangjn.github.io/post/mqtt-jian-jie/">
        </link>
        <updated>2021-04-20T07:59:45.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-简述">1 简述</h2>
<p>MQTT（Message Queuing  Telemetry  Transport，消息队列遥测传输协议），是一种基于发布/订阅（publish/subscribe）模式的&quot;轻量级&quot;通讯协议，该协议构建于TCP/IP协议上，由IBM在1999年发布。MQTT最大优点在于，可以以极少的代码和有限的带宽，为连接远程设备提供实时可靠的消息服务。作为一种低开销、低带宽占用的即时通讯协议，使其在物联网、小型设备、移动应用等方面有较广泛的应用。</p>
<p>MQTT是一个基于客户端-服务器的消息发布/订阅传输协议。MQTT协议是轻量、简单、开放和易于实现的，这些特点使它适用范围非常广泛。在很多情况下，包括受限的环境中，如：机器与机器（M2M）通信和物联网（IoT）。其在，通过卫星链路通信传感器、偶尔拨号的医疗设备、智能家居、及一些小型化设备中已广泛使用。</p>
<figure data-type="image" tabindex="1"><img src="https://gitee.com/kangjun/MyBlogImage/raw/master/59a771.JPEG" alt="img" loading="lazy"></figure>
<h2 id="2-设计规范">2 设计规范</h2>
<p>由于物联网的环境是非常特别的，所以MQTT遵循以下设计原则：</p>
<ul>
<li>精简，不添加可有可无的功能；</li>
<li>发布/订阅（Pub/Sub）模式，方便消息在传感器之间传递；</li>
<li>允许用户动态创建主题，零运维成本；</li>
<li>把传输量降到最低以提高传输效率；</li>
<li>把低带宽、高延迟、不稳定的网络等因素考虑在内；</li>
<li>支持连续的会话控制；</li>
<li>理解客户端计算能力可能很低；</li>
<li>提供服务质量管理；</li>
<li>假设数据不可知，不强求传输数据的类型与格式，保持灵活性。</li>
</ul>
<h2 id="3-主要特性">3 主要特性</h2>
<p>MQTT协议工作在低带宽、不可靠的网络的远程传感器和控制设备通讯而设计的协议，它具有以下主要的几项特性：</p>
<ul>
<li>使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。这一点很类似于XMPP，但是MQTT的信息冗余远小于XMPP，因为XMPP使用XML格式文本来传递数据。</li>
<li>对负载内容屏蔽的消息传输。</li>
<li>使用TCP/IP提供网络连接。主流的MQTT是基于TCP连接进行数据推送的，但是同样有基于UDP的版本，叫做MQTT-SN。这两种版本由于基于不同的连接方式，优缺点自然也就各有不同了。</li>
<li>有三种消息发布服务质量QoS (Quality of Service)：
<ul>
<li>At Most Once  至多一次，消息发布完全依赖底层TCP/IP网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。这一种方式主要普通APP的推送，倘若你的智能设备在消息推送时未联网，推送过去没收到，再次联网也就收不到了。</li>
<li>At Least Once 至少一次，确保消息到达，但消息重复可能会发生。</li>
<li>Exactly Once 有且仅有一次，确保消息到达一次。在一些要求比较严格的计费系统中，可以使用此级别。在计费系统中，消息重复或丢失会导致不正确的结果。这种最高质量的消息发布服务还可以用于即时通讯类的APP的推送，确保用户收到且只会收到一次。</li>
</ul>
</li>
<li>小型传输，开销很小（固定长度的头部是2字节），协议交换最小化，以降低网络流量。这就是为什么在介绍里说它非常适合&quot;在物联网领域，传感器与服务器的通信，信息的收集&quot;，要知道嵌入式设备的运算能力和带宽都相对薄弱，使用这种协议来传递消息再适合不过了。</li>
<li>使用Last Will和Testament特性通知有关各方客户端异常中断的机制。
<ul>
<li>Last Will：即遗言机制，用于通知同一主题下的其他设备发送遗言的设备已经断开了连接。</li>
<li>Testament：遗嘱机制，功能类似于Last Will。</li>
</ul>
</li>
</ul>
<h2 id="4-mqtt协议原理">4 MQTT协议原理</h2>
<h3 id="41-mqtt协议实现方式">4.1 MQTT协议实现方式</h3>
<p>实现MQTT协议需要客户端和服务器端通讯完成，在通讯过程中，MQTT协议中有三种身份：发布者（Publish）、代理（Broker）、订阅者（Subscribe）。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。</p>
<p>MQTT传输的消息分为：主题（Topic）和负载（Payload）两部分：</p>
<ul>
<li>Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（Payload）；</li>
<li>Payload，可以理解为消息的内容，是指订阅者具体要使用的内容。</li>
</ul>
<h3 id="42-网络传输与应用消息">4.2 网络传输与应用消息</h3>
<p>MQTT会构建底层网络传输：它将建立客户端到服务器的连接，提供两者之间的一个有序的、无损的、基于字节流的双向传输。</p>
<p>当应用数据通过MQTT网络发送时，MQTT会把与之相关的服务质量（QoS）和主题名（Topic）相关连。</p>
<h3 id="43-mqtt客户端">4.3 MQTT客户端</h3>
<p>一个使用MQTT协议的应用程序或者设备，它总是建立到服务器的网络连接。客户端可以：</p>
<ul>
<li>发布其他客户端可能会订阅的信息；</li>
<li>订阅其它客户端发布的消息；</li>
<li>退订或删除应用程序的消息；</li>
<li>断开与服务器连接。</li>
</ul>
<h3 id="44-mqtt服务器">4.4 MQTT服务器</h3>
<p>MQTT服务器以称为&quot;消息代理&quot;（Broker），可以是一个应用程序或一台设备。它位于消息发布者和订阅者之间，它可以：</p>
<ul>
<li>接受来自客户的网络连接；</li>
<li>接受客户发布的应用信息；</li>
<li>处理来自客户端的订阅和退订请求；</li>
<li>向订阅的客户转发应用程序消息。</li>
</ul>
<h3 id="45-mqtt协议中的订阅-主题-会话">4.5 MQTT协议中的订阅、主题、会话</h3>
<h4 id="451-订阅subscription">4.5.1 订阅（Subscription）</h4>
<p>订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。</p>
<h4 id="452-会话session">4.5.2 会话（Session）</h4>
<p>每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。</p>
<h4 id="453-主题名topic-name">4.5.3 主题名（Topic Name）</h4>
<p>连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。</p>
<h4 id="454-主题筛选器topic-filter">4.5.4 主题筛选器（Topic Filter）</h4>
<p>一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。</p>
<h4 id="455-负载payload">4.5.5 负载（Payload）</h4>
<p>消息订阅者所具体接收的内容。</p>
<h3 id="46-mqtt协议中的方法">4.6 MQTT协议中的方法</h3>
<p>MQTT协议中定义了一些方法（也被称为动作），来于表示对确定资源所进行操作。这个资源可以代表预先存在的数据或动态生成数据，这取决于服务器的实现。通常来说，资源指服务器上的文件或输出。主要方法有：</p>
<ul>
<li>Connect：等待与服务器建立连接。</li>
<li>Disconnect：等待MQTT客户端完成所做的工作，并与服务器断开TCP/IP会话。</li>
<li>Subscribe：等待完成订阅。</li>
<li>UnSubscribe：等待服务器取消客户端的一个或多个topics订阅。</li>
<li>Publish：MQTT客户端发送消息请求，发送完成后返回应用程序线程。</li>
</ul>
<h2 id="5-mqtt协议数据包结构">5 MQTT协议数据包结构</h2>
<p>在MQTT协议中，一个MQTT数据包由：固定头（Fixed header）、可变头（Variable header）、消息体（payload）三部分构成。</p>
<ul>
<li>固定头（Fixed header）：存在于所有MQTT数据包中，表示数据包类型及数据包的分组类标识。</li>
<li>可变头（Variable header）：存在于部分MQTT数据包中，数据包类型决定了可变头是否存在及其具体内容。</li>
<li>消息体（Payload）：存在于部分MQTT数据包中，表示客户端收到的具体内容。</li>
</ul>
<h3 id="51-mqtt固定头">5.1 MQTT固定头</h3>
<p>固定头存在于所有MQTT数据包中，包含两部分内容：首字节(Byte 1) 和 剩余消息报文长度(1-4字节)</p>
<ul>
<li>Byte 1 首字节：
<ul>
<li>Bit 7 6 5 4 高四位无符号值，用于表示MQTT消息的报文类型(MQTT Control Packet type)，总共可以表示2^4=16种协议类型。</li>
<li>Bit 3 2 1 0 低四位无符号值，用作某些报文的特殊标记(Flags specific to each MQTT Control Packet type)。</li>
</ul>
</li>
<li>Byte 2… Remaining Length 剩余消息报文长度</li>
</ul>
<h4 id="511-mqtt数据包类型-mqtt-control-packet-type">5.1.1 MQTT数据包类型 MQTT Control Packet type</h4>
<p>位于 首字节的高四位，即Byte 1中的 bits 7-4，相于一个4位的无符号值。用于确定报文类型。共有2^4=16种，其中0000和1111是保留字段。具体如下：</p>
<table>
<thead>
<tr>
<th>报文类型</th>
<th>字段值</th>
<th>数据方向</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>保留</td>
<td>0</td>
<td>禁用</td>
<td>保留</td>
</tr>
<tr>
<td>CONNECT</td>
<td>1</td>
<td>Client -&gt; Server</td>
<td>客户端连接到服务器</td>
</tr>
<tr>
<td>CONNACK</td>
<td>2</td>
<td>Server -&gt; Client</td>
<td>连接确认</td>
</tr>
<tr>
<td>PUBLISH</td>
<td>3</td>
<td>Client &lt;-&gt; Server</td>
<td>发布消息</td>
</tr>
<tr>
<td>PUBACK</td>
<td>4</td>
<td>Client &lt;-&gt; Server</td>
<td>发布确认</td>
</tr>
<tr>
<td>PUBREC</td>
<td>5</td>
<td>Client &lt;-&gt; Server</td>
<td>消息已接收(QoS2第一阶段)</td>
</tr>
<tr>
<td>PUBREL</td>
<td>6</td>
<td>Client &lt;-&gt; Server</td>
<td>消息释放(QoS2第二阶段)</td>
</tr>
<tr>
<td>PUBCOMP</td>
<td>7</td>
<td>Client &lt;-&gt; Server</td>
<td>发布结束(QoS2第三阶段)</td>
</tr>
<tr>
<td>SUBSCRIBE</td>
<td>8</td>
<td>Client -&gt; Server</td>
<td>客户端订阅请求</td>
</tr>
<tr>
<td>SUBACK</td>
<td>9</td>
<td>Server -&gt; Client</td>
<td>服务端订阅确认</td>
</tr>
<tr>
<td>UNSUBACRIBE</td>
<td>10</td>
<td>Client -&gt; Server</td>
<td>客户端取消订阅</td>
</tr>
<tr>
<td>UNSUBACK</td>
<td>11</td>
<td>Server -&gt; Client</td>
<td>服务端取消订阅确认</td>
</tr>
<tr>
<td>PINGREQ</td>
<td>12</td>
<td>Client -&gt; Server</td>
<td>客户端发送心跳</td>
</tr>
<tr>
<td>PINGRESP</td>
<td>13</td>
<td>Server -&gt; Client</td>
<td>服务端回复心跳</td>
</tr>
<tr>
<td>DISCONNECT</td>
<td>14</td>
<td>Client -&gt; Server</td>
<td>客户端断开连接请求</td>
</tr>
<tr>
<td>保留</td>
<td>15</td>
<td>禁用</td>
<td>保留</td>
</tr>
</tbody>
</table>
<h4 id="512-标识位-flags-specific-to-each-mqtt-control-packet-type">5.1.2 标识位 Flags specific to each MQTT Control Packet type</h4>
<p>位于首字节的低四位，即Byte 1中bits 3-0。表示某些报文类型的控制字段，实际上只有少数报文类型有控制位。</p>
<p>在不使用标识位的消息类型中，标识位被作为保留位。如果收到无效的标志时，接收端必须关闭网络连接：</p>
<ul>
<li>DUP：发布消息的副本。用来在保证消息的可靠传输，如果设置为1，则在下面的变长中增加MessageId，并且需要回复确认，以保证消息传输完成，但不能用于检测消息重复发送。</li>
<li>QoS：发布消息的服务质量，即：保证消息传递的次数。</li>
</ul>
<pre><code>Ø00：最多一次，即：&lt;=1

Ø01：至少一次，即：&gt;=1

Ø10：一次，即：=1

Ø11：预留
</code></pre>
<ul>
<li>RETAIN： 发布保留标识，表示服务器要保留这次推送的信息，如果有新的订阅者出现，就把这消息推送给它，如果设有那么推送至当前订阅者后释放。</li>
</ul>
<p>5.1.3 剩余长度（Remaining Length）</p>
<p>用来保存变长头部(Variable  Header)和消息体(Payload)的总大小。从第二字节(Byte  2)开始，最长可达4字节，所以剩余长度范围是Byte[2-5]。那么怎样确定其长度到底是1字节还是4字节呢？它先用从低位Bit 0到Bit  6来存储，当发现不够时，则将 最高位Bit 7(默认都是高字节在前)置为  1，表示长度不足，需要使用下一个字节继续保存，就继续计算字节长度；如果是0，那么就不再计算字节长度。</p>
<p>消息长度可以简单理解为128进制的数据，4位长度最大可以表示128, 128*,* 128*128Byte=256MB。但是这个长度的计算有些特别，就是低位在前，高位在后(因为正常的表示方法是高位在前，低位在后)，字节最高位Bit7用于标记是否需要继续计算消息长度。以下是消息长度的长度范围：</p>
<table>
<thead>
<tr>
<th>字节数</th>
<th>长度最小值</th>
<th>长度最大值</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>0(0x00)</td>
<td>127(0x7F)</td>
</tr>
<tr>
<td>2</td>
<td>128 (0x80, 0x01)</td>
<td>16 383 (0xFF, 0x7F)</td>
</tr>
<tr>
<td>3</td>
<td>16 384 (0x80, 0x80, 0x01)</td>
<td>2 097 151 (0xFF, 0xFF, 0x7F)</td>
</tr>
<tr>
<td>4</td>
<td>2 097 152 (0x80, 0x80, 0x80, 0x01)</td>
<td>268 435 455 (0xFF, 0xFF, 0xFF, 0x7F)</td>
</tr>
</tbody>
</table>
<h3 id="52-mqtt可变头">5.2 MQTT可变头</h3>
<p>MQTT数据包中包含一个可变头，它驻位于固定的头和负载之间。可变头的内容因数据包类型而不同，较常的应用是作为包的标识：</p>
<p>很多类型数据包中都包括一个2字节的数据包标识字段，这些类型的包有：PUBLISH (QoS &gt; 0)、PUBACK、PUBREC、PUBREL、PUBCOMP、SUBSCRIBE、SUBACK、UNSUBSCRIBE、UNSUBACK。</p>
<h3 id="53-payload消息体">5.3 Payload消息体</h3>
<p>Payload消息体位MQTT数据包的第三部分，包含CONNECT、SUBSCRIBE、SUBACK、UNSUBSCRIBE四种类型的消息：</p>
<ul>
<li>CONNECT，消息体内容主要是：客户端的ClientID、订阅的Topic、Message以及用户名和密码。</li>
<li>SUBSCRIBE，消息体内容是一系列的要订阅的主题以及QoS。</li>
<li>SUBACK，消息体内容是服务器对于SUBSCRIBE所申请的主题及QoS进行确认和回复。</li>
<li>UNSUBSCRIBE，消息体内容是要订阅的主题。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vue2.0 + TypeScript 项目搭建]]></title>
        <id>https://kangjn.github.io/post/vue20-typescript-xiang-mu-da-jian/</id>
        <link href="https://kangjn.github.io/post/vue20-typescript-xiang-mu-da-jian/">
        </link>
        <updated>2021-04-20T07:06:51.000Z</updated>
        <content type="html"><![CDATA[<p>安装 cli</p>
<h1 id="vue-cli-3-可以使用-typescript-生成新工程-创建方式">Vue CLI 3 可以使用 TypeScript 生成新工程。创建方式：</h1>
<p>npm install --global @vue/cli</p>
<h1 id="2-创建一个新工程并选择-manually-select-features-手动选择特性-选项">2. 创建一个新工程，并选择 &quot;Manually select features (手动选择特性)&quot; 选项</h1>
<p>vue create my-project-name</p>
<p>vue create my-project-name</p>
<p>Vue CLI v4.5.12<br>
? Please pick a preset: Manually select features<br>
? Check the features needed for your project: Choose Vue version, Babel, TS, PWA, Router, Vuex, CSS Pre-processors, Linter, Unit<br>
? Choose a version of Vue.js that you want to start the project with 2.x<br>
? Use class-style component syntax? Yes<br>
? Use Babel alongside TypeScript (required for modern mode, auto-detected polyfills, transpiling JSX)? Yes<br>
? Use history mode for router? (Requires proper server setup for index fallback in production) Yes<br>
? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported by default): Less<br>
? Pick a linter / formatter config: Standard<br>
? Pick additional lint features: Lint on save<br>
? Pick a unit testing solution: Mocha<br>
? Where do you prefer placing config for Babel, ESLint, etc.? In dedicated config files<br>
? Save this as a preset for future projects? No</p>
<p>配置 vue.config.js</p>
<p>根目录新建vue.config.js文件<br>
1、publicPath 项目根路径</p>
<p>module.exports = {<br>
publicPath: '/',//根路径 cli3.0以上使用publicPath<br>
}</p>
<p>2、assetsDir 静态资源目录(js,css,img,fonts)这些文件都可以写里面</p>
<p>module.exports = {<br>
assetsDir: 'static',// 静态资源目录(js,css,img,fonts)这些文件都可以写里面<br>
}</p>
<p>3、outputDir 打包输出目录</p>
<p>module.exports = {<br>
outputDir: 'dist',//打包的时候生成的一个文件名<br>
}</p>
<p>4、lintOnSave 是否开启eslint保存检测 ,它的有效值为 true || false || 'error'</p>
<p>module.exports = {<br>
lintOnSave: 'error',//是否开启eslint保存检测 ,它的有效值为 true || false || 'error'<br>
}</p>
<p>5、biyi-admin 指定对第三方依赖包进行babel-polyfill处理</p>
<p>module.exports = {<br>
transpileDependencies: [<br>
'biyi-admin', // 指定对第三方依赖包进行babel-polyfill处理<br>
],<br>
}</p>
<p>6、productionSourceMap 生产环境是否生成 sourceMap 文件</p>
<p>module.exports = {<br>
productionSourceMap: false, // 生产环境是否生成 sourceMap 文件<br>
}</p>
<p>7、别名配置 '@' './src' ; '@a' './src/assets' ; '@c' './src/components' ; '@p' './src/pages'</p>
<p>const path = require('path');<br>
module.exports = {<br>
chainWebpack: config =&gt; {<br>
// 别名配置<br>
config.resolve.alias<br>
.set('@', path.resolve(__dirname, './src'))<br>
.set('@a', path.resolve(__dirname, './src/assets'))<br>
.set('@c', path.resolve(__dirname, './src/components'))<br>
.set('@p', path.resolve(__dirname, './src/pages'))<br>
},<br>
}</p>
<p>8、解决ie11兼容ES6</p>
<h1 id="安装依赖">安装依赖</h1>
<p>yarn add babel-polyfill</p>
<p>module.exports = {<br>
chainWebpack: config =&gt; {<br>
// 解决ie11兼容ES6<br>
config.entry('main').add('babel-polyfill');<br>
},<br>
}</p>
<p>9、symlinks 符号链接的资源将解析到其实际路径，而不是符号链接的位</p>
<p>module.exports = {<br>
chainWebpack: config =&gt; {<br>
// 修复HMR<br>
config.resolve.symlinks(true);<br>
},<br>
}</p>
<p>10、gzip 压缩</p>
<p>yarn add terser-webpack-plugin --dev<br>
yarn add compression-webpack-plugin --dev</p>
<h1 id="packagejson">package.json</h1>
<p>{<br>
&quot;openGzip&quot;: true,<br>
}</p>
<p>let {version, openGzip} = require('./package.json');</p>
<p>module.exports = {<br>
configureWebpack: config =&gt; {<br>
if (process.env.NODE_ENV === 'production') {<br>
// 为生产环境修改配置...<br>
config.mode = &quot;production&quot;;<br>
if (openGzip) {<br>
config.plugins.push(<br>
new CompressionWebpackPlugin({<br>
filename: '[path].gz[query]',<br>
algorithm: 'gzip',<br>
test: /.js<span class='katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;\.&#039; in math mode at position 2: |\̲.̲html'>|\.html</span>|.\css/, // 匹配文件名<br>
threshold: 10240, // 只有大小大于该值的资源会被处理 10240<br>
minRatio: 0.8, // 只有压缩率小于这个值的资源才会被处理<br>
deleteOriginalAssets: false, // 删除原文件<br>
})<br>
)<br>
}<br>
} else {<br>
// 为开发环境修改配置...<br>
config.mode = &quot;development&quot;;<br>
}<br>
},<br>
}</p>
<p>11、打包文件大小配置</p>
<p>module.exports = {<br>
configureWebpack: config =&gt; {<br>
if (process.env.NODE_ENV === 'production') {<br>
// 为生产环境修改配置...<br>
config.mode = &quot;production&quot;;</p>
<pre><code>        // 打包文件大小配置
        config[&quot;performance&quot;] = {
            hints: &quot;error&quot;,
            maxEntrypointSize: 400000,
            maxAssetSize: 30000000
        };
    } else {
        // 为开发环境修改配置...
        config.mode = &quot;development&quot;;
    }
},
</code></pre>
<p>}</p>
<p>12、将每个依赖包打包成单独的js文件</p>
<p>let {version, openGzip} = require('./package.json');</p>
<p>module.exports = {<br>
configureWebpack: config =&gt; {<br>
if (process.env.NODE_ENV === 'production') {<br>
// 为生产环境修改配置...<br>
config.mode = &quot;production&quot;;</p>
<pre><code>        // 将每个依赖包打包成单独的js文件
        Object.assign(config, {
            output: {
                ...config.output,
                filename: `static/js/[name].[chunkhash].${version}.js`,
                chunkFilename: `static/js/[name].[chunkhash].${version}.js`
            },
        })
    } else {
        // 为开发环境修改配置...
        config.mode = &quot;development&quot;;
    }
},
</code></pre>
<p>}</p>
<p>13、去除线上的 console</p>
<p>module.exports = {<br>
configureWebpack: config =&gt; {<br>
if (process.env.NODE_ENV === 'production') {<br>
// 为生产环境修改配置...<br>
config.mode = &quot;production&quot;;</p>
<pre><code>        Object.assign(config, {
            optimization: {
                minimizer: [
                    new TerserPlugin({
                        cache: true, // 是否缓存
                        // paraller: true, // 是否并行打包
                        sourceMap: true,
                        terserOptions: {
                            compress: {
                                pure_funcs: [&quot;console.log&quot;]
                            }
                        }
                    })
                ],
            }
        })
    } else {
        // 为开发环境修改配置...
        config.mode = &quot;development&quot;;
    }
},
</code></pre>
<p>}</p>
<p>14、css相关配置</p>
<p>根目录创建 postcss.config.js</p>
<p>module.exports = {<br>
plugins: [<br>
// 兼容浏览器，添加前缀<br>
require('autoprefixer')({<br>
overrideBrowserslist: [<br>
&quot;Android 4.1&quot;,<br>
&quot;iOS 7.1&quot;,<br>
&quot;Chrome &gt; 31&quot;,<br>
&quot;ff &gt; 31&quot;,<br>
&quot;ie &gt;= 8&quot;<br>
//'last 10 versions', // 所有主流浏览器最近10版本用<br>
],<br>
grid: true<br>
})</p>
<pre><code>]
</code></pre>
<p>}</p>
<p>module.exports = {<br>
// css相关配置<br>
css: {<br>
extract: false, // 是否使用css分离插件 ExtractTextPlugin<br>
sourceMap: false, // 开启 CSS source maps?<br>
loaderOptions: {<br>
less: {<br>
javascriptEnabled: true<br>
},<br>
css: {}, // 这里的选项会传递给 css-loader<br>
postcss: {} // 这里的选项会传递给 postcss-loader<br>
}, // css预设器配置项 详见https://cli.vuejs.org/zh/config/#css-loaderoptions<br>
requireModuleExtension: true // 启用 CSS requireModuleExtension for all css / pre-processor files.<br>
},<br>
}</p>
<p>15、parallel 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。</p>
<p>module.exports = {<br>
parallel: require('os').cpus().length &gt; 1, // 是否为 Babel 或 TypeScript 使用 thread-loader。该选项在系统的 CPU 有多于一个内核时自动启用，仅作用于生产构建。<br>
}</p>
<p>16、webpack-dev-server 相关配置</p>
<p>module.exports = {<br>
devServer: {<br>
open: true,// 打开谷歌<br>
host: '0.0.0.0', // 允许外部ip访问<br>
port: 8081, // 端口<br>
https: false, // 启用https<br>
overlay: {<br>
warnings: true,<br>
errors: true<br>
}, // 错误、警告在页面弹出<br>
proxy: {<br>
'/api': {<br>
target: <code>${process.env.VUE_APP_BASE_API}/api</code>,<br>
changeOrigin: true, // 允许websockets跨域<br>
// ws: true,<br>
pathRewrite: {<br>
'^/api': ''<br>
}<br>
}<br>
} // 代理转发配置，用于调试环境<br>
},<br>
}</p>
<p>17、环境变量和模式</p>
<p>根目录添加 .env 文件 【默认环境变量】</p>
<p>NODE_ENV = 'production'<br>
VUE_APP_MOCK = false<br>
VUE_APP_CDN = ''<br>
VUE_APP_BASE_API = ''</p>
<p>根目录添加 .env.development 文件 【开发环境变量】</p>
<p>NODE_ENV = 'development'<br>
VUE_APP_MOCK = true</p>
<p>根目录添加 .env.production 文件 【生产环境变量】</p>
<p>NODE_ENV = 'production'<br>
VUE_APP_MOCK = false<br>
VUE_APP_BASE_API = ''<br>
VUE_APP_CDN = ''</p>
<p>最终</p>
<p>vue.config.js</p>
<p>/**</p>
<ul>
<li>
<p>@FileName vue.config.js</p>
</li>
<li>
<p>@Author</p>
</li>
<li>
<p>@Version V 0.0.1</p>
</li>
<li>
<p>@Date</p>
</li>
<li>
<p>@Title Vue配置文件</p>
</li>
<li>
<p>@Desc<br>
**/<br>
const path = require('path');<br>
const TerserPlugin = require('terser-webpack-plugin');<br>
const CompressionWebpackPlugin = require('compression-webpack-plugin');<br>
const isProduction = process.env.NODE_ENV === 'production';<br>
const {version, openGzip} = require('./package.json');<br>
module.exports = {<br>
devServer: {<br>
open: false,<br>
host: '0.0.0.0',<br>
port: 8082,<br>
https: false,<br>
disableHostCheck: true,<br>
overlay: {<br>
warnings: true,<br>
errors: true<br>
},<br>
proxy: {<br>
'/api': {<br>
target: <code>${process.env.VUE_APP_BASE_API}</code>,<br>
changeOrigin: true,<br>
// ws: true,<br>
pathRewrite: {<br>
'^/api': ''<br>
}<br>
}<br>
}<br>
},<br>
chainWebpack: config =&gt; {<br>
config.entry('main').add('babel-polyfill');<br>
config.resolve.symlinks(true);<br>
config.resolve.alias<br>
.set('@', path.resolve(__dirname, './src'))<br>
.set('@a', path.resolve(__dirname, './src/assets'))<br>
.set('@c', path.resolve(__dirname, './src/components'))<br>
.set('@p', path.resolve(__dirname, './src/pages'))<br>
.set('@l', path.resolve(__dirname, './src/layout'));<br>
},<br>
publicPath: '/',<br>
assetsDir: 'static',<br>
outputDir: 'dist',<br>
lintOnSave: 'error',<br>
transpileDependencies: ['biyi-admin'],<br>
productionSourceMap: false,<br>
configureWebpack: config =&gt; {<br>
console.log(isProduction);<br>
if (isProduction) {<br>
config.mode = 'production';</p>
<p>if (openGzip) {<br>
config.plugins.push(<br>
new CompressionWebpackPlugin({<br>
filename: '[path].gz[query]',<br>
algorithm: 'gzip',<br>
test: /.js<span class='katex-error' title='ParseError: KaTeX parse error: Can&#039;t use function &#039;\.&#039; in math mode at position 2: |\̲.̲html'>|\.html</span>|.\css/, // 匹配文件名<br>
threshold: 10240, // 只有大小大于该值的资源会被处理 10240<br>
minRatio: 0.8, // 只有压缩率小于这个值的资源才会被处理<br>
deleteOriginalAssets: false // 删除原文件<br>
})<br>
);</p>
<pre><code> // 将每个依赖包打包成单独的js文件
 Object.assign(config, {
   performance: {
     hints: 'error',
     maxEntrypointSize: 10000000,
     maxAssetSize: 30000000
   },
   output: {
     ...config.output,
     filename: `static/js/[name].[chunkhash].${version}.js`,
     chunkFilename: `static/js/[name].[chunkhash].${version}.js`
   },
   optimization: {
     minimizer: [
       new TerserPlugin({
         cache: true, // 是否缓存
         // paraller: true, // 是否并行打包
         sourceMap: true,
         terserOptions: {
           compress: {
             pure_funcs: ['console.log']
           }
         }
       })
     ]
   }
 });
</code></pre>
<p>}<br>
} else {<br>
config.mode = 'development';<br>
}<br>
},<br>
css: {<br>
extract: false,<br>
sourceMap: false,<br>
loaderOptions: {<br>
less: {<br>
javascriptEnabled: true<br>
},<br>
css: {},<br>
postcss: {}<br>
},<br>
requireModuleExtension: true<br>
},<br>
parallel: require('os').cpus().length &gt; 1,<br>
pwa: {},<br>
pluginOptions: {}<br>
};</p>
</li>
</ul>
<p>package.json</p>
<p>{<br>
&quot;name&quot;: &quot;big-data-platform&quot;,<br>
&quot;version&quot;: &quot;0.1.0&quot;,<br>
&quot;private&quot;: true,<br>
&quot;openGzip&quot;: true,<br>
&quot;scripts&quot;: {<br>
&quot;serve&quot;: &quot;vue-cli-service serve&quot;,<br>
&quot;build&quot;: &quot;vue-cli-service build&quot;,<br>
&quot;test:unit&quot;: &quot;vue-cli-service test:unit&quot;,<br>
&quot;lint&quot;: &quot;vue-cli-service lint&quot;<br>
},<br>
&quot;dependencies&quot;: {<br>
&quot;axios&quot;: &quot;^0.21.1&quot;,<br>
&quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,<br>
&quot;core-js&quot;: &quot;^3.6.5&quot;,<br>
&quot;localforage&quot;: &quot;^1.9.0&quot;,<br>
&quot;moment&quot;: &quot;^2.29.1&quot;,<br>
&quot;register-service-worker&quot;: &quot;^1.7.1&quot;,<br>
&quot;view-design&quot;: &quot;^4.5.0&quot;,<br>
&quot;vue&quot;: &quot;^2.6.11&quot;,<br>
&quot;vue-class-component&quot;: &quot;^7.2.3&quot;,<br>
&quot;vue-property-decorator&quot;: &quot;^9.1.2&quot;,<br>
&quot;vue-router&quot;: &quot;^3.2.0&quot;,<br>
&quot;vuex&quot;: &quot;^3.4.0&quot;<br>
},<br>
&quot;devDependencies&quot;: {<br>
&quot;@types/chai&quot;: &quot;^4.2.11&quot;,<br>
&quot;@types/mocha&quot;: &quot;^5.2.4&quot;,<br>
&quot;@types/mockjs&quot;: &quot;^1.0.3&quot;,<br>
&quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.18.0&quot;,<br>
&quot;@typescript-eslint/parser&quot;: &quot;^4.18.0&quot;,<br>
&quot;@vue/cli-plugin-babel&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-eslint&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-pwa&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-router&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-typescript&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-unit-mocha&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-plugin-vuex&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/cli-service&quot;: &quot;~4.5.0&quot;,<br>
&quot;@vue/eslint-config-standard&quot;: &quot;^5.1.2&quot;,<br>
&quot;@vue/eslint-config-typescript&quot;: &quot;^7.0.0&quot;,<br>
&quot;@vue/test-utils&quot;: &quot;^1.0.3&quot;,<br>
&quot;chai&quot;: &quot;^4.1.2&quot;,<br>
&quot;compression-webpack-plugin&quot;: &quot;^7.1.2&quot;,<br>
&quot;eslint&quot;: &quot;^6.7.2&quot;,<br>
&quot;eslint-plugin-import&quot;: &quot;^2.20.2&quot;,<br>
&quot;eslint-plugin-node&quot;: &quot;^11.1.0&quot;,<br>
&quot;eslint-plugin-promise&quot;: &quot;^4.2.1&quot;,<br>
&quot;eslint-plugin-standard&quot;: &quot;^4.0.0&quot;,<br>
&quot;eslint-plugin-vue&quot;: &quot;^6.2.2&quot;,<br>
&quot;less&quot;: &quot;^3.0.4&quot;,<br>
&quot;less-loader&quot;: &quot;^5.0.0&quot;,<br>
&quot;mockjs&quot;: &quot;^1.1.0&quot;,<br>
&quot;terser-webpack-plugin&quot;: &quot;^5.1.1&quot;,<br>
&quot;typescript&quot;: &quot;~4.1.5&quot;,<br>
&quot;vue-template-compiler&quot;: &quot;^2.6.11&quot;<br>
}<br>
}</p>
<p>配置eslint</p>
<p>package.json 文件</p>
<p>{<br>
&quot;devDependencies&quot;: {<br>
&quot;@typescript-eslint/eslint-plugin&quot;: &quot;^4.18.0&quot;,<br>
&quot;@typescript-eslint/parser&quot;: &quot;^4.18.0&quot;,<br>
&quot;eslint&quot;: &quot;^6.7.2&quot;,<br>
&quot;eslint-plugin-import&quot;: &quot;^2.20.2&quot;,<br>
&quot;eslint-plugin-node&quot;: &quot;^11.1.0&quot;,<br>
&quot;eslint-plugin-promise&quot;: &quot;^4.2.1&quot;,<br>
&quot;eslint-plugin-standard&quot;: &quot;^4.0.0&quot;,<br>
&quot;eslint-plugin-vue&quot;: &quot;^6.2.2&quot;,<br>
},<br>
}</p>
<p>根目录添加 .eslintrc.js 配置文件</p>
<p>module.exports = {<br>
root: true,<br>
env: {<br>
node: true<br>
},<br>
extends: [<br>
'plugin:vue/essential',<br>
'@vue/standard',<br>
'@vue/typescript/recommended'<br>
],<br>
parserOptions: {<br>
ecmaVersion: 2020<br>
},<br>
rules: {<br>
'no-console': 'off',<br>
'indent': ['off', 2],<br>
'semi': [2, 'always'], // 语句强制分号结尾<br>
'quotes': [2, 'single'], // js必须使用单引号<br>
'vue/no-parsing-error': 'off',<br>
'no-irregular-whitespace': 'off',<br>
'no-async-promise-executor': 'off',<br>
'space-before-function-paren': 'off',<br>
'object-curly-spacing': ['error', 'never'],<br>
'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off',<br>
'@typescript-eslint/no-this-alias': 'off',<br>
'@typescript-eslint/ban-ts-ignore': 'off',<br>
'@typescript-eslint/no-unused-vars': 'off',<br>
'@typescript-eslint/ban-ts-comment': 'off',<br>
'@typescript-eslint/no-explicit-any': 'off',<br>
'@typescript-eslint/no-empty-function': 'off',<br>
'@typescript-eslint/explicit-module-boundary-types': 'off'<br>
},<br>
overrides: [<br>
{<br>
files: [<br>
'<strong>/<strong>tests</strong>/*.{j,t}s?(x)',<br>
'</strong>/tests/unit/**/*.spec.{j,t}s?(x)'<br>
],<br>
env: {<br>
mocha: true<br>
}<br>
}<br>
]<br>
}</p>
<p>工具类封装<br>
Cookie操作</p>
<p>/**</p>
<ul>
<li>@FileName cookie.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title Cookie操作</li>
<li>@Desc<br>
**/</li>
</ul>
<p>/**</p>
<ul>
<li>设置cookie</li>
<li>@param name</li>
<li>@param value</li>
<li>@param hours</li>
<li>@param path<br>
*/<br>
const setCookie = (name: string, value: any, hours: number, path: string) =&gt; {<br>
const expires = new Date();<br>
expires.setTime(expires.getTime() + hours * 3600000);<br>
const expiresTxt = typeof hours === 'string' ? '' : <code>;expires=${expires.toUTCString()}</code>;<br>
document.cookie = <code>${escape(name)}=${escape(value)}${expiresTxt}${path === '' ? '' :</code>;path=${path}<code>}</code>;<br>
};</li>
</ul>
<p>/**</p>
<ul>
<li>获取cookie值</li>
<li>@param name<br>
*/<br>
const getCookieValue = (name: string) =&gt; {<br>
let nameTxt = escape(name);<br>
// 读cookie属性，这将返回文档的所有cookie<br>
const allCookies = document.cookie;<br>
// 查找名为name的cookie的开始位置<br>
nameTxt += '=';<br>
const pos = allCookies.indexOf(nameTxt);<br>
// 如果找到了具有该名字的cookie，那么提取并使用它的值<br>
if (pos !== -1) {<br>
// 如果pos值为-1则说明搜索'version='失败<br>
const start = pos + nameTxt.length; // cookie值开始的位置<br>
let end = allCookies.indexOf(';', start); // 从cookie值开始的位置起搜索第一个';'的位置,即cookie值结尾的位置<br>
if (end === -1) end = allCookies.length; // 如果end值为-1说明cookie列表里只有一个cookie<br>
// 提取cookie的值<br>
return allCookies.substring(start, end); // 对它解码<br>
}</li>
</ul>
<p>return '';<br>
// 搜索失败，返回空字符串<br>
};</p>
<p>/**</p>
<ul>
<li>删除cookie</li>
<li>@param name</li>
<li>@param path<br>
*/<br>
const deleteCookie = (name: string, path: string) =&gt; {<br>
const expires = new Date(0);<br>
document.cookie = <code>${escape(name)}=;expires=${expires.toUTCString()}${path === '' ? '' :</code>;path=${path}<code>}</code>;<br>
};<br>
export default {<br>
setCookie,<br>
getCookieValue,<br>
deleteCookie<br>
};</li>
</ul>
<p>createRoutes</p>
<p>yarn add view-design</p>
<p>/**</p>
<ul>
<li>@FileName createRoutes.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import Vue from 'vue';<br>
import VueRouter from 'vue-router';<br>
import {LoadingBar} from 'view-design';</li>
</ul>
<p>Vue.use(VueRouter);<br>
const VueRouterPush = VueRouter.prototype.push;</p>
<p>VueRouter.prototype.push = function push(to: any): any {<br>
const a: any = VueRouterPush.call(this, to);<br>
a.catch((err: any) =&gt; err);<br>
return a;<br>
};</p>
<p>LoadingBar.config({<br>
color: '#ff9900',<br>
failedColor: '#ed4014',<br>
height: 3,<br>
duration: 800<br>
});</p>
<p>const createRouter = (baseRoutes: any = [], routes: any = [], base = '', homeName = 'home', mode: any = 'history', title = '', turnTo: any = () =&gt; {<br>
}) =&gt; {<br>
const router = new VueRouter({<br>
mode: mode,<br>
base: base,<br>
routes: [<br>
...routes,<br>
...baseRoutes<br>
]<br>
});</p>
<p>// 全局守卫<br>
router.beforeEach((to: any, from: any, next: any) =&gt; {<br>
LoadingBar.start();<br>
turnTo(to, next, homeName);<br>
});</p>
<p>// 全局后置钩子<br>
router.afterEach((to: any) =&gt; {<br>
if (to.meta.title) {<br>
document.title = title ? to.meta.title + '-' + title : to.meta.title;<br>
}<br>
LoadingBar.finish();<br>
window.scrollTo(0, 0);<br>
});<br>
return router;<br>
};</p>
<p>export default createRouter;</p>
<p>gbk</p>
<p>/**</p>
<ul>
<li>@FileName gbk.js</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title 序列化 反序列化</li>
<li>@Desc<br>
*<em>/<br>
/</em> eslint-disable */<br>
const util = function () {<br>
var data = function (zipData: any) {<br>
return zipData<br>
.replace(/#(\d+)$/g, function (a: any, b: any) {<br>
return Array(+b + 3).join('#');<br>
})<br>
.replace(/#/g, '####')<br>
.replace(/(\w\w)😦[\w#]+)(?:,|<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;}&#039;, got &#039;#&#039; at position 115: …     if (a != &#039;#̲#&#039;) {
         …'>)/g, function (a: any, hd: any, dt: any) {
       return dt.replace(/../g, function (a: any) {
         if (a != &#039;##&#039;) {
           return hd + a;
         } else {
           return a;
         }
       });
     });
 }(&#039;4e:020405060f12171f20212326292e2f313335373c40414244464a5155575a5b6263646567686a6b6c6d6e6f727475767778797a7b7c7d7f808182838485878a#909697999c9d9ea3aaafb0b1b4b6b7b8b9bcbdbec8cccfd0d2dadbdce0e2e6e7e9edeeeff1f4f8f9fafcfe,4f:00020304050607080b0c12131415161c1d212328292c2d2e31333537393b3e3f40414244454748494a4b4c525456616266686a6b6d6e7172757778797a7d8081828586878a8c8e909293959698999a9c9e9fa1a2a4abadb0b1b2b3b4b6b7b8b9babbbcbdbec0c1c2c6c7c8c9cbcccdd2d3d4d5d6d9dbe0e2e4e5e7ebecf0f2f4f5f6f7f9fbfcfdff,50:000102030405060708090a#0b0e1011131516171b1d1e20222324272b2f303132333435363738393b3d3f404142444546494a4b4d5051525354565758595b5d5e5f6061626364666768696a6b6d6e6f70717273747578797a7c7d818283848687898a8b8c8e8f909192939495969798999a9b9c9d9e9fa0a1a2a4a6aaabadaeafb0b1b3b4b5b6b7b8b9bcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdced0d1d2d3d4d5d7d8d9dbdcdddedfe0e1e2e3e4e5e8e9eaebeff0f1f2f4f6f7f8f9fafcfdfeff,51:00010203040508#090a0c0d0e0f1011131415161718191a1b1c1d1e1f2022232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e42474a4c4e4f5052535758595b5d5e5f606163646667696a6f727a7e7f838486878a8b8e8f90919394989a9d9e9fa1a3a6a7a8a9aaadaeb4b8b9babebfc1c2c3c5c8cacdced0d2d3d4d5d6d7d8d9dadcdedfe2e3e5e6e7e8e9eaeceef1f2f4f7fe,52:0405090b0c0f101314151c1e1f2122232526272a2c2f313234353c3e4445464748494b4e4f5253555758#595a5b5d5f6062636466686b6c6d6e7071737475767778797a7b7c7e808384858687898a8b8c8d8e8f91929495969798999a9ca4a5a6a7aeafb0b4b5b6b7b8b9babbbcbdc0c1c2c4c5c6c8cacccdcecfd1d3d4d5d7d9dadbdcdddee0e1e2e3e5e6e7e8e9eaebecedeeeff1f2f3f4f5f6f7f8fbfcfd,53:0102030407090a0b0c0e11121314181b1c1e1f2224252728292b2c2d2f3031323334353637383c3d404244464b4c4d505458595b5d65686a6c6d7276797b7c7d7e80818387888a8e8f#90919293949697999b9c9ea0a1a4a7aaabacadafb0b1b2b3b4b5b7b8b9babcbdbec0c3c4c5c6c7cecfd0d2d3d5dadcdddee1e2e7f4fafeff,54:000205070b1418191a1c2224252a303336373a3d3f4142444547494c4d4e4f515a5d5e5f6061636567696a6b6c6d6e6f7074797a7e7f8183858788898a8d919397989c9e9fa0a1a2a5aeb0b2b5b6b7b9babcbec3c5cacbd6d8dbe0e1e2e3e4ebeceff0f1f4f5f6f7f8f9fbfe,55:0002030405080a0b0c0d0e121315161718191a1c1d1e1f212526#28292b2d3234353638393a3b3d40424547484b4c4d4e4f515253545758595a5b5d5e5f60626368696b6f7071727374797a7d7f85868c8d8e9092939596979a9b9ea0a1a2a3a4a5a6a8a9aaabacadaeafb0b2b4b6b8babcbfc0c1c2c3c6c7c8cacbcecfd0d5d7d8d9dadbdee0e2e7e9edeef0f1f4f6f8f9fafbfcff,56:0203040506070a0b0d1011121314151617191a1c1d202122252628292a2b2e2f30333537383a3c3d3e404142434445464748494a4b4f5051525355565a5b5d5e5f6061#636566676d6e6f70727374757778797a7d7e7f80818283848788898a8b8c8d9091929495969798999a9b9c9d9e9fa0a1a2a4a5a6a7a8a9aaabacadaeb0b1b2b3b4b5b6b8b9babbbdbebfc0c1c2c3c4c5c6c7c8c9cbcccdcecfd0d1d2d3d5d6d8d9dce3e5e6e7e8e9eaeceeeff2f3f6f7f8fbfc,57:00010205070b0c0d0e0f101112131415161718191a1b1d1e202122242526272b313234353637383c3d3f414344454648494b52535455565859626365676c6e707172747578797a7d7e7f80#818788898a8d8e8f90919495969798999a9c9d9e9fa5a8aaacafb0b1b3b5b6b7b9babbbcbdbebfc0c1c4c5c6c7c8c9cacccdd0d1d3d6d7dbdcdee1e2e3e5e6e7e8e9eaebeceef0f1f2f3f5f6f7fbfcfeff,58:0103040508090a0c0e0f101213141617181a1b1c1d1f222325262728292b2c2d2e2f31323334363738393a3b3c3d3e3f4041424345464748494a4b4e4f505253555657595a5b5c5d5f6061626364666768696a6d6e6f707172737475767778797a7b7c7d7f82848687888a8b8c#8d8e8f909194959697989b9c9da0a1a2a3a4a5a6a7aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbdbebfc0c2c3c4c6c7c8c9cacbcccdcecfd0d2d3d4d6d7d8d9dadbdcdddedfe0e1e2e3e5e6e7e8e9eaedeff1f2f4f5f7f8fafbfcfdfeff,59:000103050608090a0b0c0e1011121317181b1d1e2021222326282c30323335363b3d3e3f404345464a4c4d505253595b5c5d5e5f616364666768696a6b6c6d6e6f70717275777a7b7c7e7f8085898b8c8e8f90919495989a9b9c9d9fa0a1a2a6#a7acadb0b1b3b4b5b6b7b8babcbdbfc0c1c2c3c4c5c7c8c9cccdcecfd5d6d9dbdedfe0e1e2e4e6e7e9eaebedeeeff0f1f2f3f4f5f6f7f8fafcfdfe,5a:00020a0b0d0e0f101214151617191a1b1d1e2122242627282a2b2c2d2e2f3033353738393a3b3d3e3f414243444547484b4c4d4e4f5051525354565758595b5c5d5e5f60616364656668696b6c6d6e6f7071727378797b7c7d7e808182838485868788898a8b8c8d8e8f9091939495969798999c9d9e9fa0a1a2a3a4a5a6a7a8a9abac#adaeafb0b1b4b6b7b9babbbcbdbfc0c3c4c5c6c7c8cacbcdcecfd0d1d3d5d7d9dadbdddedfe2e4e5e7e8eaecedeeeff0f2f3f4f5f6f7f8f9fafbfcfdfeff,5b:0001020304050607080a0b0c0d0e0f10111213141518191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303133353638393a3b3c3d3e3f4142434445464748494a4b4c4d4e4f52565e606167686b6d6e6f7274767778797b7c7e7f82868a8d8e90919294969fa7a8a9acadaeafb1b2b7babbbcc0c1c3c8c9cacbcdcecf#d1d4d5d6d7d8d9dadbdce0e2e3e6e7e9eaebecedeff1f2f3f4f5f6f7fdfe,5c:0002030507080b0c0d0e10121317191b1e1f2021232628292a2b2d2e2f303233353637434446474c4d5253545657585a5b5c5d5f62646768696a6b6c6d70727374757677787b7c7d7e808384858687898a8b8e8f9293959d9e9fa0a1a4a5a6a7a8aaaeafb0b2b4b6b9babbbcbec0c2c3c5c6c7c8c9cacccdcecfd0d1d3d4d5d6d7d8dadbdcdddedfe0e2e3e7e9ebeceeeff1f2f3f4f5f6f7f8f9fafcfdfeff,5d:00#01040508090a0b0c0d0f10111213151718191a1c1d1f2021222325282a2b2c2f3031323335363738393a3b3c3f4041424344454648494d4e4f5051525354555657595a5c5e5f6061626364656667686a6d6e7071727375767778797a7b7c7d7e7f8081838485868788898a8b8c8d8e8f9091929394959697989a9b9c9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b8b9babbbcbdbebfc0c1c2c3c4c6c7c8c9cacbcccecfd0d1d2d3d4d5d6d7d8d9dadcdfe0e3e4eaeced#f0f5f6f8f9fafbfcff,5e:000407090a0b0d0e1213171e1f20212223242528292a2b2c2f303233343536393a3e3f404143464748494a4b4d4e4f50515253565758595a5c5d5f60636465666768696a6b6c6d6e6f70717577797e8182838588898c8d8e92989b9da1a2a3a4a8a9aaabacaeafb0b1b2b4babbbcbdbfc0c1c2c3c4c5c6c7c8cbcccdcecfd0d4d5d7d8d9dadcdddedfe0e1e2e3e4e5e6e7e9ebecedeeeff0f1f2f3f5f8f9fbfcfd,5f:050607090c0d0e10121416191a1c1d1e21222324#282b2c2e30323334353637383b3d3e3f4142434445464748494a4b4c4d4e4f5154595a5b5c5e5f60636567686b6e6f72747576787a7d7e7f83868d8e8f919394969a9b9d9e9fa0a2a3a4a5a6a7a9abacafb0b1b2b3b4b6b8b9babbbebfc0c1c2c7c8cacbced3d4d5dadbdcdedfe2e3e5e6e8e9eceff0f2f3f4f6f7f9fafc,60:0708090b0c10111317181a1e1f2223242c2d2e3031323334363738393a3d3e404445464748494a4c4e4f5153545657585b5c5e5f606165666e71727475777e80#8182858687888a8b8e8f909193959798999c9ea1a2a4a5a7a9aaaeb0b3b5b6b7b9babdbebfc0c1c2c3c4c7c8c9cccdcecfd0d2d3d4d6d7d9dbdee1e2e3e4e5eaf1f2f5f7f8fbfcfdfeff,61:02030405070a0b0c1011121314161718191b1c1d1e21222528292a2c2d2e2f303132333435363738393a3b3c3d3e4041424344454647494b4d4f50525354565758595a5b5c5e5f606163646566696a6b6c6d6e6f717273747678797a7b7c7d7e7f808182838485868788898a8c8d8f9091929395#969798999a9b9c9e9fa0a1a2a3a4a5a6aaabadaeafb0b1b2b3b4b5b6b8b9babbbcbdbfc0c1c3c4c5c6c7c9cccdcecfd0d3d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e7e8e9eaebecedeeeff0f1f2f3f4f6f7f8f9fafbfcfdfe,62:00010203040507091314191c1d1e2023262728292b2d2f303132353638393a3b3c424445464a4f50555657595a5c5d5e5f6061626465687172747577787a7b7d818283858687888b8c8d8e8f9094999c9d9ea3a6a7a9aaadaeafb0b2b3b4b6b7b8babec0c1#c3cbcfd1d5dddee0e1e4eaebf0f2f5f8f9fafb,63:00030405060a0b0c0d0f10121314151718191c2627292c2d2e30313334353637383b3c3e3f40414447484a51525354565758595a5b5c5d60646566686a6b6c6f707273747578797c7d7e7f81838485868b8d9193949597999a9b9c9d9e9fa1a4a6abafb1b2b5b6b9bbbdbfc0c1c2c3c5c7c8cacbccd1d3d4d5d7d8d9dadbdcdddfe2e4e5e6e7e8ebeceeeff0f1f3f5f7f9fafbfcfe,64:0304060708090a0d0e111215161718191a1d1f222324#252728292b2e2f3031323335363738393b3c3e404243494b4c4d4e4f505153555657595a5b5c5d5f60616263646566686a6b6c6e6f70717273747576777b7c7d7e7f8081838688898a8b8c8d8e8f90939497989a9b9c9d9fa0a1a2a3a5a6a7a8aaabafb1b2b3b4b6b9bbbdbebfc1c3c4c6c7c8c9cacbcccfd1d3d4d5d6d9dadbdcdddfe0e1e3e5e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,65:01020304050607080a0b0c0d0e0f10111314151617191a1b1c1d1e1f2021#222324262728292a2c2d30313233373a3c3d404142434446474a4b4d4e5052535457585a5c5f606164656768696a6d6e6f7173757678797a7b7c7d7e7f8081828384858688898a8d8e8f92949596989a9d9ea0a2a3a6a8aaacaeb1b2b3b4b5b6b7b8babbbebfc0c2c7c8c9cacdd0d1d3d4d5d8d9dadbdcdddedfe1e3e4eaebf2f3f4f5f8f9fbfcfdfeff,66:0104050708090b0d1011121617181a1b1c1e2122232426292a2b2c2e3032333738393a3b3d3f40424445464748494a4d4e505158#595b5c5d5e6062636567696a6b6c6d7172737578797b7c7d7f808183858688898a8b8d8e8f909293949598999a9b9c9e9fa0a1a2a3a4a5a6a9aaabacadafb0b1b2b3b5b6b7b8babbbcbdbfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8dadedfe0e1e2e3e4e5e7e8eaebecedeeeff1f5f6f8fafbfd,67:010203040506070c0e0f1112131618191a1c1e20212223242527292e303233363738393b3c3e3f414445474a4b4d5254555758595a5b5d62636466676b6c6e717476#78797a7b7d8082838586888a8c8d8e8f9192939496999b9fa0a1a4a6a9acaeb1b2b4b9babbbcbdbebfc0c2c5c6c7c8c9cacbcccdced5d6d7dbdfe1e3e4e6e7e8eaebedeef2f5f6f7f8f9fafbfcfe,68:01020304060d1012141518191a1b1c1e1f20222324252627282b2c2d2e2f30313435363a3b3f474b4d4f52565758595a5b5c5d5e5f6a6c6d6e6f707172737578797a7b7c7d7e7f8082848788898a8b8c8d8e90919294959698999a9b9c9d9e9fa0a1a3a4a5a9aaabacaeb1b2b4b6b7b8#b9babbbcbdbebfc1c3c4c5c6c7c8cacccecfd0d1d3d4d6d7d9dbdcdddedfe1e2e4e5e6e7e8e9eaebecedeff2f3f4f6f7f8fbfdfeff,69:00020304060708090a0c0f11131415161718191a1b1c1d1e21222325262728292a2b2c2e2f313233353637383a3b3c3e4041434445464748494a4b4c4d4e4f50515253555658595b5c5f616264656768696a6c6d6f7072737475767a7b7d7e7f8183858a8b8c8e8f909192939697999a9d9e9fa0a1a2a3a4a5a6a9aaacaeafb0b2b3b5b6b8b9babcbd#bebfc0c2c3c4c5c6c7c8c9cbcdcfd1d2d3d5d6d7d8d9dadcdddee1e2e3e4e5e6e7e8e9eaebeceeeff0f1f3f4f5f6f7f8f9fafbfcfe,6a:000102030405060708090b0c0d0e0f10111213141516191a1b1c1d1e20222324252627292b2c2d2e30323334363738393a3b3c3f40414243454648494a4b4c4d4e4f515253545556575a5c5d5e5f60626364666768696a6b6c6d6e6f70727374757677787a7b7d7e7f81828385868788898a8b8c8d8f929394959698999a9b9c9d9e9fa1a2a3a4a5a6#a7a8aaadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,6b:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f252628292a2b2c2d2e2f303133343536383b3c3d3f4041424445484a4b4d4e4f5051525354555657585a5b5c5d5e5f606168696b6c6d6e6f7071727374757677787a7d7e7f808588#8c8e8f909194959798999c9d9e9fa0a2a3a4a5a6a7a8a9abacadaeafb0b1b2b6b8b9babbbcbdbec0c3c4c6c7c8c9caccced0d1d8dadcdddedfe0e2e3e4e5e6e7e8e9ecedeef0f1f2f4f6f7f8fafbfcfeff,6c:000102030408090a0b0c0e12171c1d1e2023252b2c2d31333637393a3b3c3e3f434445484b4c4d4e4f5152535658595a62636566676b6c6d6e6f71737577787a7b7c7f8084878a8b8d8e9192959697989a9c9d9ea0a2a8acafb0b4b5b6b7bac0c1c2c3c6c7c8cbcdcecfd1d2d8#d9dadcdddfe4e6e7e9ecedf2f4f9ff,6d:000203050608090a0d0f101113141516181c1d1f20212223242628292c2d2f30343637383a3f404244494c50555657585b5d5f6162646567686b6c6d707172737576797a7b7d7e7f8081838486878a8b8d8f9092969798999a9ca2a5acadb0b1b3b4b6b7b9babbbcbdbec1c2c3c8c9cacdcecfd0d2d3d4d5d7dadbdcdfe2e3e5e7e8e9eaedeff0f2f4f5f6f8fafdfeff,6e:0001020304060708090b0f12131518191b1c1e1f222627282a2c2e30313335#3637393b3c3d3e3f40414245464748494a4b4c4f5051525557595a5c5d5e606162636465666768696a6c6d6f707172737475767778797a7b7c7d8081828487888a8b8c8d8e91929394959697999a9b9d9ea0a1a3a4a6a8a9abacadaeb0b3b5b8b9bcbebfc0c3c4c5c6c8c9cacccdced0d2d6d8d9dbdcdde3e7eaebecedeeeff0f1f2f3f5f6f7f8fafbfcfdfeff,6f:000103040507080a0b0c0d0e101112161718191a1b1c1d1e1f212223252627282c2e303234353738393a3b3c3d3f404142#43444548494a4c4e4f5051525354555657595a5b5d5f60616364656768696a6b6c6f707173757677797b7d7e7f808182838586878a8b8f909192939495969798999a9b9d9e9fa0a2a3a4a5a6a8a9aaabacadaeafb0b1b2b4b5b7b8babbbcbdbebfc1c3c4c5c6c7c8cacbcccdcecfd0d3d4d5d6d7d8d9dadbdcdddfe2e3e4e5e6e7e8e9eaebecedf0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,70:000102030405060708090a0b0c0d0e0f1012131415161718191c1d1e1f2021222425262728292a#2b2c2d2e2f30313233343637383a3b3c3d3e3f404142434445464748494a4b4d4e505152535455565758595a5b5c5d5f606162636465666768696a6e7172737477797a7b7d818283848687888b8c8d8f90919397989a9b9e9fa0a1a2a3a4a5a6a7a8a9aab0b2b4b5b6babebfc4c5c6c7c9cbcccdcecfd0d1d2d3d4d5d6d7dadcdddee0e1e2e3e5eaeef0f1f2f3f4f5f6f8fafbfcfeff,71:0001020304050607080b0c0d0e0f111214171b1c1d1e1f2021222324252728292a2b2c2d2e323334#353738393a3b3c3d3e3f4041424344464748494b4d4f505152535455565758595a5b5d5f6061626365696a6b6c6d6f707174757677797b7c7e7f8081828385868788898b8c8d8e909192939596979a9b9c9d9ea1a2a3a4a5a6a7a9aaabadaeafb0b1b2b4b6b7b8babbbcbdbebfc0c1c2c4c5c6c7c8c9cacbcccdcfd0d1d2d3d6d7d8d9dadbdcdddedfe1e2e3e4e6e8e9eaebecedeff0f1f2f3f4f5f6f7f8fafbfcfdfeff,72:0001020304050708090a0b0c0d0e0f101112131415161718191a#1b1c1e1f2021222324252627292b2d2e2f3233343a3c3e40414243444546494a4b4e4f505153545557585a5c5e60636465686a6b6c6d707173747677787b7c7d828385868788898c8e9091939495969798999a9b9c9d9ea0a1a2a3a4a5a6a7a8a9aaabaeb1b2b3b5babbbcbdbebfc0c5c6c7c9cacbcccfd1d3d4d5d6d8dadb#95</span>,30:000102,00b702:c9c7,00a830:0305,2014ff5e20:162618191c1d,30:141508090a0b0c0d0e0f16171011,00:b1d7f7,22:362728110f2a2908371aa52520,231222:992b2e614c483d1d606e6f64651e3534,26:4240,00b020:3233,2103ff0400a4ff:e0e1,203000a7211626:0605,25:cbcfcec7c6a1a0b3b2,203b21:92909193,30:13#95<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 25: …273747576777879#̲4'>,21:70717273747576777879#4</span>,24:88898a8b8c8d8e8f909192939495969798999a9b7475767778797a7b7c7d7e7f808182838485868760616263646566676869##,32:20212223242526272829##,21:606162636465666768696a6b#97<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 193: …758595a5b5c5de3#̲95'>,ff:010203e505060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5de3#95</span>,30:4142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f90919293#106<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 173: …ff0f1f2f3f4f5f6#̲103'>a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6#103</span>,03:9192939495969798999a9b9c9d9e9fa0a1a3a4a5a6a7a8a9#6<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 49: …1c3c4c5c6c7c8c9#̲5'>b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c3c4c5c6c7c8c9#5</span>,fe:3536393a3f403d3e41424344##3b3c373831#3334#104$,04:10111213141501161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f#13<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 67: …8494a4b4c4d4e4f#̲11'>30313233343551363738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f#11</span>,02:cacbd9,20:13152535,21:050996979899,22:151f23526667bf,25:505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727381828384858687#88898a8b8c8d8e8f939495bcbde2e3e4e5,2609229530:121d1e#9<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …:4448,e7c802:61#̲2'>,010100e101ce00e0011300e9011b00e8012b00ed01d000ec014d00f301d200f2016b00fa01d400f901:d6d8dadc,00:fcea,0251e7c701:4448,e7c802:61#2</span>,31:05060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223242526272829#19<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 65: …2d5,fe30ff:e2e4#̲,212132:31#,20:…'>,30:212223242526272829,32a333:8e8f9c9d9ea1c4ced1d2d5,fe30ff:e2e4#,212132:31#,20:10#1</span>,30:fc9b9cfdfe069d9e,fe:494a4b4c4d4e4f50515254555657595a5b5c5d5e5f6061#626364656668696a6b,e7:e7e8e9eaebecedeeeff0f1f2f3,30:07#11<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 157: …445464748494a4b#̲13'>,25:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b#13</span>,72:dcdddfe2e3e4e5e6e7eaebf5f6f9fdfeff,73:00020405060708090b0c0d0f1011121418191a1f2023242627282d2f30323335363a3b3c3d404142434445464748#494a4b4c4e4f515354555658595a5b5c5d5e5f6162636465666768696a6b6e7071#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …ebfc1c3c4c5c6c7#̲cbccced2d3d4d5d…'>72737475767778797a7b7c7d7f808182838586888a8c8d8f90929394959798999a9c9d9ea0a1a3a4a5a6a7a8aaacadb1b4b5b6b8b9bcbdbebfc1c3c4c5c6c7#cbccced2d3d4d5d6d7d8dadbdcdddfe1e2e3e4e6e8eaebeceeeff0f1f3f4f5f6f7#92</span>f8f9fafbfcfdfeff,74:0001020407080b0c0d0e1112131415161718191c1d1e1f2021232427292b2d2f31323738393a3b3d3e3f4042434445464748494a4b4c4d#4e4f505152535456585d606162636465666768696a6b6c6e6f717273747578797a#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …0c1c2c3c4c5c6c7#̲c8c9cacbcccdcec…'>7b7c7d7f8284858688898a8c8d8f9192939495969798999a9b9d9fa0a1a2a3a4a5a6aaabacadaeafb0b1b2b3b4b5b6b7b8b9bbbcbdbebfc0c1c2c3c4c5c6c7#c8c9cacbcccdcecfd0d1d3d4d5d6d7d8d9dadbdddfe1e5e7e8e9eaebecedf0f1f2#92</span>f3f5f8f9fafbfcfdfe,75:0001020305060708090a0b0c0e1012141516171b1d1e202122232426272a2e3436393c3d3f414243444647494a4d5051525355565758#5d5e5f60616263646768696b6c6d6e6f7071737576777a7b7c7d7e808182848587#92$88898a8c8d8e909395989b9c9ea2a6a7a8a9aaadb6b7babbbfc0c1c6cbcccecfd0d1d3d7d9dadcdddfe0e1e5e9ecedeeeff2f3f5f6f7f8fafbfdfe,76:02040607#08090b0d0e0f11121314161a1c1d1e212327282c2e2f31323637393a3b3d414244#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …092949597989a9b#̲9c9d9e9fa0a1a2a…'>45464748494a4b4e4f50515253555758595a5b5d5f6061626465666768696a6c6d6e7071727374757677797a7c7f80818385898a8c8d8f9092949597989a9b#9c9d9e9fa0a1a2a3a5a6a7a8a9aaabacadafb0b3b5b6b7b8b9babbbcbdbec0c1c3,554a963f57c3632854ce550954c076:914c,853c77ee827e788d72319698978d6c285b894ffa630966975cb880fa684880ae660276ce51f9655671ac7ff1888450b2596561ca6fb382ad634c625253ed54277b06516b75a45df462d48dcb9776628a8019575d97387f627238767d67cf767e64464f708d2562dc7a17659173ed642c6273822c9881677f724862:6ecc,4f3474e3534a529e7eca90a65e2e6886699c81807ed168d278c5868c9551508d8c2482de80de53058912526576:c4c7c9cbccd3d5d9dadcdddee0e1e2e3e4e6e7e8e9eaebecedf0f3f5f6f7fafbfdff,77:00020305060a0c0e0f1011121314151617181b1c1d1e21232425272a2b#2c2e3031323334393b3d3e3f4244454648494a4b4c4d4e4f52535455565758595c,858496f94fdd582199715b9d62:b1a5,66b48c799c8d7206676f789160b253:5117,8f8880cc8d1d94a1500d72c8590760eb711988ab595482ef672c7b285d297ef7752d6cf58e668ff8903c9f3b6bd491197b145f7c78a784d6853d6b:d5d9d6,5e:0187,75f995ed655d5f:0ac5,8f9f58c181c2907f965b97ad8fb97f168d2c62414fbf53:d85e,8f:a8a9ab,904d68075f6a819888689cd6618b522b762a5f6c658c6fd26ee85bbe644851:75b0,67c44e1979c9997c70b377:5d5e5f606467696a6d6e6f7071727374757677787a7b7c818283868788898a8b8f90939495969798999a9b9c9d9ea1a3a4a6a8abadaeafb1b2b4b6b7b8b9ba#bcbec0c1c2c3c4c5c6c7c8c9cacbcccecfd0d1d2d3d4d5d6d8d9dadddedfe0e1e4,75c55e7673bb83e064ad62e894b56ce2535a52c3640f94c27b944f2f5e1b823681:168a,6e246cca9a736355535c54fa886557e04e0d5e036b657c3f90e8601664e6731c88c16750624d8d22776c8e2991c75f6983dc8521991053c286956b8b60:ede8,707f82:cd31,4ed36ca785cf64cd7cd969fd66f9834953957b564fa7518c6d4b5c428e6d63d253c983:2c36,67e578b4643d5bdf5c945dee8be762c667f48c7a640063ba8749998b8c177f2094f24ea7961098a4660c731677:e6e8eaeff0f1f2f4f5f7f9fafbfc,78:0304050607080a0b0e0f101315191b1e20212224282a2b2e2f31323335363d3f414243444648494a4b4d4f51535458595a#5b5c5e5f606162636465666768696f7071727374757678797a7b7d7e7f80818283,573a5c1d5e38957f507f80a05382655e7545553150218d856284949e671d56326f6e5de2543570928f66626f64a463a35f7b6f8890f481e38fb05c1866685ff16c8996488d81886c649179f057ce6a59621054484e587a0b60e96f848bda627f901e9a8b79e4540375f4630153196c608fdf5f1b9a70803b9f7f4f885c3a8d647fc565a570bd51:45b2,866b5d075ba062bd916c75748e0c7a2061017b794ec77ef877854e1181ed521d51fa6a7153a88e87950496cf6ec19664695a78:848586888a8b8f9092949596999d9ea0a2a4a6a8a9aaabacadaeafb5b6b7b8babbbcbdbfc0c2c3c4c6c7c8cccdcecfd1d2d3d6d7d8dadbdcdddedfe0e1e2e3#e4e5e6e7e9eaebedeeeff0f1f3f5f6f8f9fbfcfdfeff,79:00020304060708090a0b0c,784050a877d7641089e6590463e35ddd7a7f693d4f20823955984e3275ae7a975e:628a,95ef521b5439708a6376952457826625693f918755076df37eaf882262337ef075b5832878c196cc8f9e614874f78bcd6b64523a8d506b21806a847156f153064e:ce1b,51d17c97918b7c074fc38e7f7be17a9c64675d1450ac810676017cb96dec7fe067515b:58f8,78cb64:ae13,63:aa2b,9519642d8fbe7b5476296253592754466b7950a362345e266b864ee38d37888b5f85902e79:0d0e0f1011121415161718191a1b1c1d1f2021222325262728292a2b2c2d2e2f3031323335363738393d3f42434445474a4b4c4d4e4f505152545558596163#6466696a6b6c6e70717273747576797b7c7d7e7f8283868788898b8c8d8e909192,6020803d62c54e39535590f863b880c665e66c2e4f4660ee6de18bde5f3986cb5f536321515a83616863520063638e4850125c9b79775bfc52307a3b60bc905376d75f:b797,76848e6c706f767b7b4977aa51f3909358244f4e6ef48fea654c7b1b72c46da47fdf5ae162b55e95573084827b2c5e1d5f1f90127f1498a063826ec7789870b95178975b57ab75354f4375385e9760e659606dc06bbf788953fc96d551cb52016389540a94938c038dcc7239789f87768fed8c0d53e079:939495969798999b9c9d9e9fa0a1a2a3a4a5a6a8a9aaabacadaeafb0b1b2b4b5b6b7b8bcbfc2c4c5c7c8cacccecfd0d3d4d6d7d9dadbdcdddee0e1e2e5e8ea#eceef1f2f3f4f5f6f7f9fafcfeff,7a:0104050708090a0c0f10111213151618191b1c,4e0176ef53ee948998769f0e952d5b9a8ba24e:221c,51ac846361c252a8680b4f97606b51bb6d1e515c6296659796618c46901775d890fd77636bd272:8aec,8bfb583577798d4c675c9540809a5ea66e2159927aef77ed953b6bb565ad7f0e58065151961f5bf958a954288e726566987f56e4949d76fe9041638754c659:1a3a,579b8eb267358dfa8235524160f0581586fe5ce89e454fc4989d8bb95a2560765384627c904f9102997f6069800c513f80335c1499756d314e8c7a:1d1f21222425262728292a2b2c2d2e2f303132343536383a3e4041424344454748494a4b4c4d4e4f50525354555658595a5b5c5d5e5f606162636465666768#696a6b6c6d6e6f717273757b7c7d7e828587898a8b8c8e8f909394999a9b9ea1a2,8d3053d17f5a7b4f4f104e4f96006cd573d085e95e06756a7ffb6a0a77fe94927e4151e170e653cd8fd483038d2972af996d6cdb574a82b365b980aa623f963259a84eff8bbf7eba653e83f2975e556198de80a5532a8bfd542080ba5e9f6cb88d3982ac915a54296c1b52067eb7575f711a6c7e7c89594b4efd5fff61247caa4e305c0167ab87025cf0950b98ce75af70fd902251af7f1d8bbd594951e44f5b5426592b657780a45b7562:76c2,8f905e456c1f7b264f:0fd8,670d7a:a3a4a7a9aaabaeafb0b1b2b4b5b6b7b8b9babbbcbdbec0c1c2c3c4c5c6c7c8c9cacccdcecfd0d1d2d3d4d5d7d8dadbdcdde1e2e4e7e8e9eaebeceef0f1f2f3#f4f5f6f7f8fbfcfe,7b:0001020507090c0d0e1012131617181a1c1d1f21222327292d,6d:6eaa,798f88b15f17752b629a8f854fef91dc65a781:2f51,5e9c81508d74526f89868d4b590d50854ed8961c723681798d1f5bcc8ba3964459877f1a549056:760e,8be565396982949976d66e895e72751867:46d1,7aff809d8d76611f79c665628d635188521a94a27f38809b7eb25c976e2f67607bd9768b9ad8818f7f947cd5641e95507a3f54:4ae5,6b4c640162089e3d80f3759952729769845b683c86e496:0194,94ec4e2a54047ed968398ddf801566f45e9a7fb97b:2f303234353637393b3d3f404142434446484a4d4e535557595c5e5f61636465666768696a6b6c6d6f70737476787a7c7d7f81828384868788898a8b8c8e8f#9192939698999a9b9e9fa0a3a4a5aeafb0b2b3b5b6b7b9babbbcbdbebfc0c2c3c4,57c2803f68975de5653b529f606d9f9a4f9b8eac516c5bab5f135de96c5e62f18d21517194a952fe6c9f82df72d757a267848d2d591f8f9c83c754957b8d4f306cbd5b6459d19f1353e486ca9aa88c3780a16545987e56fa96c7522e74dc52505be1630289024e5662d0602a68fa51735b9851a089c27ba199867f5060ef704c8d2f51495e7f901b747089c4572d78455f529f9f95fa8f689b3c8be17678684267dc8d:ea35,523d8f8a6eda68cd950590ed56fd679c88f98fc754c87b:c5c8c9cacbcdcecfd0d2d4d5d6d7d8dbdcdedfe0e2e3e4e7e8e9ebecedeff0f2f3f4f5f6f8f9fafbfdff,7c:0001020304050608090a0d0e101112131415171819#1a1b1c1d1e20212223242528292b2c2d2e2f3031323334353637393a3b3c3d3e42,9ab85b696d776c264ea55bb39a87916361a890af97e9542b6db55bd251fd558a7f:55f0,64bc634d65f161be608d710a6c:5749,592f676d822a58d5568e8c6a6beb90dd597d801753f76d695475559d83:77cf,683879be548c4f55540876d28c8996026cb36db88d6b89109e648d3a563f9ed175d55f8872e0606854fc4ea86a2a886160528f7054c470d886799e3f6d2a5b8f5f187ea255894faf7334543c539a501954:0e7c,4e4e5ffd745a58f6846b80e1877472d07cca6e567c:434445464748494a4b4c4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f70717275767778797a7e7f8081828384858687#888a8b8c8d8e8f90939496999a9ba0a1a3a6a7a8a9abacadafb0b4b5b6b7b8babb,5f27864e552c62a44e926caa623782b154d7534e733e6ed1753b521253168bdd69d05f8a60006dee574f6b2273af68538fd87f13636260a3552475ea8c6271156da35ba65e7b8352614c9ec478fa87577c27768751f060f6714c66435e4c604d8c0e707063258f895fbd606286d456de6bc160946167534960e066668d3f79fd4f1a70e96c478b:b3f2,7ed88364660f5a5a9b426d:51f7,8c416d3b4f19706b83b7621660d1970d8d27797851fb57:3efa,673a75787a3d79ef7b957c:bfc0c2c3c4c6c9cbcecfd0d1d2d3d4d8dadbdddee1e2e3e4e5e6e7e9eaebecedeef0f1f2f3f4f5f6f7f9fafcfdfeff,7d:000102030405060708090b0c0d0e0f10#1112131415161718191a1b1c1d1e1f212324252628292a2c2d2e30313233343536,808c99658ff96fc08ba59e2159ec7ee97f095409678168d88f917c4d96c653ca602575be6c7253735ac97ea7632451e0810a5df184df628051805b634f0e796d524260b86d4e5b:c4c2,8b:a1b0,65e25fcc964559937e:e7aa,560967b759394f735bb652a0835a988a8d3e753294be50477a3c4ef767b69a7e5ac16b7c76d1575a5c167b3a95f4714e517c80a9827059787f04832768c067ec78:b177,62e363617b804fed526a51cf835069db92748d:f531,89c1952e7bad4ef67d:3738393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6f70717273747576#78797a7b7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798,506582305251996f6e:1085,6da75efa50f559dc5c066d466c5f7586848b686859568bb253209171964d854969127901712680f64ea490ca6d479a845a0756bc640594f077eb4fa5811a72e189d2997a7f347ede527f655991758f:7f83,53eb7a9663:eda5,768679f888579636622a52ab8282685467706377776b7aed6d017ed389e359d0621285c982a5754c501f4ecb75a58beb5c4a5dfe7b4b65a491d14eca6d25895f7d2795264ec58c288fdb9773664b79818fd170ec6d787d:999a9b9c9d9e9fa0a1a2a3a4a5a7a8a9aaabacadafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9#dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fa,5c3d52b283465162830e775b66769cb84eac60ca7c:beb3,7ecf4e958b66666f988897595883656c955c5f8475c997567a:dfde,51c070af7a9863ea7a767ea0739697ed4e4570784e5d915253a965:51e7,81fc8205548e5c31759a97a062d872d975bd5c459a7983ca5c40548077e94e3e6cae805a62d2636e5de851778ddd8e1e952f4ff153e560e770ac526763509e435a1f5026773753777ee26485652b628963985014723589c951b38bc07edd574783cc94a7519b541b5cfb7d:fbfcfdfeff,7e:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f30313233343536373839#3a3c3d3e3f40424344454648494a4b4c4d4e4f505152535455565758595a5b5c5d,4fca7ae36d5a90e19a8f55805496536154af5f0063e9697751ef6168520a582a52d8574e780d770b5eb761777ce062:5b97,4ea27095800362f770e49760577782db67ef68f578d5989779d158f354b353ef6e34514b523b5ba28bfe80af554357a660735751542d7a7a60505b5463a762a053e362635bc767af54ed7a9f82e691775e9388e4593857ae630e8de880ef57577b774fa95feb5bbd6b3e53217b5072c2684677:ff36,65f751b54e8f76d45cbf7aa58475594e9b4150807e:5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081838485868788898a8b8c8d8e8f909192939495969798999a9c9d9e#aeb4bbbcd6e4ecf9,7f:0a101e37393b3c3d3e3f404143464748494a4b4c4d4e4f5253,998861276e8357646606634656f062:ec69,5ed39614578362c955878721814a8fa3556683b167658d5684dd5a6a680f62e67bee961151706f9c8c3063fd89c861d27f0670c26ee57405699472fc5eca90ce67176d6a635e52b3726280014f6c59e5916a70d96d9d52d24e5096f7956d857e78ca7d2f5121579264c2808b7c7b6cea68f1695e51b7539868a872819ece7bf172f879bb6f137406674e91cc9ca4793c83:8954,540f68174e3d538952b1783e5386522950884f:8bd0,7f:56595b5c5d5e6063646566676b6c6d6f7073757677787a7b7c7d7f8082838485868788898b8d8f9091929395969798999b9ca0a2a3a5a6a8a9aaabacadaeb1#b3b4b5b6b7babbbec0c2c3c4c6c7c8c9cbcdcfd0d1d2d3d6d7d9dadbdcdddee2e3,75e27acb7c926ca596b6529b748354e94fe9805483b28fde95705ec9601c6d9f5e18655b813894fe604b70bc7ec37cae51c968817cb1826f4e248f8691cf667e4eae8c0564a9804a50da759771ce5be58fbd6f664e86648295635ed66599521788c270c852a3730e7433679778f797164e3490bb9cde6dcb51db8d41541d62ce73b283f196f69f8494c34f367f9a51cc707596755cad988653e64ee46e9c740969b4786b998f7559521876246d4167f3516d9f99804b54997b3c7abf7f:e4e7e8eaebecedeff2f4f5f6f7f8f9fafdfeff,80:020708090a0e0f11131a1b1d1e1f2123242b2c2d2e2f303234393a3c3e404144454748494e4f505153555657#595b5c5d5e5f6061626364656667686b6c6d6e6f7072737475767778797a7b7c7d,9686578462e29647697c5a0464027bd36f0f964b82a6536298855e90708963b35364864f9c819e93788c97328d:ef42,9e7f6f5e79845f559646622e9a74541594dd4fa365c55c:6561,7f1586516c2f5f8b73876ee47eff5ce6631b5b6a6ee653754e7163a0756562a18f6e4f264ed16ca67eb68bba841d87ba7f57903b95237ba99aa188f8843d6d1b9a867edc59889ebb739b780186829a:6c82,561b541757cb4e709ea653568fc881097792999286ee6ee1851366fc61626f2b80:7e818285888a8d8e8f909192949597999ea3a6a7a8acb0b3b5b6b8b9bbc5c7c8c9cacbcfd0d1d2d3d4d5d8dfe0e2e3e6eef5f7f9fbfeff,81:000103040507080b#0c1517191b1c1d1f202122232425262728292a2b2d2e3033343537393a3b3c3d3f,8c298292832b76f26c135fd983bd732b8305951a6bdb77db94c6536f830251925e3d8c8c8d384e4873ab679a68859176970971646ca177095a9295416bcf7f8e66275bd059b95a9a95:e8f7,4eec84:0c99,6aac76df9530731b68a65b5f772f919a97617cdc8ff78c1c5f257c7379d889c56ccc871c5bc65e4268c977207ef551:954d,52c95a297f05976282d763cf778485d079d26e3a5e9959998511706d6c1162bf76bf654f60af95fd660e879f9e2394ed54:0d7d,8c2c647881:40414243444547494d4e4f525657585b5c5d5e5f6162636466686a6b6c6f727375767778818384858687898b8c8d8e90929394959697999a9e9fa0a1a2a4a5#a7a9abacadaeafb0b1b2b4b5b6b7b8b9bcbdbebfc4c5c7c8c9cbcdcecfd0d1d2d3,647986116a21819c78e864699b5462b9672b83ab58a89ed86cab6f205bde964c8c0b725f67d062c772614ea959c66bcd589366ae5e5552df6155672876ee776672677a4662ff54:ea50,94a090a35a1c7eb36c164e435976801059485357753796be56ca63208111607c95f96dd65462998151855ae980fd59ae9713502a6ce55c3c62df4f60533f817b90066eba852b62c85e7478be64b5637b5ff55a18917f9e1f5c3f634f80425b7d556e95:4a4d,6d8560a867e072de51dd5b8181:d4d5d6d7d8d9dadbdcdddedfe0e1e2e4e5e6e8e9ebeeeff0f1f2f5f6f7f8f9fafdff,82:030708090a0b0e0f111315161718191a1d2024252627292e323a3c3d3f#404142434546484a4c4d4e5051525354555657595b5c5d5e606162636465666769,62e76cde725b626d94ae7ebd81136d53519c5f04597452aa6012597366968650759f632a61e67cef8bfa54e66b279e256bb485d5545550766ca4556a8db4722c5e156015743662cd6392724c5f986e436d3e65006f5876d878d076fc7554522453db4e535e9e65c180:2ad6,629b5486522870ae888d8dd16ce1547880da57f988f48d54966a914d4f696c9b55b776c6783062a870f96f8e5f6d84ec68da787c7bf781a8670b9e4f636778b0576f7812973962:79ab,528874356bd782:6a6b6c6d71757677787b7c808183858687898c90939495969a9b9ea0a2a3a7b2b5b6babbbcbfc0c2c3c5c6c9d0d6d9dadde2e7e8e9eaecedeef0f2f3f5f6f8#fafcfdfeff,83:000a0b0d1012131618191d1e1f20212223242526292a2e3032373b3d,5564813e75b276ae533975de50fb5c418b6c7bc7504f72479a9798d86f0274e27968648777a562fc98918d2b54c180584e52576a82f9840d5e7351ed74f68bc45c4f57616cfc98875a4678349b448feb7c955256625194fa4ec68386846183e984b257d467345703666e6d668c3166dd7011671f6b3a6816621a59bb4e0351c46f0667d26c8f517668cb59476b6775665d0e81109f5065d779:4841,9a918d775c824e5e4f01542f5951780c56686c148fc45f036c:7de3,8bab639083:3e3f41424445484a4b4c4d4e5355565758595d6270717273747576797a7e7f808182838487888a8b8c8d8f909194959697999a9d9fa1a2a3a4a5a6a7acadae#afb5bbbebfc2c3c4c6c8c9cbcdced0d1d2d3d5d7d9dadbdee2e3e4e6e7e8ebeced,60706d3d7275626694:8ec5,53438fc17b7e4edf8c264e7e9ed494:b1b3,524d6f5c90636d458c3458115d4c6b:2049,67aa545b81547f8c589985375f3a62a26a47953965726084686577a74e544fa85de7979864ac7fd85ced4fcf7a8d520783044e14602f7a8394a64fb54eb279e6743452e482b964d279bd5bdd6c8197528f7b6c22503e537f6e0564ce66746c3060c598778bf75e86743c7a7779cb4e1890b174036c4256da914b6cc58d8b533a86c666f28eaf5c489a716e2083:eeeff3f4f5f6f7fafbfcfeff,84:0002050708090a10121314151617191a1b1e1f20212223292a2b2c2d2e2f30323334353637393a3b3e3f404142434445474849#4a4b4c4d4e4f505253545556585d5e5f606264656667686a6e6f70727477797b7c,53d65a369f8b8da353bb570898a76743919b6cc9516875ca62f372ac52:389d,7f3a7094763853749e4a69b7786e96c088d97fa471:36c3,518967d374e458e4651856b78ba9997662707ed560f970ed58ec4e:c1ba,5fcd97e74efb8ba45203598a7eab62544ecd65e5620e833884c98363878d71946eb65bb97ed2519763c967d480898339881551125b7a59828fb14e736c5d516589258f6f962e854a745e95:10f0,6da682e55f3164926d128428816e9cc3585e8d5b4e0953c184:7d7e7f8081838485868a8d8f90919293949596989a9b9d9e9fa0a2a3a4a5a6a7a8a9aaabacadaeb0b1b3b5b6b7bbbcbec0c2c3c5c6c7c8cbcccecfd2d4d5d7#d8d9dadbdcdee1e2e4e7e8e9eaebedeeeff1f2f3f4f5f6f7f8f9fafbfdfe,85:000102,4f1e6563685155d34e2764149a9a626b5ac2745f82726da968ee50e7838e7802674052396c997eb150bb5565715e7b5b665273ca82eb67495c715220717d886b95ea965564c58d6181b355846c5562477f2e58924f2455468d4f664c4e0a5c1a88f368a2634e7a0d70e7828d52fa97f65c1154e890b57ecd59628d4a86c782:0c0d,8d6664445c0461516d89793e8bbe78377533547b4f388eab6df15a207ec5795e6c885ba15a76751a80be614e6e1758f075:1f25,727253477ef385:030405060708090a0b0d0e0f101214151618191b1c1d1e2022232425262728292a2d2e2f303132333435363e3f404142444546474b4c4d4e4f505152535455#57585a5b5c5d5f60616263656667696a6b6c6d6e6f707173757677787c7d7f8081,770176db526980dc57235e08593172ee65bd6e7f8bd75c388671534177f362fe65f64ec098df86805b9e8bc653f277e24f7f5c4e9a7659cb5f0f793a58eb4e1667ff4e8b62ed8a93901d52bf662f55dc566c90024ed54f8d91ca99706c0f5e0260435ba489c68bd56536624b99965b:88ff,6388552e53d77626517d852c67a268b36b8a62928f9353d482126dd1758f4e668d4e5b70719f85af66:91d9,7f7287009ecd9f205c5e672f8ff06811675f620d7ad658855eb665706f3185:82838688898a8b8c8d8e909192939495969798999a9d9e9fa0a1a2a3a5a6a7a9abacadb1b2b3b4b5b6b8babbbcbdbebfc0c2c3c4c5c6c7c8cacbcccdced1d2#d4d6d7d8d9dadbdddedfe0e1e2e3e5e6e7e8eaebecedeeeff0f1f2f3f4f5f6f7f8,60555237800d6454887075295e05681362f4971c53cc723d8c016c3477617a0e542e77ac987a821c8bf47855671470c165af64955636601d79c153f84e1d6b7b80865bfa55e356db4f:3a3c,99725df3677e80386002988290015b8b8b:bcf5,641c825864de55fd82cf91654fd77d20901f7c9f50f358516eaf5bbf8bc980839178849c7b97867d96:8b8f,7ee59ad3788e5c817a57904296a7795f5b59635f7b0b84d168ad55067f2974107d2295016240584c4ed65b835979585485:f9fafcfdfe,86:0001020304060708090a0b0c0d0e0f10121314151718191a1b1c1d1e1f20212223242526282a2b2c2d2e2f3031323334353637393a3b3d3e3f40#4142434445464748494a4b4c525355565758595b5c5d5f6061636465666768696a,736d631e8e:4b0f,80ce82d462ac53f06cf0915e592a60016c70574d644a8d2a762b6ee9575b6a8075f06f6d8c:2d08,57666bef889278b363a253f970ad6c645858642a580268e0819b55107cd650188eba6dcc8d9f70eb638f6d9b6ed47ee68404684390036dd896768ba85957727985e4817e75bc8a8a68af52548e22951163d098988e44557c4f5366ff568f60d56d9552435c4959296dfb586b75:301c,606c82148146631167618fe2773a8d:f334,94c15e165385542c70c386:6d6f7072737475767778838485868788898e8f90919294969798999a9b9e9fa0a1a2a5a6abadaeb2b3b7b8b9bbbcbdbebfc1c2c3c5c8cccdd2d3d5d6d7dadc#dde0e1e2e3e5e6e7e8eaebeceff5f6f7fafbfcfdff,87:010405060b0c0e0f10111416,6c405ef7505c4ead5ead633a8247901a6850916e77b3540c94dc5f647ae5687663457b527edf75db507762955934900f51f879c37a8156fe5f9290146d825c60571f541051546e4d56e263a89893817f8715892a9000541e5c6f81c062:d658,81319e3596409a:6e7c,692d59a562d3553e631654c786d96d3c5a0374e6889c6b6a59168c4c5f2f6e7e73a9987d4e3870f75b8c7897633d665a769660cb5b9b5a494e0781556c6a738b4ea167897f515f8065fa671b5fd859845a0187:191b1d1f20242627282a2b2c2d2f303233353638393a3c3d404142434445464a4b4d4f505152545556585a5b5c5d5e5f6162666768696a6b6c6d6f71727375#7778797a7f8081848687898a8c8e8f90919294959698999a9b9c9d9ea0a1a2a3a4,5dcd5fae537197e68fdd684556f4552f60df4e3a6f4d7ef482c7840e59d44f:1f2a,5c3e7eac672a851a5473754f80c355829b4f4f4d6e2d8c135c096170536b761f6e29868a658795fb7eb9543b7a337d0a95ee55e17fc174ee631d87176da17a9d621165a1536763e16c835deb545c94a84e4c6c618bec5c4b65e0829c68a754:3e34,6b:cb66,4e9463425348821e4f:0dae,575e620a96fe6664726952:ffa1,609f8bef661471996790897f785277fd6670563b54389521727a87:a5a6a7a9aaaeb0b1b2b4b6b7b8b9bbbcbebfc1c2c3c4c5c7c8c9cccdcecfd0d4d5d6d7d8d9dadcdddedfe1e2e3e4e6e7e8e9ebecedeff0f1f2f3f4f5f6f7f8#fafbfcfdff,88:0001020405060708090b0c0d0e0f101112141718191a1c1d1e1f2023,7a00606f5e0c6089819d591560dc718470ef6eaa6c5072806a8488ad5e2d4e605ab3559c94e36d177cfb9699620f7ec6778e867e5323971e8f9666875ce14fa072ed4e0b53a6590f54136380952851484ed99c9c7ea454b88d248854823795f26d8e5f265acc663e966973:b02e,53bf817a99857fa15baa96:7750,7ebf76f853a2957699997bb189446e584e617fd479658be660f354cd4eab98795df76a6150cf54118c618427785d9704524a54ee56a395006d885bb56dc6665388:2425262728292a2b2c2d2e2f30313334353637383a3b3d3e3f414243464748494a4b4e4f505152535556585a5b5c5d5e5f6066676a6d6f717374757678797a#7b7c80838687898a8c8e8f90919394959798999a9b9d9e9fa0a1a3a5a6a7a8a9aa,5c0f5b5d6821809655787b11654869544e9b6b47874e978b534f631f643a90aa659c80c18c10519968b0537887f961c86c:c4fb,8c225c5185aa82af950c6b238f9b65b05f:fbc3,4fe18845661f8165732960fa51745211578b5f6290a2884c91925e78674f602759d351:44f6,80f853086c7996c4718a4f:11ee,7f9e673d55c5950879c088967ee3589f620c9700865a5618987b5f908bb884c4915753d965ed5e8f755c60647d6e5a7f7e:eaed,8f6955a75ba360ac65cb738488:acaeafb0b2b3b4b5b6b8b9babbbdbebfc0c3c4c7c8cacbcccdcfd0d1d3d6d7dadbdcdddee0e1e6e7e9eaebecedeeeff2f5f6f7fafbfdff,89:0001030405060708#090b0c0d0e0f1114151617181c1d1e1f20222324262728292c2d2e2f3132333537,9009766377297eda9774859b5b667a7496ea884052cb718f5faa65ec8be25bfb9a6f5de16b896c5b8b:adaf,900a8fc5538b62bc9e:262d,54404e2b82bd7259869c5d1688596daf96c554d14e9a8bb6710954bd960970df6df976d04e25781487125ca95ef68a00989c960e708e6cbf594463a9773c884d6f148273583071d5538c781a96c155015f6671305bb48c1a9a8c6b83592e9e2f79e76768626c4f6f75a17f8a6d0b96336c274ef075d2517b68376f3e908081705996747689:38393a3b3c3d3e3f40424345464748494a4b4c4d4e4f505152535455565758595a5b5c5d6061626364656768696a6b6c6d6e6f707172737475767778797a7c#7d7e808284858788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1,64475c2790657a918c2359da54ac8200836f898180006930564e8036723791ce51b64e5f987563964e1a53f666f3814b591c6db24e0058f9533b63d694f14f:9d0a,886398905937905779fb4eea80f075916c825b9c59e85f5d69058681501a5df24e5977e34ee5827a6291661390915c794ebf5f7981c69038808475ab4ea688d4610f6bc55fc64e4976ca6ea28b:e3ae,8c0a8bd15f027f:fccc,7ece83:356b,56e06bb797f3963459fb541f94f66deb5bc5996e5c395f15969089:a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c3cdd3d4d5d7d8d9dbdddfe0e1e2e4e7e8e9eaecedeef0f1f2f4f5f6f7f8f9fa#fbfcfdfeff,8a:01020304050608090a0b0c0d0e0f101112131415161718191a1b1c1d,537082f16a315a749e705e947f2883b984:2425,836787478fce8d6276c85f719896786c662054df62e54f6381c375c85eb896cd8e0a86f9548f6cf36d8c6c38607f52c775285e7d4f1860a05fe75c24753190ae94c072b96cb96e389149670953:cbf3,4f5191c98bf153c85e7c8fc26de44e8e76c26986865e611a82064f:59de,903e9c7c61096e:1d14,96854e885a3196e84e0e5c7f79b95b878bed7fbd738957df828b90c15401904755bb5cea5fa161086b3272f180b28a:891e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3f4041424344454647494a4b4c4d4e4f505152535455565758595a5b5c5d5e#5f606162636465666768696a6b6c6d6e6f7071727374757677787a7b7c7d7e7f80,6d745bd388d598848c6b9a6d9e336e0a51:a443,57a38881539f63f48f9556ed54585706733f6e907f188fdc82d1613f6028966266f07ea68d:8ac3,94a55cb37ca4670860a6960580184e9190e75300966851418fd08574915d665597f55b55531d78386742683d54c9707e5bb08f7d518d572854b1651266828d:5e43,810f846c906d7cdf51ff85fb67a365e96fa186a48e81566a90207682707671e58d2362e952196cfd8d3c600e589e618e66fe8d60624e55b36e23672d8f678a:81828384858687888b8c8d8e8f9091929495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2#c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3,94e195f87728680569a8548b4e4d70b88bc86458658b5b857a84503a5be877bb6be18a797c986cbe76cf65a98f975d2d5c5586386808536062187ad96e5b7efd6a1f7ae05f706f335f20638c6da867564e085e108d264ed780c07634969c62db662d627e6cbc8d7571677f695146808753ec906e629854f286f08f998005951785178fd96d5973cd659f771f7504782781fb8d1e94884fa6679575b98bca9707632f9547963584b8632377415f8172f04e896014657462ef6b63653f8a:e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,8b:0001020304050608090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223#24252728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445,5e2775c790d18bc1829d679d652f5431871877e580a281026c414e4b7ec7804c76f4690d6b966267503c4f84574063076b628dbe53ea65e87eb85fd763:1ab7,81:f3f4,7f6e5e1c5cd95236667a79e97a1a8d28709975d46ede6cbb7a924e2d76c55fe0949f88777ec879cd80bf91cd4ef24f17821f54685dde6d328bcc7ca58f7480985e1a549276b15b99663c9aa473e0682a86db6731732a8b:f8db,90107af970db716e62c477a956314e3b845767f152a986c08d2e94f87b518b:464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364656768696a6b6d6e6f707172737475767778797a7b7c7d7e7f80818283848586#8788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9facb1bbc7d0ea,8c:091e,4f4f6ce8795d9a7b6293722a62fd4e1378168f6c64b08d5a7bc668695e8488c55986649e58ee72b6690e95258ffd8d5857607f008c0651c6634962d95353684c74228301914c55447740707c6d4a517954a88d4459ff6ecb6dc45b5c7d2b4ed47c7d6ed35b5081ea6e0d5b579b0368d58e2a5b977efc603b7eb590b98d70594f63cd79df8db3535265cf79568bc5963b7ec494bb7e825634918967007f6a5c0a907566285de64f5067de505a4f5c57505e:a7#3</span>,8c:38393a3b3c3d3e3f4042434445484a4b4d4e4f5051525354565758595b5c5d5e5f60636465666768696c6d6e6f707172747576777b7c7d7e7f808183848687#888b8d8e8f90919293959697999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacad,4e:8d0c,51404e105eff53454e:15981e,9b325b6c56694e2879ba4e3f53154e47592d723b536e6c1056df80e499976bd3777e9f174e:369f,9f104e:5c6993,82885b5b556c560f4ec453:8d9da3a5ae,97658d5d53:1af5262e3e,8d5c53:6663,52:02080e2d333f404c5e615c,84af52:7d82819093,51827f544e:bbc3c9c2e8e1ebde,4f1b4ef34f:2264,4ef54f:2527092b5e67,65384f:5a5d,8c:aeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebec#edeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,8d:000102030405060708090a0b0c0d,4f:5f57323d76749189838f7e7baa7cac94e6e8eac5dae3dcd1dff8,50:294c,4ff350:2c0f2e2d,4ffe50:1c0c25287e4355484e6c7ba5a7a9bad6,510650:edece6ee,51:070b,4edd6c3d4f:5865ce,9fa06c467c74516e5dfd9ec999985181591452f9530d8a07531051eb591951554ea051564eb388:6ea4,4eb5811488d279805b3488037fb851:abb1bdbc,8d:0e0f101112131415161718191a1b1c205152575f6568696a6c6e6f717278797a7b7c7d7e7f808283868788898c8d8e8f90929395969798999a9b9c9d9ea0a1#a2a4a5a6a7a8a9aaabacadaeafb0b2b6b7b9bbbdc0c1c2c5c7c8c9cacdd0d2d3d4,51:c796a2a5,8b:a0a6a7aab4b5b7c2c3cbcfced2d3d4d6d8d9dcdfe0e4e8e9eef0f3f6f9fcff,8c:000204070c0f1112141516191b181d1f202125272a2b2e2f32333536,53:697a,96:1d2221312a3d3c4249545f676c7274888d97b0,90:979b9d99aca1b4b3b6ba,8d:d5d8d9dce0e1e2e5e6e7e9edeef0f1f2f4f6fcfeff,8e:00010203040607080b0d0e1011121315161718191a1b1c202124252627282b2d303233343637383b3c3e#3f4345464c4d4e4f505354555657585a5b5c5d5e5f60616263646567686a6b6e71,90:b8b0cfc5bed0c4c7d3e6e2dcd7dbebeffe,91:04221e23312f394346,520d594252:a2acadbe,54ff52:d0d6f0,53df71ee77cd5ef451:f5fc,9b2f53b65f01755a5def57:4ca9a1,58:7ebcc5d1,57:292c2a33392e2f5c3b4269856b867c7b686d7673ada48cb2cfa7b493a0d5d8dad9d2b8f4eff8e4dd,8e:73757778797a7b7d7e808283848688898a8b8c8d8e91929395969798999a9b9d9fa0a1a2a3a4a5a6a7a8a9aaadaeb0b1b3b4b5b6b7b8b9bbbcbdbebfc0c1c2#c3c4c5c6c7c8c9cacbcccdcfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4,58:0b0d,57:fded,58:001e194420656c81899a80,99a89f1961ff82:797d7f8f8aa8848e919799abb8beb0c8cae398b7aecbccc1a9b4a1aa9fc4cea4e1,830982:f7e4,83:0f07,82:dcf4d2d8,830c82:fbd3,83:111a061415,82:e0d5,83:1c515b5c08923c34319b5e2f4f47435f4017602d3a336665,8e:e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,8f:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20212223#2425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f4041424344,83:681b696c6a6d6eb078b3b4a0aa939c857cb6a97db87b989ea8babcc1,840183:e5d8,580784:180b,83:ddfdd6,84:1c381106,83:d4df,84:0f03,83:f8f9eac5c0,842683:f0e1,84:5c515a597387887a89783c4669768c8e316dc1cdd0e6bdd3cabfbae0a1b9b497e5e3,850c750d853884f085:391f3a,8f:45464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364656a808c929da0a1a2a4a5a6a7aaacadaeafb2b3b4b5b7b8babbbcbfc0c3c6#c9cacbcccdcfd2d6d7dae0e1e3e7eceff1f2f4f5f6fafbfcfeff,90:07080c0e131518,85:563b,84:fffc,85:594868645e7a,77a285:43727ba4a8878f79ae9c85b9b7b0d3c1dcff,86:270529163c,5efe5f0859:3c41,803759:555a58,530f5c:22252c34,62:4c6a9fbbcadad7ee,632262f663:394b43adf6717a8eb46dac8a69aebcf2f8e0ffc4dece,645263:c6be,64:45410b1b200c26215e846d96,90:191c2324252728292a2b2c303132333437393a3d3f4043454648494a4b4c4e545556595a5c5d5e5f6061646667696a6b6c6f70717273767778797a7b7c7e81#84858687898a8c8d8e8f90929496989a9c9e9fa0a4a5a7a8a9abadb2b7bcbdbfc0,64:7ab7b899bac0d0d7e4e2,65:09252e,5f:0bd2,75195f1153:5ff1fde9e8fb,54:1216064b5253545643215759233282947771649a9b8476669dd0adc2b4d2a7a6d3d472a3d5bbbfccd9dadca9aaa4ddcfde,551b54e7552054fd551454f355:22230f11272a678fb5496d41553f503c,90:c2c3c6c8c9cbcccdd2d4d5d6d8d9dadedfe0e3e4e5e9eaeceef0f1f2f3f5f6f7f9fafbfcff,91:00010305060708090a0b0c0d0e0f1011121314151617181a1b1c#1d1f20212425262728292a2b2c2d2e30323334353637383a3b3c3d3e3f40414244,55:375675767733305c8bd283b1b988819f7ed6917bdfbdbe9499eaf7c9,561f55:d1ebecd4e6ddc4efe5f2f3cccde8f5e4,8f9456:1e080c012423,55fe56:00272d5839572c4d62595c4c548664716b7b7c8593afd4d7dde1f5ebf9ff,57:040a091c,5e:0f191411313b3c,91:454748515354555658595b5c5f606667686b6d737a7b7c808182838486888a8e8f939495969798999c9d9e9fa0a1a4a5a6a7a8a9abacb0b1b2b3b6b7b8b9bb#bcbdbebfc0c1c2c3c4c5c6c8cbd0d2d3d4d5d6d7d8d9dadbdddedfe0e1e2e3e4e5,5e:3744545b5e61,5c:8c7a8d9096889899919a9cb5a2bdacabb1a3c1b7c4d2e4cbe5,5d:020327262e241e061b583e343d6c5b6f5d6b4b4a697482999d,8c735d:b7c5,5f:73778287898c95999ca8adb5bc,88625f6172:adb0b4b7b8c3c1cecdd2e8efe9f2f4f7,730172f3730372fa91:e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,92:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021222324#25262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445,72fb73:1713210a1e1d152239252c3831504d57606c6f7e,821b592598e759:2402,99:636768696a6b6c74777d8084878a8d9091939495,5e:80918b96a5a0b9b5beb3,8d535e:d2d1dbe8ea,81ba5f:c4c9d6cf,60035fee60045f:e1e4fe,60:0506,5f:eaedf8,60:1935261b0f0d292b0a3f2178797b7a42,92:464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f7071727375767778797a7b7c7d7e7f808182838485#868788898a8b8c8d8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7,60:6a7d969aad9d83928c9becbbb1ddd8c6dab4,61:20261523,60f461:000e2b4a75ac94a7b7d4f5,5fdd96b395:e9ebf1f3f5f6fcfe,96:030406080a0b0c0d0f12151617191a,4e2c723f62156c:35545c4aa38590948c6869747686a9d0d4adf7f8f1d7b2e0d6faebeeb1d3effe,92:a8a9aaabacadafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8#e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,93:00010203040506070809,6d:39270c43480704190e2b4d2e351a4f525433916f9ea05e93945c607c63,6e1a6d:c7c5de,6e0e6d:bfe0,6e116d:e6ddd9,6e166dab6e0c6dae6e:2b6e4e6bb25f865354322544dfb198e0,6f2d6e:e2a5a7bdbbb7d7b4cf8fc29f,6f:6246472415,6ef96f:2f364b742a0929898d8c78727c7ad1,93:0a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3f40414243444546474849#4a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696b,6f:c9a7b9b6c2e1eedee0ef,70:1a231b39354f5e,5b:80849593a5b8,752f9a9e64345b:e4ee,89305bf08e478b078f:b6d3d5e5eee4e9e6f3e8,90:05040b26110d162135362d2f445152506858625b,66b990:747d8288838b,5f:50575658,5c3b54ab5c:5059,5b715c:6366,7fbc5f:2a292d,82745f3c9b3b5c6e59:81838da9aaa3,93:6c6d6e6f707172737475767778797a7b7c7d7e7f808182838485868788898a8b8c8d8e909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaab#acadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cbcccd,59:97caab9ea4d2b2afd7be,5a:0506,59dd5a0859:e3d8f9,5a:0c09323411231340674a553c6275,80ec5a:aa9b777abeebb2d2d4b8e0e3f1d6e6d8dc,5b:091716323740,5c:151c,5b:5a6573515362,9a:7577787a7f7d808185888a90929396989b9c9d9fa0a2a3a5a7,7e:9fa1a3a5a8a9,93:cecfd0d1d2d3d4d5d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,94:000102030405060708090a0b0c0d#0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e,7e:adb0bec0c1c2c9cbccd0d4d7dbe0e1e8ebeeeff1f2,7f0d7e:f6fafbfe,7f:01020307080b0c0f111217191c1b1f212223242526272a2b2c2d2f3031323335,5e7a757f5ddb753e909573:8e91aea29fcfc2d1b7b3c0c9c8e5d9,987c740a73:e9e7debaf2,74:0f2a5b262528302e2c,94:2f303132333435363738393a3b3c3d3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6c6d6e6f#707172737475767778797a7b7c7d7e7f8081828384919698c7cfd3d4dae6fb,95:1c20,74:1b1a415c575559776d7e9c8e8081878b9ea8a990a7d2ba,97:eaebec,67:4c535e4869a5876a7398a775a89ead8b777cf0,680967d8680a67:e9b0,680c67:d9b5dab3dd,680067:c3b8e2,680e67:c1fd,68:323360614e624464831d55664167403e4a4929b58f7477936bc2,696e68fc69:1f20,68f995:27333d43484b555a606e74757778797a7b7c7d7e808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aa#abacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacb,692468f069:0b0157,68e369:10713960425d846b80987834cc8788ce896663799ba7bbabadd4b1c1cadf95e08dff,6a2f69ed6a:171865,69f26a:443ea0505b358e793d28587c9190a997ab,73:3752,6b:8182878492938d9a9ba1aa,8f:6b6d71727375767877797a7c7e818284878b,95:cccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3e4e5e6e7ecff,96:0713181b1e20232425262728292b2c2d2f303738393a3e41434a4e4f5152535657#58595a5c5d5e606365666b6d6e6f70717378797a7b7c7d7e7f808182838487898a,8f:8d8e8f989a,8ece62:0b171b1f222125242c,81e774:eff4ff,75:0f1113,65:34eeeff0,66:0a19,677266:031500,708566:f71d34313635,800666:5f54414f56615777848ca79dbedbdce6e9,8d:3233363b3d4045464849474d5559,89:c7cacbcccecfd0d1,72:6e9f5d666f7e7f848b8d8f92,63:0832b0,96:8c8e91929395969a9b9d9e9fa0a1a2a3a4a5a6a8a9aaabacadaeafb1b2b4b5b7b8babbbfc2c3c8cacbd0d1d3d4d6d7d8d9dadbdcdddedfe1e2e3e4e5e6e7eb#ecedeef0f1f2f4f5f8fafbfcfdff,97:0203050a0b0c10111214151718191a1b1d1f20,64:3fd8,80046b:eaf3fdf5f9,6c:0507060d1518191a2129242a32,65:35556b,72:4d525630,8662521680:9f9c93bc,670a80:bdb1abadb4b7e7e8e9eadbc2c4d9cdd7,671080:ddebf1f4ed,81:0d0e,80:f2fc,671581128c5a81:361e2c1832484c5374595a7160697c7d6d67,584d5ab581:888291,6ed581:a3aacc,672681:cabb,97:2122232425262728292b2c2e2f3133343536373a3b3c3d3f404142434445464748494a4b4c4d4e4f5051545557585a5c5d5f63646667686a6b6c6d6e6f7071#72757778797a7b7d7e7f8081828384868788898a8c8e8f9093959697999a9b9c9d,81:c1a6,6b:243739434659,98:d1d2d3d5d9da,6bb35f406bc289f365909f5165:93bcc6c4c3ccced2d6,70:809c969dbbc0b7abb1e8ca,71:1013162f31735c6845724a787a98b3b5a8a0e0d4e7f9,72:1d28,706c71:1866b9,62:3e3d434849,79:3b4046495b5c535a6257606f677a858a9aa7b3,5f:d1d0,97:9e9fa1a2a4a5a6a7a8a9aaacaeb0b1b3b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1e2e3#e4e5e8eeeff0f1f2f4f7f8f9fafbfcfdfeff,98:000102030405060708090a0b0c0d0e,60:3c5d5a67415963ab,61:060d5da99dcbd1,620680:807f,6c:93f6,6dfc77:f6f8,78:0009171811,65ab78:2d1c1d393a3b1f3c252c23294e6d56572650474c6a9b939a879ca1a3b2b9a5d4d9c9ecf2,790578f479:13241e34,9f9b9e:f9fbfc,76f177:040d,76f977:07081a22192d263538505147435a68,98:0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142434445464748494a4b4c4d#4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e,77:62657f8d7d808c919fa0b0b5bd,75:3a404e4b485b727983,7f:58615f,8a487f:68747179817e,76:cde5,883294:8586878b8a8c8d8f909497959a9b9ca3a4abaaadacafb0b2b4b6b7b8b9babcbdbfc4c8c9cacbcccdced0d1d2d5d6d7d9d8dbdedfe0e2e4e5e7e8ea,98:6f70717273748b8e929599a3a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcfd0d4d6d7dbdcdde0e1e2e3e4#e5e6e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,99:0001020304050607,94:e9ebeeeff3f4f5f7f9fcfdff,95:03020607090a0d0e0f1213141516181b1d1e1f222a2b292c3132343637383c3e3f4235444546494c4e4f525354565758595b5e5f5d61626465666768696a6b6c6f7172733a,77:e7ec,96c979:d5ede3eb,7a065d477a:03021e14,99:08090a0b0c0e0f1112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2f303132333435363738393a3b3c3d3e3f40414243444546474849#4a4b4c4d4e4f50515253565758595a5b5c5d5e5f60616264667378797b7e828389,7a:393751,9ecf99a57a7076:888e9399a4,74:dee0,752c9e:202228292a2b2c3231363837393a3e414244464748494b4c4e5155575a5b5c5e63666768696a6b6c716d73,75:929496a09daca3b3b4b8c4b1b0c3c2d6cde3e8e6e4ebe7,760375:f1fcff,76:1000050c170a25181519,99:8c8e9a9b9c9d9e9fa0a1a2a3a4a6a7a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8#d9dadbdcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9,76:1b3c2220402d303f35433e334d5e545c566b6f,7fca7a:e6787980868895a6a0aca8adb3,88:6469727d7f82a2c6b7bcc9e2cee3e5f1,891a88:fce8fef0,89:2119131b0a342b3641667b,758b80e576:b2b4,77dc80:1214161c20222526272928310b3543464d526971,898398:788083,99:fafbfcfdfeff,9a:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738#393a3b3c3d3e3f404142434445464748494a4b4c4d4e4f50515253545556575859,98:898c8d8f949a9b9e9fa1a2a5a6,86:4d546c6e7f7a7c7ba88d8bac9da7a3aa93a9b6c4b5ceb0bab1afc9cfb4e9f1f2edf3d0,871386:def4dfd8d1,87:0307,86f887:080a0d09233b1e252e1a3e48343129373f82227d7e7b60704c6e8b53637c64596593afa8d2,9a:5a5b5c5d5e5f606162636465666768696a6b7283898d8e949599a6a9aaabacadaeafb2b3b4b5b9bbbdbebfc3c4c6c7c8c9cacdcecfd0d2d4d5d6d7d9dadbdc#dddee0e2e3e4e5e7e8e9eaeceef0f1f2f3f4f5f6f7f8fafcfdfeff,9b:000102040506,87:c68885ad9783abe5acb5b3cbd3bdd1c0cadbeae0ee,88:1613,87fe88:0a1b21393c,7f:36424445,82107a:fafd,7b:080304150a2b0f47382a192e31202524333e1e585a45754c5d606e7b62727190a6a7b8ac9da885aa9ca2abb4d1c1ccdddae5e6ea,7c0c7b:fefc,7c:0f160b,9b:07090a0b0c0d0e1011121415161718191a1b1c1d1e2021222425262728292a2b2c2d2e3031333435363738393a3d3e3f40464a4b4c4e50525355565758595a#5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b,7c:1f2a26384140,81fe82:010204,81ec884482:2122232d2f282b383b33343e44494b4f5a5f68,88:7e8588d8df,895e7f:9d9fa7afb0b2,7c7c65497c:919d9c9ea2b2bcbdc1c7cccdc8c5d7e8,826e66a87f:bfced5e5e1e6e9eef3,7cf87d:77a6ae,7e:479b,9e:b8b4,8d:73849491b1676d,8c:4749,91:4a504e4f64,9b:7c7d7e7f808182838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9ba#bbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadb,91:626170696f7d7e7274798c85908d91a2a3aaadaeafb5b4ba,8c559e7e8d:b8eb,8e:055969,8d:b5bfbcbac4d6d7dadececfdbc6ecf7f8e3f9fbe4,8e098dfd8e:141d1f2c2e232f3a4039353d3149414251524a70767c6f74858f94909c9e,8c:78828a859894,659b89:d6dedadc,9b:dcdddedfe0e1e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,9c:000102030405060708090a0b0c0d0e0f101112131415161718191a#1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b,89:e5ebef,8a3e8b26975396:e9f3ef,97:0601080f0e2a2d303e,9f:808385868788898a8c,9efe9f:0b0d,96:b9bcbdced2,77bf96e092:8eaec8,93:3e6aca8f,94:3e6b,9c:7f8285868788,7a239c:8b8e90919294959a9b9e9fa0a1a2a3a5a6a7a8a9abadaeb0b1b2b3b4b5b6b7babbbcbdc4c5c6c7cacb3c3d3e3f404142434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a#7b7d7e808384898a8c8f93969798999daaacafb9bebfc0c1c2c8c9d1d2dadbe0e1cccdcecfd0d3d4d5d7d8d9dcdddfe2,97:7c85919294afaba3b2b4,9a:b1b0b7,9e589a:b6babcc1c0c5c2cbccd1,9b:45434749484d51,98e899:0d2e5554,9a:dfe1e6efebfbedf9,9b:080f131f23,9e:bdbe,7e3b9e:8287888b92,93d69e:9d9fdbdcdde0dfe2e9e7e5eaef,9f:222c2f39373d3e44,9c:e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,9d:000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f2021#22232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f404142#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …a7b7c7d7e7f8081#̲828384858687888…'>434445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778797a7b7c7d7e7f8081#82838485868788898a8b8c8d8e8f909192939495969798999a9b9c9d9e9fa0a1a2#92</span>a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebfc0c1c2c3c4c5c6c7c8c9cacbcccdcecfd0d1d2d3d4d5d6d7d8d9dadbdcdddedfe0e1#e2e3e4e5e6e7e8e9eaebecedeeeff0f1f2f3f4f5f6f7f8f9fafbfcfdfeff,9e:000102#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …778797a7b7c7d80#̲8183848586898a8…'>030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e24272e30343b3c404d5052535456595d5f606162656e6f727475767778797a7b7c7d80#8183848586898a8c8d8e8f90919495969798999a9b9c9ea0a1a2a3a4a5a7a8a9aa#92</span>abacadaeafb0b1b2b3b5b6b7b9babcbfc0c1c2c3c5c6c7c8cacbccd0d2d3d5d6d7d9dadee1e3e4e6e8ebecedeef0f1f2f3f4f5f6f7f8fafdff,9f:000102030405#060708090a0c0f1112141516181a1b1c1d1e1f21232425262728292a2b2d2e3031#92<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;#&#039; at position 127: …172737475767778#̲797a7b7c7d7e818…'>3233343536383a3c3f4041424345464748494a4b4c4d4e4f52535455565758595a5b5c5d5e5f606162636465666768696a6b6c6d6e6f707172737475767778#797a7b7c7d7e81828d8e8f9091929394959697989c9d9ea1a2a3a4a5,f9:2c7995e7f1#92</span>,fa:0c0d0e0f111314181f20212324272829,e8:15161718191a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132333435363738393a3b3c3d3e3f40414243#4445464748494a4b4c4d4e4f505152535455565758595a5b5c5d5e5f6061626364'),<br>
U2Ghash: any = {},<br>
G2Uhash: any = {};<br>
// @ts-ignore<br>
!function (data: any) {<br>
let k = 0;<br>
data = data.match(/..../g);<br>
for (let i = 0x81; i &lt;= 0xfe; i += 1) {<br>
for (let j = 0x40; j &lt;= 0xFE; j += 1) {<br>
U2Ghash[data[k += 1]] = (<code>%${i.toString(16)}%${j.toString(16)}</code>)<br>
.toUpperCase();<br>
}<br>
}<br>
for (const key in U2Ghash) {<br>
G2Uhash[U2Ghash[key]] = key;<br>
}<br>
}(data);</li>
</ul>
<p>function isAscii(unicode: any) {<br>
return ((unicode === 0x20AC) || (unicode &lt;= 0x007F &amp;&amp; unicode &gt;= 0x0000));<br>
}</p>
<p>return {<br>
encode: function (str: any) {<br>
return str.replace(/./g, (a: any) =&gt; {<br>
const code = a.charCodeAt(0);<br>
if (isAscii(code)) {<br>
return encodeURIComponent(a);<br>
}<br>
const key = code.toString(16);<br>
// @ts-ignore<br>
if (key.length !== 4) key = (<code>000${key}</code>).match(/....<span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 48: …y] || a;
      }̲);
    },
    d…'>/)[0];
        return U2Ghash[key] || a;
      });
    },
    decode: function (str: any) {
      return str.replace(/%[0-9A-F]{2}%[0-9A-F]{2}/g, (a: any) =&gt; {
        if (a in G2Uhash) {
          // @ts-ignore
          return String.fromCharCode(`0x</span>{G2Uhash[a]}`);<br>
}<br>
return a;<br>
}).replace(/%[\w]{2}/g, (a: any) =&gt; decodeURIComponent(a));<br>
}<br>
};<br>
}();</p>
<p>export default util;</p>
<p>存储localStorage</p>
<p>/**</p>
<ul>
<li>@FileName lStorage.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title 存储localStorage</li>
<li>@Desc<br>
**/</li>
</ul>
<p>const isNull = (obj: any) =&gt; typeof obj === 'undefined' || obj === null;<br>
const trim = (str: any) =&gt; isNull(str) ? '' : (<code>${str}</code>).replace(/<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>+|[\s\uFEFF\xA0]+$/g, '');</p>
<p>const getAll = () =&gt; {<br>
const len = localStorage.length; // 获取长度<br>
// console.log(len); // 输出5<br>
const arr: Array<any> = []; // 定义数据集<br>
for (let i = 0; i &lt; len; i += 1) {<br>
// 获取key 索引从0开始<br>
const getKey = localStorage.key(i) || '';<br>
// 获取key对应的值<br>
const getVal = localStorage.getItem(getKey);<br>
// 放进数组<br>
arr[i] = {<br>
key: getKey,<br>
val: getVal<br>
};<br>
}<br>
return arr;<br>
};<br>
const removeItem = (key: string) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return;<br>
window.localStorage.removeItem(key);<br>
};<br>
const setItem = (key: string, content: any) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return;<br>
let contentTxt = content;<br>
if (typeof content !== 'string') {<br>
contentTxt = JSON.stringify(content);<br>
}<br>
window.localStorage.setItem(key, contentTxt);<br>
};<br>
const getItem = (key: string) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return '';<br>
return window.localStorage.getItem(key) || '';<br>
};<br>
const removeDataFromKey = (key = '') =&gt; {<br>
const all: any = getAll();<br>
for (let i = 0, len = all.length; i &lt; len; i += 1) {<br>
if (trim(all[i].key).indexOf(key) !== -1) {<br>
removeItem(all[i].key);<br>
}<br>
}<br>
};</p>
<p>export default {<br>
// 存储localStorage<br>
setItem,<br>
// 获取localStorage<br>
getItem,<br>
// 删除localStorage<br>
removeItem,<br>
// 从localStorage删除所有保存的数据<br>
clear: () =&gt; window.localStorage.clear(),<br>
// 获取所有的 缓存数据<br>
getAll,<br>
// 删除指定 key匹配的数据<br>
removeDataFromKey<br>
};</p>
<p>sessionStorage操作</p>
<p>/**</p>
<ul>
<li>@FileName sStorage.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title sessionStorage操作</li>
<li>@Desc<br>
**/<br>
const setItem = (key: string, content: any) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return;<br>
sessionStorage.setItem(key, JSON.stringify(content));<br>
};<br>
const getItem = (key: string) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return;<br>
return JSON.parse(sessionStorage.getItem(key) || '');<br>
};<br>
const removeItem = (key: string) =&gt; {<br>
if (!key &amp;&amp; typeof window === 'undefined') return;<br>
sessionStorage.removeItem(key);<br>
};<br>
const clear = () =&gt; {<br>
sessionStorage.clear();<br>
};<br>
export default {<br>
setItem,<br>
getItem,<br>
removeItem,<br>
clear<br>
};</li>
</ul>
<p>mockjs 动态模拟数据</p>
<p>yarn add mockjs --dev</p>
<p>/**</p>
<ul>
<li>@FileName mock.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title 动态模拟数据</li>
<li>@Desc<br>
**/<br>
import Mock from 'mockjs';</li>
</ul>
<p>class MockJs {<br>
private baseUrl: string;</p>
<p>constructor(baseUrl = '') {<br>
this.baseUrl = baseUrl;<br>
}</p>
<p>/**</p>
<ul>
<li>基础方法</li>
<li>@param path 拦截的路径</li>
<li>@param params 返回的模拟数据</li>
<li>@param method 拦截的method<br>
*/<br>
action(path: string, params: any, method = 'post') {<br>
Mock.mock(new RegExp(<code>^${this.baseUrl + path}</code>), method, params);<br>
}</li>
</ul>
<p>get(path: string, params: any) {<br>
return this.action(path, params, 'get');<br>
}</p>
<p>post(path: string, params: any) {<br>
return this.action(path, params, 'post');<br>
}</p>
<p>put(path: string, params: any) {<br>
return this.action(path, params, 'put');<br>
}</p>
<p>patch(path: string, params: any) {<br>
return this.action(path, params, 'patch');<br>
}</p>
<p>delete(path: string, params: any) {<br>
return this.action(path, params, 'delete');<br>
}</p>
<p>head(path: string, params: any) {<br>
return this.action(path, params, 'head');<br>
}</p>
<p>options(path: string, params: any) {<br>
return this.action(path, params, 'options');<br>
}</p>
<p>tpl(data: any = '', msg = '成功', status = 200) {<br>
return {msg, data, status};<br>
}<br>
}</p>
<p>export default MockJs;</p>
<p>Tools 通用工具类</p>
<p>/**</p>
<ul>
<li>@FileName tools.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title 通用工具类</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import ViewUI from 'view-design';<br>
/* eslint-disable <em>/<br>
const utils = {<br>
getUUID(len: number, radix: number) {<br>
const chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');<br>
const uuid = [];<br>
let i;<br>
radix = radix || chars.length;<br>
if (len) {<br>
for (i = 0; i &lt; len; i += 1) uuid[i] = chars[0 | Math.random() * radix];<br>
} else {<br>
let r;<br>
uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';<br>
uuid[14] = '4';<br>
for (i = 0; i &lt; 36; i += 1) {<br>
if (!uuid[i]) {<br>
r = 0 | Math.random() * 16;<br>
uuid[i] = chars[(i === 19) ? (r &amp; 0x3) | 0x8 : r];<br>
}<br>
}<br>
}<br>
return uuid.join('');<br>
},<br>
getResult(arr = [], id = '', find = 'id', result = 'value') {<br>
let value = '';<br>
if (id === undefined || id === null || !find || !result) {<br>
return '';<br>
}<br>
arr.map((e) =&gt; {<br>
if (e[find] === id) {<br>
value = e[result];<br>
}<br>
return e;<br>
});<br>
return value;<br>
},<br>
object: {<br>
isObject(obj: any) {<br>
return typeof obj === 'object';<br>
},<br>
isFunction(obj: any) {<br>
return typeof obj === 'function';<br>
},<br>
isArray(obj: any) {<br>
return this.isNotNull(obj) &amp;&amp; obj.constructor === Array;<br>
},<br>
isNull(obj: any) {<br>
return typeof obj === 'undefined' || obj === null || this.length(obj) === 0;<br>
},<br>
isNotNull(obj: any) {<br>
return !this.isNull(obj);<br>
},<br>
length(obj: any) {<br>
let count = 0;<br>
for (const i in obj) {<br>
// 如果包含除它的原型本身之外的属性<br>
if (Object.prototype.hasOwnProperty.call(obj, i)) {<br>
count += 1;<br>
}<br>
}<br>
return count;<br>
},<br>
getChildrenPath(obj: any, c: any, k: any): any {<br>
if (this.isNull(obj)) {<br>
return null;<br>
}<br>
if (obj === c) {<br>
return k;<br>
}<br>
if (this.isObject(obj)) {<br>
let v;<br>
for (const key in obj) {<br>
if (!Object.prototype.hasOwnProperty.call(obj, key)) continue;<br>
v = this.getChildrenPath(obj[key], c, key);<br>
if (utils.string.isNotBlank(v)) {<br>
return <code>${utils.string.isNotBlank(k) ?</code><span class='katex-error' title='ParseError: KaTeX parse error: Expected &#039;EOF&#039;, got &#039;}&#039; at position 11: {k}.` : &#039;&#039;}̲'>{k}.` : &#039;&#039;}</span>{v}<code>; } } } return null; }, merge(t: any, s: any, mergeArray = false) { for (const k in s) { if (!Object.prototype.hasOwnProperty.call(s, k) || typeof s[k] === 'undefined' || s[k] === null) continue; const item = s[k]; switch (item.constructor) { case Object: { if (t[k] &amp;&amp; t[k].constructor === Object) { this.merge(t[k], item); } else { t[k] = item; } break; } case Array: { if (item.length &lt; 1) { break; } if (mergeArray &amp;&amp; t[k] &amp;&amp; t[k].constructor === Array) { t[k] = [...t[k], ...item]; } else { t[k] = item; } break; } case String: { if (item.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '').length &gt; 0) { t[k] = item; } break; } default: { t[k] = item; } } } return t; } }, string: { trim(str: any) { return utils.object.isNull(str) ? '' : (</code><span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \s at position 20: …}`).replace(/^[\̲s̲\uFEFF\xA0]+|[\…'>{str}`).replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+</span>/g, '');<br>
},<br>
isBlank(str: any) {<br>
return utils.object.isNull(str) || this.trim(str).length === 0;<br>
},<br>
isNotBlank(str: any) {<br>
return !this.isBlank(str);<br>
},<br>
isEmpty(str: any) {<br>
return utils.object.isNull(str) || (<code>${str}</code>).length === 0;<br>
},<br>
isNotEmpty(str: any) {<br>
return !this.isEmpty(str);<br>
},<br>
equalsIgnoreCase(a: any, b: any) {<br>
if (utils.object.isNull(a) || utils.object.isNull(b)) {<br>
return false;<br>
}<br>
return (<code>${a}</code>).toLowerCase() === (<code>${b}</code>).toLowerCase();<br>
}<br>
},<br>
list: {<br>
isEmpty(l: any) {<br>
return utils.object.isNull(l) || l.length &lt; 1;<br>
},<br>
isNotEmpty(l: any) {<br>
return !utils.list.isEmpty(l);<br>
},<br>
stringToList(s: any) {<br>
const txt = typeof s === 'string' ? s.split(',') : s;<br>
return s &amp;&amp; s.length &gt; 0 ? txt : [];<br>
},<br>
find(l: any, k: any, v: any, j: any) {<br>
const n = [];<br>
if (utils.list.isNotEmpty(l)) {<br>
for (let i = 0, len = l.length, r = l[i]; i &lt; len; i += 1) {<br>
if (j ? r[k] === v : <code>${r[k]}</code> === <code>${v}</code>) n.push(r);<br>
}<br>
}<br>
return n;<br>
},<br>
indexOf(l: any, k: any, v: any, b: any, j: any) {<br>
let n = -1;<br>
if (utils.list.isNotEmpty(l)) {<br>
for (let i = b || 0, len = l.length, r = l[i]; i &lt; len; i += 1) {<br>
if (j ? r[k] === v : <code>${r[k]}</code> === <code>${v}</code>) {<br>
n = i;<br>
break;<br>
}<br>
}<br>
}<br>
return n;<br>
}<br>
},<br>
map: {<br>
mapsExtVal(maps: any, key: any) {<br>
const list = [];<br>
for (let i = 0, len = maps.length; i &lt; len; i += 1) {<br>
list.push(maps[i][key]);<br>
}<br>
return list;<br>
},<br>
listToMap(list: any, key: any) {<br>
if (utils.object.isNull(list) || utils.string.isEmpty(key)) {<br>
return null;<br>
}<br>
const map: any = {};<br>
for (let i = 0, len = list.length; i &lt; len; i += 1) {<br>
const row = list[i];<br>
map[row[key]] = row;<br>
}<br>
return map;<br>
},<br>
isEqualForString(a: any, b: any) {<br>
return utils.map.isEqual(a, b, null, true);<br>
},<br>
isEmpty(m: any) {<br>
return utils.object.isNull(m) || this.keys(m).length &lt; 1;<br>
},<br>
isNotEmpty(m: any) {<br>
return !this.isEmpty(m);<br>
},<br>
isEqual(a: any, b: any, isWeak: any, isString: any) {<br>
if (utils.object.isNull(a) &amp;&amp; utils.object.isNull(b)) {<br>
return true;<br>
}<br>
if (utils.object.isNull(a) || utils.object.isNull(b)) {<br>
return false;<br>
}<br>
const aks: any = this.keys(a);<br>
const bks: any = this.keys(b);<br>
const aksl: number = aks.length;<br>
const bksl: number = bks.length;<br>
if (aksl !== bksl) {<br>
return false;<br>
}<br>
for (let i = 0; i &lt; aksl; i += 1) {<br>
if (isWeak || isString ? <code>${a[aks[i]]}</code> !== <code>${b[aks[i]]}</code> : a[aks[i]] !== b[aks[i]]) {<br>
return false;<br>
}<br>
}<br>
return true;<br>
},<br>
keys(m: any): any[] {<br>
const keys: any[] = [];<br>
for (const key in m) {<br>
if (Object.prototype.hasOwnProperty.call(m, key)) {<br>
keys.push(key);<br>
}<br>
}<br>
return keys;<br>
},<br>
vals(m: any) {<br>
const l = [];<br>
const keys = utils.map.keys(m);<br>
for (let i = 0, len = keys.length; i &lt; len; i += 1) {<br>
l.push(m[keys[i]]);<br>
}<br>
return l;<br>
}<br>
},<br>
// 格式化手机号  隐藏中间数据<br>
formatPhoneNumber(phone: string) {<br>
if (!phone) return '';<br>
return <code>${String(phone).slice(0, 3)}****${String(phone).slice(-4)}</code>;<br>
},<br>
// 数组转 百分比<br>
numberToPercentage(percentage: any) {<br>
if (percentage == null) return '--';<br>
const num: any = (Math.round(percentage * 10000) / 100).toFixed(2);<br>
return Number(percentage) === 0 ? '0%' : <code>${Math.abs(num)}%</code>;<br>
},<br>
/</em>*</p>
<ul>
<li>@param {Array} target 目标数组</li>
<li>@param {Array} arr 需要查询的数组</li>
<li>@description 判断要查询的数组是否至少有一个元素包含在目标数组中<br>
<em>/<br>
hasOneOf: (targetarr: any, arr: any) =&gt; {<br>
return targetarr.some((<em>: any) =&gt; arr.indexOf(</em>) &gt; -1);<br>
},<br>
onMsg: (callback: any) =&gt; {<br>
window.onmessage = (res: any) =&gt; {<br>
callback(res);<br>
};<br>
},<br>
/</em>*</li>
<li>快捷键注册</li>
<li>@param kes</li>
<li>@param fun<br>
*/<br>
compositeKey: (kes: string, fun: any) =&gt; {<br>
const k = kes || '';<br>
const fn = fun || function () {<br>
};</li>
</ul>
<pre><code>const ks = k.split('+');
if (ks.length &lt; 2) {
  console.info('not composite key');
  return;
}

document.addEventListener('keydown', function (e) {
  const ctrl = e.ctrlKey,
    shift = e.shiftKey,
    alt = e.altKey;
  // @ts-ignore
  let keyIdent = e.keyIdentifier;

  if (ctrl &amp;&amp; (ks.indexOf('ctrl') === -1)) {
    return;
  }

  if (shift &amp;&amp; (ks.indexOf('shift') === -1)) {
    return;
  }

  if (alt &amp;&amp; (ks.indexOf('alt') === -1)) {
    return;
  }

  if (e.keyCode &gt; 47 &amp;&amp; e.keyCode &lt; 91) {
    keyIdent = String.fromCharCode(e.keyCode);
  }

  if (keyIdent &amp;&amp; keyIdent.toLowerCase() === ks[ks.length - 1]) {
    fn(e);
  }
});
</code></pre>
<p>},<br>
/**</p>
<ul>
<li>消息通用模板</li>
<li>@param type</li>
<li>@param content</li>
<li>@param duration<br>
<em>/<br>
message: (type: string, content: string, duration = 6) =&gt; {<br>
// @ts-ignore<br>
ViewUI.Message[type]({<br>
background: true,<br>
closable: true,<br>
content,<br>
duration<br>
});<br>
},<br>
/</em>*</li>
<li>弹窗通用模板</li>
<li>@param type</li>
<li>@param title</li>
<li>@param content</li>
<li>@param okCallBack</li>
<li>@param cancelCallBack<br>
<em>/<br>
modal: (type = 'info', title: string, content = '', okCallBack = () =&gt; {<br>
}, cancelCallBack = () =&gt; {<br>
}) =&gt; {<br>
// @ts-ignore<br>
ViewUI.Modal[type]({<br>
title: title,<br>
content: content,<br>
onOk: () =&gt; {<br>
okCallBack();<br>
},<br>
onCancel: () =&gt; {<br>
cancelCallBack();<br>
}<br>
});<br>
},<br>
/</em>*</li>
<li>通知通用模板</li>
<li>@param type</li>
<li>@param title</li>
<li>@param desc</li>
<li>@param duration<br>
<em>/<br>
notice: (type: string, title: string, desc: string, duration = 6) =&gt; {<br>
// @ts-ignore<br>
ViewUI.Notice[type]({<br>
title,<br>
desc,<br>
duration<br>
});<br>
},<br>
/</em>*</li>
<li>遍历对象 返回 key value</li>
<li>@param obj</li>
<li>@param callback<br>
*/<br>
forIn: (obj: any, callback: any) =&gt; {<br>
Object.entries(obj).forEach(entry =&gt; {<br>
callback(...entry);<br>
});<br>
}<br>
};<br>
export default utils;</li>
</ul>
<p>vueTools</p>
<p>/**</p>
<ul>
<li>@FileName vueTools.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import createRoutes from './createRoutes';</p>
<p>/**</p>
<ul>
<li>路由权限判断处</li>
<li>@param to</li>
<li>@param next</li>
<li>@param homeName<br>
<em>/<br>
const turnTo = (to: any, next: any, homeName = 'home') =&gt; {<br>
next();<br>
};<br>
/</em>*</li>
<li>创建路由</li>
<li>@param title 模板通用标题</li>
<li>@param baseRoutes 基础路由</li>
<li>@param routes 模板路由</li>
<li>@param base 路由根地址，线上统一  /</li>
<li>@param homeName 主界面路由名</li>
<li>@param mode 路由模式 默认 history<br>
*/<br>
const createRoute = (baseRoutes: any = [], routes: any = [], base = '', homeName = 'home', mode: any = 'history') =&gt; {<br>
if (process.env.NODE_ENV === 'production') base = '';<br>
const title = '';<br>
// @ts-ignore<br>
return createRoutes(baseRoutes, routes, base, homeName, mode, title, turnTo);<br>
};</li>
</ul>
<p>export default {createRoute};</p>
<p>log</p>
<p>/**</p>
<ul>
<li>@FileName log.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import moment from './moment';<br>
import lStorage from './lStorage';<br>
import fStorage from 'localforage';</p>
<p>const maxLog = 50;</p>
<p>const setErrorLog = (key: string, info: any) =&gt; {<br>
if (typeof window !== 'undefined') {<br>
lStorage.setItem(key, info);<br>
} else {<br>
console.log('[ ERROR ]', info);<br>
}<br>
};<br>
const setApiLog = (key: string, info: any) =&gt; {<br>
if (typeof window !== 'undefined') {<br>
// @ts-ignore<br>
info.time = moment.format();<br>
const storage = fStorage.createInstance({name: key});</p>
<pre><code>storage.keys().then((keys: any) =&gt; {
  if (keys.length &gt; maxLog) {
    const num = keys.length - maxLog;
    const newArr = keys.slice(0, num);
    newArr.forEach((item: any) =&gt; {
      storage.removeItem(item).then(() =&gt; {
        // 当值被移除后，此处代码运行
      }).catch((err: any) =&gt; {
        console.log(err);
      });
    });
  }
}).catch((err: any) =&gt; {
  console.error(err);
});

// @ts-ignore
if (info.status !== 200) {
  setErrorLog('errorMSG', info);
}
storage.setItem(moment.format(new Date(), 'x'), JSON.stringify(info));
</code></pre>
<p>} else {<br>
// @ts-ignore<br>
info.time = moment.format();<br>
console.log('[ API ]', info);<br>
}<br>
};</p>
<p>const setConsoleLog = (key: string, info: any) =&gt; {<br>
if (typeof window !== 'undefined') {<br>
// @ts-ignore<br>
info.time = moment.format();<br>
const storage = fStorage.createInstance({name: key});</p>
<pre><code>storage.keys().then((keys: any) =&gt; {
  if (keys.length &gt; maxLog) {
    const num = keys.length - maxLog;
    const newArr = keys.slice(0, num);
    newArr.forEach((item: any) =&gt; {
      storage.removeItem(item).then(() =&gt; {
        // 当值被移除后，此处代码运行
      }).catch((err: any) =&gt; {
        console.log(err);
      });
    });
  }
}).catch((err: any) =&gt; {
  console.error(err);
});

storage.setItem(moment.format(new Date(), 'x'), JSON.stringify(info));
</code></pre>
<p>} else {<br>
// @ts-ignore<br>
info.time = moment.format();<br>
console.log('[ API ]', info);<br>
}<br>
};</p>
<p>const consoleMSG = (type: string, title: string, args: any) =&gt; {<br>
if (type === 'table') {<br>
// @ts-ignore<br>
console.log(<code>[ ${type} ] =&gt; ${title}</code>);<br>
console.table([...args]);<br>
}<br>
// @ts-ignore<br>
console[type](<code>[ ${type} ] =&gt; ${title}</code>, args);<br>
const consoleInfo = {<br>
title: title,<br>
type,<br>
url: location.pathname + location.search,<br>
data: args<br>
};<br>
setConsoleLog('logStorage', consoleInfo);<br>
};</p>
<p>export default {<br>
setConsoleLog,<br>
setErrorLog,<br>
setApiLog,<br>
info: (title: string, args: any) =&gt; consoleMSG('info', title, args),<br>
error: (title: string, args: any) =&gt; consoleMSG('error', title, args),<br>
debug: (title: string, args: any) =&gt; consoleMSG('debug', title, args),<br>
warn: (title: string, args: any) =&gt; consoleMSG('warn', title, args),<br>
table: (title: string, args: any) =&gt; consoleMSG('table', title, args)<br>
};</p>
<p>Axios</p>
<p>/**</p>
<ul>
<li>@FileName axios.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import lStorage from './lStorage';<br>
import ViewUI from 'view-design';<br>
import tools from './tools';<br>
import log from './log';<br>
import axios from 'axios';</p>
<p>class HttpRequest {<br>
private baseUrl: string;<br>
private queue = {};</p>
<p>constructor(baseUrl = '') {<br>
this.baseUrl = baseUrl;<br>
this.queue = {};<br>
}</p>
<p>private static apiMsgTemplate(apiInfo: any) {<br>
return <code>&lt;div style=&quot;font-size: 14px;&quot;&gt;&lt;p style=&quot;color: red;font-size: 14px;&quot;&gt;请截图给管理员，以便快捷修复错误！&lt;/p&gt;&lt;p&gt;错误: ${apiInfo.statusText}&lt;/p&gt;&lt;p&gt;method: ${apiInfo.request.method}&lt;/p&gt;&lt;p style=&quot;margin: 5px 0;&quot;&gt;URL:&lt;br&gt; ${apiInfo.request.url}&lt;/p&gt;&lt;p&gt;参数：&lt;br&gt;${apiInfo.request.data.toString()}&lt;/p&gt;&lt;/div&gt;</code>;<br>
}</p>
<p>private getInsideConfig() {<br>
return {<br>
baseURL: this.baseUrl,<br>
timeout: 10000,<br>
responseType: 'json',<br>
headers: {<br>
'If-Modified-Since': 0,<br>
'Cache-Control': 'no-cache'<br>
}<br>
};<br>
}</p>
<p>private destroy(url: string) {<br>
// @ts-ignore<br>
delete this.queue[url];<br>
if (!Object.keys(this.queue).length) {<br>
// @ts-ignore<br>
ViewUI.LoadingBar.finish();<br>
}<br>
}</p>
<p>private unusualStatus(code: number, apiInfo: any) {<br>
switch (code) {<br>
case 0:<br>
tools.message('info', <code>${apiInfo.statusText}</code>, 10);<br>
break;<br>
case 400:<br>
tools.notice('warning', <code>请求参数错误: ${apiInfo.status}</code>, HttpRequest.apiMsgTemplate(apiInfo), 15);<br>
break;<br>
case 401:<br>
// this.notice('warning', '登录信息', '登录超时或未登录，请重新登录！');<br>
tools.modal('warning', '登录信息', '登录超时或未登录，请重新登录！', () =&gt; {<br>
lStorage.setItem('userInfo', '');<br>
lStorage.setItem('isLogin', false);<br>
lStorage.setItem('Authorization', '');<br>
lStorage.setItem('errorMSG', '');<br>
location.href = '/login?done=' + location.href;<br>
});<br>
break;<br>
case 404:<br>
tools.notice('info', <code>资源未找到: ${apiInfo.status}</code>, HttpRequest.apiMsgTemplate(apiInfo), 15);<br>
break;<br>
case 405:<br>
tools.notice('warning', <code>请求类型错误: ${apiInfo.status}</code>, HttpRequest.apiMsgTemplate(apiInfo), 15);<br>
break;<br>
case 500:<br>
tools.notice('error', <code>服务器错误: ${apiInfo.status}</code>, HttpRequest.apiMsgTemplate(apiInfo), 15);<br>
break;<br>
case 503:<br>
tools.notice('info', <code>服务器错误: ${apiInfo.status}</code>, '服务器维护中，请稍后再试！', 15);<br>
break;<br>
default:<br>
tools.message('error', <code>${apiInfo.status} : ${apiInfo.statusText}</code>);<br>
break;<br>
}<br>
}</p>
<p>interceptors(instance: any, url: string) {<br>
// 请求拦截<br>
instance.interceptors.request.use(<br>
(config: any) =&gt; {<br>
// 添加全局的loading...<br>
if (!Object.keys(this.queue).length) {<br>
// @ts-ignore<br>
ViewUI.LoadingBar.start();<br>
}<br>
// @ts-ignore<br>
this.queue[url] = true;<br>
return config;<br>
},<br>
(error: any) =&gt; Promise.reject(error)<br>
);</p>
<pre><code>// axios 响应拦截
instance.interceptors.response.use(
  (res: any) =&gt; {
    this.destroy(url);
    const {data: {data}, config, request: {responseURL}} = res;
    const response = res.request;

    const apiInfo = {
      status: response.status,
      statusText: (data &amp;&amp; data.msg) || response.statusText,
      request: {
        url: responseURL,
        api: config.baseURL + config.url || '',
        method: config.method,
        data: config.data || ''
      },
      response: {
        data: data || ''
      }
    };

    log.setApiLog('apiLogStorage', apiInfo);
    return data || '';
  },
  (error: any) =&gt; {
    this.destroy(url);
    let apiInfo: any;

    if (error.response) {
      const {response: {status, statusText, data, config, request: {responseURL}}} = error;
      apiInfo = {
        status,
        statusText: (data &amp;&amp; data.msg) || statusText,
        request: {
          url: responseURL,
          api: config.baseURL + config.url || '',
          method: config.method,
          data: config.data || ''
        },
        response: {
          data: data || ''
        }
      };
    } else {
      const {config, message} = JSON.parse(JSON.stringify(error));
      const {request} = error;
      apiInfo = {
        status: request.status,
        statusText: message || request.statusText || '',
        request: {
          url: '',
          api: config.baseURL + config.url || '',
          method: config.method,
          data: config.data || ''
        },
        response: {
          data: ''
        }
      };
    }

    log.setApiLog('apiLogStorage', apiInfo);
    this.unusualStatus(apiInfo.status, apiInfo);
    if (apiInfo.response &amp;&amp; apiInfo.response.data) {
      return Promise.reject(apiInfo.response.data);
    }
    return Promise.reject(error);
  }
);
</code></pre>
<p>}</p>
<p>request(options: any) {<br>
const instance = axios.create();<br>
options = Object.assign(this.getInsideConfig(), options);<br>
this.interceptors(instance, options.url);<br>
return instance(options);<br>
}<br>
}</p>
<p>export default HttpRequest;</p>
<p>API request</p>
<p>/**</p>
<ul>
<li>@FileName api.request.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import HttpRequest from './axios';<br>
import lStorage from './lStorage';</li>
</ul>
<p>const getTokenToLocalStorage = () =&gt; {<br>
return lStorage.getItem('Authorization') || '';<br>
};</p>
<p>class API {<br>
private baseUrl: string;<br>
private axios: any;</p>
<p>constructor(baseUrl = '') {<br>
this.baseUrl = baseUrl;<br>
this.axios = new HttpRequest(baseUrl);<br>
}</p>
<p>/**</p>
<ul>
<li>post 请求</li>
<li>@param url 接口url</li>
<li>@param data 参数</li>
<li>@param method<br>
*/<br>
post(url: string, data: any, method = 'post') {<br>
return this.axios.request({<br>
url,<br>
// data: qs.stringify(data), from 标点传参<br>
data,<br>
method,<br>
headers: {<br>
Authorization: getTokenToLocalStorage()<br>
}<br>
});<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>put 请求</li>
<li>@param url 接口url</li>
<li>@param data 参数<br>
*/<br>
put(url: string, data: any) {<br>
return this.post(url, data, 'put');<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>patch 请求</li>
<li>@param url 接口url</li>
<li>@param data 参数<br>
*/<br>
patch(url: string, data: any) {<br>
return this.post(url, data, 'patch');<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>get 请求</li>
<li>@param url 接口url</li>
<li>@param params 参数</li>
<li>@param method<br>
*/<br>
get(url: string, params: any, method = 'get') {<br>
return this.axios.request({<br>
url,<br>
params,<br>
method,<br>
headers: {<br>
Authorization: getTokenToLocalStorage()<br>
}<br>
});<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>delete 请求</li>
<li>@param url 接口url</li>
<li>@param params 参数<br>
*/<br>
delete(url: string, params: any) {<br>
return this.get(url, params, 'delete');<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>head 请求</li>
<li>@param url 接口url</li>
<li>@param params 参数<br>
*/<br>
head(url: string, params: any) {<br>
return this.get(url, params, 'head');<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>options 请求</li>
<li>@param url 接口url</li>
<li>@param params 参数<br>
*/<br>
options(url: string, params: any) {<br>
return this.get(url, params, 'options');<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>axios本版本不支持jsonp 自己拓展一个</li>
<li>@param url<br>
*/<br>
jsonp(url: string) {<br>
if (!url) {<br>
console.error('Axios.JSONP 至少需要一个url参数!');<br>
return;<br>
}<br>
return new Promise((resolve: any) =&gt; {<br>
// @ts-ignore<br>
window.jsonCallBack = (result: any) =&gt; {<br>
resolve(result);<br>
};<br>
const JSONP = document.createElement('script');<br>
JSONP.type = 'text/javascript';<br>
JSONP.src = <code>${url}&amp;callback=jsonCallBack</code>;<br>
document.getElementsByTagName('head')[0].appendChild(JSONP);<br>
setTimeout(() =&gt; {<br>
document.getElementsByTagName('head')[0].removeChild(JSONP);<br>
}, 500);<br>
});<br>
}<br>
}</li>
</ul>
<p>export default API;</p>
<p>工具类统一导出</p>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import moment from './moment';<br>
import log from './log';<br>
import API from './api.request';<br>
import cookie from './cookie';<br>
import gbk from './gbk';<br>
import lStorage from './lStorage';<br>
import sStorage from './sStorage';<br>
import tools from './tools';<br>
import MockJs from './mock';<br>
import createRoutes from './createRoutes';</li>
</ul>
<p>export default {<br>
...tools,<br>
moment,<br>
cookie,<br>
log,<br>
API,<br>
gbk,<br>
lStorage,<br>
sStorage,<br>
MockJs,<br>
createRoutes<br>
};</p>
<p>API &amp; Mock<br>
相关文件目录</p>
<p>├─node_modules<br>
├─public<br>
│  └─img<br>
│      └─icons<br>
├─src<br>
│  ├─assets<br>
│  ├─components<br>
│  │  └─log<br>
│  ├─data<br>
│  │  ├─api<br>
│  │  │  └─test<br>
│  │  └─mock<br>
│  │      └─test<br>
│  ├─layout<br>
│  ├─libs<br>
│  ├─router<br>
│  ├─store<br>
│  └─views<br>
└─tests<br>
└─unit</p>
<p>api</p>
<pre><code>1、新建 /src/data/api 目录
2、新建 /src/data/api/test/index.ts 文件 接口调用配置
</code></pre>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import tools from '@/libs/index';</li>
</ul>
<p>const baseUrl = '/api';<br>
const api = new tools.API(baseUrl);</p>
<p>export default {<br>
// 获取用户信息  http://192.192.192.201:9001/app/mock/1/user/info<br>
getUserInfoData: () =&gt; api.get('/user/info', {})<br>
};</p>
<pre><code>3、新建 /src/data/api/index.ts 文件 导出接口，
</code></pre>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import test from './test';</li>
</ul>
<p>export default {test};</p>
<pre><code>4、新建 /src/index.ts 文件 所有通用引用配置，方便以后做多入口项目
</code></pre>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import Vue from 'vue';<br>
import ViewUI from 'view-design';<br>
import tools from '@/libs/index';<br>
import api from '@/data/api';<br>
import 'view-design/dist/styles/iview.css';</p>
<p>Vue.use(ViewUI);</p>
<p>declare module 'vue/types/vue' {<br>
interface Vue {<br>
api: any;<br>
log: any;<br>
CDN: any;<br>
tool: any;<br>
config: any;<br>
}<br>
}<br>
console.log(process.env);<br>
Vue.prototype.config = process.env;<br>
Vue.prototype.log = tools.log;<br>
Vue.prototype.tool = tools;<br>
Vue.prototype.api = api;<br>
Vue.prototype.CDN = (path: string) =&gt; <code>${process.env.VUE_APP_CDN || ''}${path}</code>;<br>
Vue.config.productionTip = false;</p>
<pre><code>5、 /src/main.ts 导入/src/index.ts
</code></pre>
<p>import Vue from 'vue';<br>
import App from './App.vue';<br>
import router from './router';<br>
import store from './store';</p>
<p>import '@/index';</p>
<p>new Vue({<br>
router,<br>
store,<br>
render: h =&gt; h(App)<br>
}).$mount('#app');</p>
<pre><code>6、页面调用 api 接口 /src/views/Home.vue
</code></pre>
<template>
  <div class="home">
    <img alt="Vue logo" src="../assets/logo.png">
    <HelloWorld msg="Welcome to Your Vue.js + TypeScript App"/>
  </div>
</template>
<script lang="ts">
  import {Component, Vue} from 'vue-property-decorator';
  import HelloWorld from '@/components/HelloWorld.vue'; // @ is an alias to /src

  @Component({
    components: {
      HelloWorld
    }
  })
  export default class Home extends Vue {
    mounted() {
      this.getUserInfoAction();
    }

    async getUserInfoAction() {
      try {
        const idCard = '33082219510203094X';
        const data = await this.api.test.getUserInfoData(idCard);
        this.log.info('接口测试信息 - get', data);
        return data;
      } catch (e) {
        this.log.error('接口测试信息 - get', e);
      }
    }
  }
</script>
<p>Mock</p>
<pre><code>1、新建 /src/data/mock 目录
2、新建 /src/data/mock/test/index.ts 文件 mock配置，目录结构和api保持一致，方便后期维护
</code></pre>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/<br>
import tools from '@/libs/index';</li>
</ul>
<p>const baseUrl = '/api';<br>
const mock = new tools.MockJs(baseUrl);<br>
mock.get('/user/info', mock.tpl({title: '@title'}));</p>
<pre><code>3、根目录 .env 文件配置mock开关
</code></pre>
<p>NODE_ENV = 'development'<br>
VUE_APP_MOCK = true</p>
<pre><code>4、/src/index.ts 导入mock
</code></pre>
<p>/**</p>
<ul>
<li>@FileName index.ts</li>
<li>@Author</li>
<li>@Version V 0.0.1</li>
<li>@Date</li>
<li>@Title</li>
<li>@Desc<br>
**/</li>
</ul>
<p>import Vue from 'vue';<br>
import ViewUI from 'view-design';<br>
import tools from '@/libs/index';<br>
import api from '@/data/api';<br>
import 'view-design/dist/styles/iview.css';</p>
<p>/* eslint-disable */<br>
if (process.env.VUE_APP_MOCK === 'true') require('./data/mock');</p>
<p>Vue.use(ViewUI);</p>
<p>declare module 'vue/types/vue' {<br>
interface Vue {<br>
api: any;<br>
log: any;<br>
CDN: any;<br>
tool: any;<br>
config: any;<br>
}<br>
}<br>
console.log(process.env);<br>
Vue.prototype.config = process.env;<br>
Vue.prototype.log = tools.log;<br>
Vue.prototype.tool = tools;<br>
Vue.prototype.api = api;<br>
Vue.prototype.CDN = (path: string) =&gt; <code>${process.env.VUE_APP_CDN || ''}${path}</code>;<br>
Vue.config.productionTip = false;</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>\s\uFEFF\xA0 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
</feed>